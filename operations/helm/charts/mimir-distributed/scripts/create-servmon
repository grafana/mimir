#!/usr/bin/env bash

set -euf -o pipefail

function usage {
  cat <<EOF
Create the ServiceMonitor manifest template

Usage:
  $0 [options] <component>

Options:
  -g  component is member of memberlist
  -e  is enterprise feature
  -t  toggleable with "enabled"
  -ne opensource only feature

Examples:
  $0 overrides-exporter
EOF
}

if [[ $# -eq 0 ]]; then
  usage
  exit 1
fi

component="$1"
enterprise=false
non_enterprise=false
toggle=false
memberlist=''

while [[ $# -gt 0 ]] ; do
case "$1" in
  -g)
    memberlist=' "memberlist" true'
    ;;
  -e)
    enterprise=true
    ;;
  -ne)
    non_enterprise=true
    ;;
  -t)
    toggle=true
    ;;
  -h) usage && exit 0 ;;
  *)
    component="$1" ;;
esac
shift
done

# Convert kebab-case to snake_case.
function snake_case {
  sed -E -e 's/-/_/' <<<"$1"
}

snake_cased="$(snake_case "${component}")"

if [ "${enterprise}" = "true" ] ; then
echo "{{- if .Values.enterprise.enabled -}}"
fi

if [ "${non_enterprise}" = "true" ] ; then
echo "{{- if not .Values.enterprise.enabled -}}"
fi

if [ "${toggle}" = "true" ] ; then
echo "{{- if .Values.${snake_cased}.enabled -}}"
fi

cat <<EOF
{{- with .Values.serviceMonitor }}
{{- if .enabled }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ include "mimir.resourceName" (dict "ctx" $ "component" "${component}") }}
  {{- with .namespace }}
  namespace: {{ . }}
  {{- end }}
  labels:
    {{- include "mimir.labels" (dict "ctx" $ "component" "${component}"${memberlist}) | nindent 4 }}
    {{- with .labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with .annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- with .namespaceSelector }}
  namespaceSelector:
  {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "mimir.selectorLabels" (dict "ctx" $ "component" "${component}"${memberlist}) | nindent 6 }}
  endpoints:
    - port: http-metrics
      {{- with .interval }}
      interval: {{ . }}
      {{- end }}
      {{- with .scrapeTimeout }}
      scrapeTimeout: {{ . }}
      {{- end }}
      relabelings:
        - sourceLabels: [job]
          replacement: "{{ $.Release.Namespace }}/${component}"
          targetLabel: job
        - replacement: "{{ include "mimir.clusterName" $ }}"
          targetLabel: cluster
        {{- with .relabelings }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .scheme }}
      scheme: {{ . }}
      {{- end }}
      {{- with .tlsConfig }}
      tlsConfig:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end -}}
{{- end -}}
EOF

if [ "${enterprise}" = "true" ] ; then
echo "{{- end -}}"
fi

if [ "${non_enterprise}" = "true" ] ; then
echo "{{- end -}}"
fi

if [ "${toggle}" = "true" ] ; then
echo "{{- end -}}"
fi
