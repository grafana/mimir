{{- if and (eq .Values.deploymentMode "monolithic") (not .Values.federation_frontend.disableOtherComponents) }}
{{- $args := dict "ctx" . "component" "monolithic" "memberlist" true -}}
{{- $zonesMap := include "mimir.zoneAwareReplicationMap" $args | fromYaml -}}
{{- range $zoneName, $rolloutZone := $zonesMap }}
{{- with $ -}}
{{- $_ := set $args "rolloutZoneName" $zoneName -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mimir.resourceName" $args }}
  labels:
    {{- include "mimir.labels" $args | nindent 4 }}
  annotations:
    {{- include "mimir.componentAnnotations" $args | nindent 4 }}
  namespace: {{ .Release.Namespace | quote }}
spec:
  podManagementPolicy: {{ .Values.monolithic.podManagementPolicy }}
  replicas: {{ $rolloutZone.replicas }}
  {{- if and (semverCompare ">= 1.23-0" (include "mimir.kubeVersion" .)) (.Values.monolithic.persistentVolume.enableRetentionPolicy)  }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.monolithic.persistentVolume.whenDeleted }}
    whenScaled: {{ .Values.monolithic.persistentVolume.whenScaled }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "mimir.selectorLabels" $args | nindent 6 }}
  updateStrategy:
    {{- if $zoneName }}
    type: OnDelete
    {{- else }}
    {{- toYaml .Values.monolithic.statefulStrategy | nindent 4 }}
    {{- end }}
  serviceName: {{ template "mimir.fullname" . }}-monolithic{{- if not .Values.enterprise.legacyLabels -}}-headless{{- end -}}
  {{- if .Values.monolithic.persistentVolume.enabled }}
  {{- with .Values.monolithic.persistentVolume }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: {{ .name }}
        {{- if .annotations }}
        annotations:
          {{- toYaml .annotations | nindent 10 }}
        {{- end }}
      spec:
        {{- $storageClass := default .storageClass $rolloutZone.storageClass }}
        {{- if $storageClass }}
        {{- if (eq "-" $storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ $storageClass }}
        {{- end }}
        {{- end }}
        accessModes:
          {{- toYaml .accessModes | nindent 10 }}
        resources:
          requests:
            storage: "{{ .size }}"
  {{- end }}
  {{- end }}
  template:
    metadata:
      labels:
        {{- include "mimir.podLabels" $args | nindent 8 }}
      annotations:
        {{- include "mimir.podAnnotations" $args | nindent 8 }}
      namespace: {{ .Release.Namespace | quote }}
    spec:
      {{- with .Values.monolithic.schedulerName }}
      schedulerName: {{ . | quote }}
      {{- end }}
      serviceAccountName: {{ template "mimir.serviceAccountName" . }}
      {{- if .Values.monolithic.priorityClassName }}
      priorityClassName: {{ .Values.monolithic.priorityClassName }}
      {{- end }}
      securityContext:
        {{- include "mimir.lib.podSecurityContext" $args | nindent 8 }}
      {{- with .Values.monolithic.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      {{- with $rolloutZone.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $rolloutZone.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- include "mimir.lib.topologySpreadConstraints" (dict "ctx" . "component" "monolithic") | nindent 6 }}
      {{- with .Values.monolithic.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.monolithic.terminationGracePeriodSeconds }}
      volumes:
        - name: config
          {{- include "mimir.configVolume" . | nindent 10 }}
        {{- if .Values.enterprise.enabled }}
        - name: license
          secret:
            secretName: {{ tpl .Values.license.secretName . }}
        {{- end }}
        - name: runtime-config
          configMap:
            name: {{ template "mimir.fullname" . }}-runtime
        {{- if not .Values.monolithic.persistentVolume.enabled }}
        - name: storage
          emptyDir: {}
        {{- end }}
        {{- if .Values.monolithic.extraVolumes }}
        {{ toYaml .Values.monolithic.extraVolumes | nindent 8 }}
        {{- end }}
        {{- if .Values.global.extraVolumes }}
        {{ toYaml .Values.global.extraVolumes | nindent 8 }}
        {{- end }}
        - name: active-queries
          emptyDir: {}
      containers:
        {{- if .Values.monolithic.extraContainers }}
        {{ toYaml .Values.monolithic.extraContainers | nindent 8 }}
        {{- end }}
        - name: monolithic
          image: "{{ include "mimir.imageReference" (dict "ctx" . "component" "monolithic") }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - "-target=all"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
            {{- if $zoneName }}
            - "-ingester.ring.instance-availability-zone={{ $zoneName }}"
            - "-store-gateway.sharding-ring.instance-availability-zone={{ $zoneName }}"
            {{- else }}
            - "-ingester.ring.instance-availability-zone=zone-default"
            {{- if .Values.monolithic.zoneAwareReplication.migration.enabled }}
            - "-blocks-storage.tsdb.flush-blocks-on-shutdown=true"
            - "-ingester.ring.unregister-on-shutdown=true"
            - "-store-gateway.sharding-ring.prefix=collectors/"
            - "-store-gateway.sharding-ring.zone-awareness-enabled=false"
            {{- end }}
            - "-server.grpc-max-concurrent-streams=500"
            {{- end }}
            - "-server.grpc.keepalive.max-connection-age=60s"
            - "-server.grpc.keepalive.max-connection-age-grace=5m"
            - "-server.grpc.keepalive.max-connection-idle=1m"
            {{- if .Values.monolithic.compression.enabled }}
            - "-query-frontend.grpc-client-config.grpc-compression={{ .Values.monolithic.compression.algorithm }}"
            - "-query-scheduler.grpc-client-config.grpc-compression={{ .Values.monolithic.compression.algorithm }}"
            - "-ruler.client.grpc-compression={{ .Values.monolithic.compression.algorithm }}"
            - "-ruler.query-frontend.grpc-client-config.grpc-compression={{ .Values.monolithic.compression.algorithm }}"
            - "-ingester.client.grpc-compression={{ .Values.monolithic.compression.algorithm }}"
            {{- end }}
            {{- range $key, $value := .Values.monolithic.extraArgs }}
            - -{{ $key }}={{ $value }}
            {{- end }}
          volumeMounts:
            {{- if .Values.monolithic.extraVolumeMounts }}
            {{ toYaml .Values.monolithic.extraVolumeMounts | nindent 12}}
            {{- end }}
            {{- if .Values.global.extraVolumeMounts }}
            {{ toYaml .Values.global.extraVolumeMounts | nindent 12}}
            {{- end }}
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/{{ include "mimir.name" . }}
            - name: storage
              mountPath: "/data"
              {{- if .Values.monolithic.persistentVolume.subPath }}
              subPath: {{ .Values.monolithic.persistentVolume.subPath }}
              {{- end }}
            {{- if .Values.enterprise.enabled }}
            - name: license
              mountPath: /license
            {{- end }}
            - name: active-queries
              mountPath: /active-query-tracker
          ports:
            - name: http-metrics
              containerPort: {{ include "mimir.serverHttpListenPort" . }}
              protocol: TCP
            - name: grpc
              containerPort: {{ include "mimir.serverGrpcListenPort" . }}
              protocol: TCP
            - name: memberlist
              containerPort: {{ include "mimir.memberlistBindPort" . }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.monolithic.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.monolithic.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.monolithic.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.monolithic.containerSecurityContext | nindent 12 }}
          {{- $jaeger_queue_size := dig "jaegerReporterMaxQueueSize" nil .Values.monolithic }}
          {{- if or .Values.global.extraEnv .Values.monolithic.env $jaeger_queue_size }}
          env:
            {{- $cpu_request := dig "requests" "cpu" nil .Values.monolithic.resources }}
            {{- if $cpu_request }}
              {{- $cpu_request_between_3_and_6 := include "mimir.parseCPU" (dict "value" $cpu_request) | float64 | min 6 | max 3 }}
            {{/* copy logic from operations/mimir/ingester.libsonnet */}}
            - name: "GOMAXPROCS"
              value: {{ addf $cpu_request $cpu_request_between_3_and_6 1 | ceil | toString | toYaml }}
            {{- end }}
            {{- with .Values.global.extraEnv }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- with .Values.monolithic.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- if $jaeger_queue_size }}
            - name: "JAEGER_REPORTER_MAX_QUEUE_SIZE"
              value: {{$jaeger_queue_size | toString | toYaml }}
            {{- end }}
          {{- end }}
          {{- if or .Values.global.extraEnvFrom .Values.monolithic.extraEnvFrom }}
          envFrom:
            {{- with .Values.global.extraEnvFrom }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- with .Values.monolithic.extraEnvFrom }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
---
{{ end }}
{{ end }}
{{ end }}