{{- $calculatedConfig := include "mimir.calculatedConfig" . | fromYaml }}
{{- $unstructuredConfig := include "mimir.unstructuredConfig" . | fromYaml }}

{{- if .Values.config }}
{{- fail "Top level 'config' is not allowed. In 'mimir.config', provide the configuration as a string that can contain template expressions. Alternatively, you can provide the configuration as an external secret." }}
{{- end }}

{{- if .Values.podDisruptionBudget }}
{{- fail "Top level 'podDisruptionBudget' is removed in favour of per component podDisruptionBudget" }}
{{- end }}

{{- if not ($calculatedConfig.activity_tracker).filepath }}
{{- fail "The 'activity_tracker.filepath' in 'mimir.config' should be set to a path that is on a writeable volume. For example: '/data/metrics-activity.log'." }}
{{- end }}

{{- if ($unstructuredConfig.server).http_listen_port }}
{{- fail "The setting 'server.http_listen_port' is not allowed in 'mimir.config' as it leads to a circular dependency. Set it in 'mimir.structuredConfig' instead." }}
{{- end }}

{{- if ($unstructuredConfig.server).grpc_listen_port }}
{{- fail "The setting 'server.grpc_listen_port' is not allowed in 'mimir.config' as it leads to a circular dependency. Set it in 'mimir.structuredConfig' instead." }}
{{- end }}

{{- if ($unstructuredConfig.memberlist).bind_port }}
{{- fail "The setting 'memberlist.bind_port' is not allowed in 'mimir.config' as it leads to a circular dependency. Set it in 'mimir.structuredConfig' instead." }}
{{- end }}

{{- if not (has .Values.configStorageType (list "Secret" "ConfigMap")) }}
{{- fail "The setting 'configStorageType' should be one of 'Secret' or 'ConfigMap'." }}
{{- end }}

{{- with .Values.metaMonitoring.grafanaAgent }}
{{/*
  !servmon.Enabled
  && agent.Enabled
  && (remote.url != "" || (len(additionalConfigs) > 0 && additionalConfigs.url != ""))
*/}}
{{- if and
    (not ((($.Values).metaMonitoring).serviceMonitor).enabled)
    .enabled
    (or
      (not (empty ((.metrics).remote).url))
      (and
        (not (empty (.metrics).additionalRemoteWriteConfigs))
        (not (empty (first (.metrics).additionalRemoteWriteConfigs).url))
      )
    )
    }}
{{- fail "metaMonitoring.grafanaAgent.remote.url is set, but metaMonitoring.serviceMonitor is disabled; you will not see any metrics, so enable the metaMonitoring.serviceMonitor or remove the remote configuration" }}
{{- end }}
{{- end }}

{{- with ($calculatedConfig.blocks_storage).bucket_store }}
  {{- with .chunks_cache }}
    {{- if and
        (index $.Values "chunks-cache" "enabled")
        (eq .backend "memcached")
        (ne .memcached.addresses (include "mimir.chunksCacheAddress" $))
        }}
      {{- fail (cat 
          "you set chunks-cache.enabled, but the address of the chunks cache in the Mimir configuration in 'blocks_storage.bucket_store.chunks_cache.memcached.addresses'"
          " is different from the address of the memcached instance created by the chart. (actual: "
          .memcached.addresses
          ", expected: "
          (include "mimir.chunksCacheAddress" $)
          "). If you want to use your own memcached cluster, disable chunks-cache.enabled and keep the Mimir configuration in mimir.config or mimir.structuredConfig")
        }}
    {{- end }}
  {{- end }}
  {{- with .metadata_cache }}
    {{- if and
        (index $.Values "metadata-cache" "enabled")
        (eq .backend "memcached")
        (ne .memcached.addresses (include "mimir.metadataCacheAddress" $))
        }}
      {{- fail (cat 
          "you set metadata-cache.enabled, but the address of the metadata cache in the Mimir configuration in 'blocks_storage.bucket_store.metadata_cache.memcached.addresses'"
          " is different from the address of the memcached instance created by the chart. (actual: "
          .memcached.addresses
          ", expected: "
          (include "mimir.metadataCacheAddress" $)
          "). If you want to use your own memcached cluster, disable metadata-cache.enabled and keep the Mimir configuration in mimir.config or mimir.structuredConfig")
        }}
    {{- end }}
  {{- end }}
  {{- with .index_cache }}
    {{- if and
        (index $.Values "index-cache" "enabled")
        (eq .backend "memcached")
        (ne .memcached.addresses (include "mimir.indexCacheAddress" $))
        }}
      {{- fail (cat 
          "you set index-cache.enabled, but the address of the index cache in the Mimir configuration in 'blocks_storage.bucket_store.index_cache.memcached.addresses'"
          " is different from the address of the memcached instance created by the chart. (actual: "
          .memcached.addresses
          ", expected: "
          (include "mimir.indexCacheAddress" $)
          "). If you want to use your own memcached cluster, disable index-cache.enabled and keep the Mimir configuration in mimir.config or mimir.structuredConfig")
        }}
    {{- end }}
  {{- end }}
{{- end }}

{{- with ($calculatedConfig.frontend) }}
  {{- with .results_cache }}
    {{- if and
        (index $.Values "results-cache" "enabled")
        (eq .backend "memcached")
        (ne .memcached.addresses (include "mimir.resultsCacheAddress" $))
        }}
      {{- fail (cat 
          "you set results-cache.enabled, but the address of the results cache in the Mimir configuration in 'frontend.results_cache.memcached.addresses'"
          " is different from the address of the memcached instance created by the chart. (actual: "
          .memcached.addresses
          ", expected: "
          (include "mimir.resultsCacheAddress" $)
          "). If you want to use your own memcached cluster, disable results-cache.enabled and keep the Mimir configuration in mimir.config or mimir.structuredConfig")
        }}
    {{- end }}
  {{- end }}
{{- end }}

{{- with .Values.memcached }}
  {{- if .enabled }}
    {{- fail "memcached.enabled has been renamed to chunks-cache.enabled" }}
  {{- end }}
{{- end }}

{{- with (index .Values "memcached-metadata") }}
  {{- if .enabled }}
    {{- fail "memcached-metadata.enabled has been renamed to metadata-cache.enabled" }}
  {{- end }}
{{- end }}

{{- with (index .Values "memcached-queries") }}
  {{- if .enabled }}
    {{- fail "memcached-queries.enabled has been renamed to index-cache.enabled" }}
  {{- end }}
{{- end }}

{{- with (index .Values "memcached-results") }}
  {{- if .enabled }}
    {{- fail "memcached-results.enabled has been renamed to results-cache.enabled" }}
  {{- end }}
{{- end }}
