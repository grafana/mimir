{{- if and .Values.enterprise.enabled .Values.tokengenJob.enable (not .Values.federation_frontend.disableOtherComponents) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "mimir.resourceName" (dict "ctx" . "component" "tokengen") }}
  labels:
    {{- include "mimir.labels" (dict "ctx" . "component" "tokengen") | nindent 4 }}
  annotations:
    {{- if .Values.tokengenJob.annotations }}
    {{- toYaml .Values.tokengenJob.annotations | nindent 4 }}
    {{- end }}
    "helm.sh/hook": post-install
  namespace: {{ .Release.Namespace | quote }}
spec:
  backoffLimit: 6
  completions: 1
  parallelism: 1
  selector:
  template:
    metadata:
      labels:
        {{- include "mimir.podLabels" (dict "ctx" . "component" "tokengen") | nindent 8 }}
      annotations:
        {{- include "mimir.podAnnotations" (dict "ctx" . "component" "tokengen") | nindent 8 }}
      namespace: {{ .Release.Namespace | quote }}
    spec:
      serviceAccountName: {{ include "mimir.serviceAccountName" . }}
      {{- if .Values.tokengenJob.priorityClassName }}
      priorityClassName: {{ .Values.tokengenJob.priorityClassName }}
      {{- end }}
      securityContext:
        {{- include "mimir.lib.podSecurityContext" (dict "ctx" . "component" "tokengen") | nindent 8 }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      initContainers:
        - name: tokengen
          image: {{ include "mimir.imageReference" (dict "ctx" . "component" "tokengen") }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - "-target=tokengen"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
            - "-tokengen.token-file=/shared/admin-token"
            - "-log.level=debug"
            {{- range $key, $value := .Values.tokengenJob.extraArgs }}
            - -{{ $key }}={{ $value }}
            {{- end }}
          volumeMounts:
            {{- if .Values.tokengenJob.extraVolumeMounts }}
              {{ toYaml .Values.tokengenJob.extraVolumeMounts | nindent 12 }}
            {{- end }}
            {{- if .Values.global.extraVolumeMounts }}
              {{ toYaml .Values.global.extraVolumeMounts | nindent 12 }}
            {{- end }}
            - name: config
              mountPath: /etc/mimir
            - name: license
              mountPath: /license
            - name: shared
              mountPath: /shared
      containers:
        - name: create-secret
          image: {{ include "mimir.kubectlImage" . }}
          imagePullPolicy: {{ .Values.kubectlImage.pullPolicy | default "IfNotPresent" }}
          command:
            - /bin/bash
            - -ec
            - |
              kubectl create secret generic {{ include "mimir.resourceName" (dict "ctx" . "component" "token") }} \
                --from-file=token=/shared/admin-token \
                --dry-run=client -o yaml | kubectl apply -f -
          volumeMounts:
            - name: shared
              mountPath: /shared
      restartPolicy: OnFailure
      volumes:
        - name: config
          {{- include "mimir.configVolume" . | nindent 10 }}
        {{- if .Values.tokengenJob.extraVolumes }}
        {{ toYaml .Values.tokengenJob.extraVolumes | nindent 8 }}
        {{- end }}
        {{- if .Values.global.extraVolumes }}
        {{ toYaml .Values.global.extraVolumes | nindent 8 }}
        {{- end }}
        - name: license
          secret:
            secretName: {{ tpl .Values.license.secretName . }}
        - name: storage
          emptyDir: {}
        - name: active-queries
          emptyDir: {}
        - name: shared
          emptyDir: {}
{{- end -}}
