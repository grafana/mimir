{{- if .Values.ruler.remoteEvaluationDedicatedQueryPath }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mimir.resourceName" (dict "ctx" . "component" "ruler-query-scheduler") }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "mimir.labels" (dict "ctx" . "component" "ruler-query-scheduler") | nindent 4 }}
  annotations:
    {{- toYaml .Values.ruler_query_scheduler.annotations | nindent 4 }}
spec:
  replicas: {{ .Values.ruler_query_scheduler.replicas }}
  selector:
    matchLabels:
      {{- include "mimir.selectorLabels" (dict "ctx" . "component" "ruler-query-scheduler") | nindent 6 }}
  strategy:
    {{- toYaml .Values.ruler_query_scheduler.strategy | nindent 4 }}
  template:
    metadata:
      labels:
        {{- include "mimir.podLabels" (dict "ctx" . "component" "ruler-query-scheduler") | nindent 8 }}
      annotations:
        {{- include "mimir.podAnnotations" (dict "ctx" . "component" "ruler-query-scheduler") | nindent 8 }}
    spec:
      serviceAccountName: {{ template "mimir.serviceAccountName" . }}
      {{- if .Values.ruler_query_scheduler.priorityClassName }}
      priorityClassName: {{ .Values.ruler_query_scheduler.priorityClassName }}
      {{- end }}
      securityContext:
        {{- include "mimir.lib.podSecurityContext" (dict "ctx" . "component" "ruler-query-scheduler") | nindent 8 }}
      {{- with .Values.ruler_query_scheduler.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      containers:
        - name: ruler-query-scheduler
          image: "{{ include "mimir.imageReference" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - "-target=query-scheduler"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          {{- range $key, $value := .Values.ruler_query_scheduler.extraArgs }}
            - "-{{ $key }}={{ $value }}"
          {{- end }}
          volumeMounts:
            {{- if .Values.ruler_query_scheduler.extraVolumeMounts }}
              {{ toYaml .Values.ruler_query_scheduler.extraVolumeMounts | nindent 12}}
            {{- end }}
            {{- if .Values.global.extraVolumeMounts }}
              {{ toYaml .Values.global.extraVolumeMounts | nindent 12}}
            {{- end }}
            - name: runtime-config
              mountPath: /var/{{ include "mimir.name" . }}
            {{- if .Values.enterprise.enabled }}
            - name: license
              mountPath: /license
            {{- end }}
            - name: config
              mountPath: /etc/mimir
            - name: storage
              mountPath: /data
              {{- if .Values.ruler_query_scheduler.persistence.subPath }}
              subPath: {{ .Values.ruler_query_scheduler.persistence.subPath }}
              {{- end }}
            - name: active-queries
              mountPath: /active-query-tracker
          ports:
            - name: http-metrics
              containerPort: {{ include "mimir.serverHttpListenPort" . }}
              protocol: TCP
            - name: grpc
              containerPort: {{ include "mimir.serverGrpcListenPort" . }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.ruler_query_scheduler.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.ruler_query_scheduler.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.ruler_query_scheduler.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.ruler_query_scheduler.containerSecurityContext | nindent 12 }}
          env:
            {{- with .Values.global.extraEnv }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- with .Values.ruler_query_scheduler.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- $jaeger_queue_size := dig "jaegerReporterMaxQueueSize" nil .Values.query_scheduler }}
            {{- if $jaeger_queue_size }}
            - name: "JAEGER_REPORTER_MAX_QUEUE_SIZE"
              value: {{$jaeger_queue_size | toString | toYaml }}
            {{- end }}
          envFrom:
            {{- with .Values.global.extraEnvFrom }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- with .Values.ruler_query_scheduler.extraEnvFrom }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
{{- if .Values.ruler_query_scheduler.extraContainers }}
{{ toYaml .Values.ruler_query_scheduler.extraContainers | indent 8}}
{{- end }}
      {{- with .Values.ruler_query_scheduler.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.ruler_query_scheduler.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- include "mimir.lib.topologySpreadConstraints" (dict "ctx" . "component" "ruler-query-scheduler") | nindent 6 }}
      {{- with .Values.ruler_query_scheduler.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.ruler_query_scheduler.terminationGracePeriodSeconds }}
      volumes:
        - name: config
          {{- include "mimir.configVolume" . | nindent 10 }}
        {{- if .Values.enterprise.enabled }}
        - name: license
          secret:
            secretName: {{ tpl .Values.license.secretName . }}
        {{- end }}
        - name: runtime-config
          configMap:
            name: {{ template "mimir.fullname" . }}-runtime
        {{- if .Values.ruler_query_scheduler.extraVolumes }}
        {{ toYaml .Values.ruler_query_scheduler.extraVolumes | nindent 8}}
        {{- end }}
        {{- if .Values.global.extraVolumes }}
        {{ toYaml .Values.global.extraVolumes | nindent 8}}
        {{- end }}
        - name: storage
          emptyDir: {}
        - name: active-queries
          emptyDir: {}
{{- end }}
