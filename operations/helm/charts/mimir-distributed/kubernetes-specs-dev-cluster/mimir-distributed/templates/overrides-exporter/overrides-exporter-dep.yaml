---
# Source: mimir-distributed/templates/overrides-exporter/overrides-exporter-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    iamRole: "arn:aws:iam::707343435239:role/TsdbStorageBucketFullAccessRole-dev-us-west-2"
  labels:
    helm.sh/chart: mimir-distributed-4.3.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: databricks-gem
    app.kubernetes.io/component: overrides-exporter
    app.kubernetes.io/version: "2.7.2"
    app.kubernetes.io/managed-by: Helm
  name: databricks-gem-mimir-overrides-exporter
  namespace: "mimir"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: databricks-gem
      app.kubernetes.io/component: overrides-exporter
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-4.3.1
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: databricks-gem
        app.kubernetes.io/version: "2.7.2"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: overrides-exporter
      annotations:
        checksum/config: c156db92d37401a23ee5313c3fd134023403d38f951db1b8b7bb62806cfe9ed4
        prometheus_io_port: "8080"
        prometheus_io_scrape: "true"
        iamRole: "arn:aws:iam::707343435239:role/TsdbStorageBucketFullAccessRole-dev-us-west-2"
      namespace: "mimir"
    spec:
      serviceAccountName: databricks-gem-mimir
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        []
      containers:
        - name: overrides-exporter
          image: "registry.dev.databricks.com/grafana-enterprise-metrics:2.7.1@sha256:b08a76f912f7cbdebe79cde40c6a3a9a4244efe37c51d3791005aae88a81e327"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=overrides-exporter"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: license
              mountPath: /license
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
              subPath: 
            - name: active-queries
              mountPath: /active-query-tracker
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            limits:
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          env:
          envFrom:
      nodeSelector:
        {}
      affinity:
        {}
      topologySpreadConstraints:
        
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          configMap:
            name: databricks-gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: license
          secret:
            secretName: databricks-gem-mimir-license
        - name: runtime-config
          configMap:
            name: databricks-gem-mimir-runtime
        - name: storage
          emptyDir: {}
        - name: active-queries
          emptyDir: {}
