multitenancy_enabled: false

common:
  storage:
    backend: s3
    s3:
      endpoint:          minio:9000
      access_key_id:     mimir
      secret_access_key: supersecret
      insecure:          true

ingest_storage:
  enabled:       true
  kafka:
    address: kafka_1:9092
    topic:   mimir-ingest
    last_produced_offset_poll_interval: 500ms
    fetch_concurrency_max: 15

ingester:
  track_ingester_owned_series: true
  active_series_metrics_update_period: 10s
  active_series_metrics_idle_timeout:  1m

  partition_ring:
    min_partition_owners_count:       1
    min_partition_owners_duration:    10s
    delete_inactive_partition_after:  1m

block_builder:
  scheduler_config:
    address: mimir-block-builder-scheduler-1:9095
    update_interval: 5s
    max_update_age: 30m

blocks_storage:
  s3:
    bucket_name:       mimir-blocks
  tsdb:
    dir: /data/ingester
    head_postings_for_matchers_cache_force: true
    block_postings_for_matchers_cache_force: true

  bucket_store:
    index_cache:
      backend: memcached
      memcached:
        addresses: dns+memcached:11211

    chunks_cache:
      backend: memcached
      memcached:
        addresses: dns+memcached:11211

    metadata_cache:
      backend: memcached
      memcached:
        addresses: dns+memcached:11211


memberlist:
  # Use write replicas as seed nodes.
  join_members:
    - mimir-write-zone-a-1
    - mimir-write-zone-b-1
    - mimir-write-zone-a-2
    - mimir-write-zone-b-2
    - mimir-write-zone-a-3
    - mimir-write-zone-b-3

ruler:
  rule_path: /data/ruler
  # Each ruler is configured to route alerts to the Alertmanager running within the same component.
  alertmanager_url: http://localhost:8080/alertmanager
  # Force the ruler to restore the state of any alert with a "for" period longer than 1s.
  for_grace_period: 1s
  # Evaluate rules via query-frontend (remote rule evaluation).
  query_frontend:
    address: dns:///mimir-read-1:9095

ruler_storage:
  s3:
    bucket_name:       mimir-ruler
  cache:
    backend: memcached
    memcached:
      addresses: dns+memcached:11211

query_scheduler:
  service_discovery_mode: "ring"

alertmanager:
  data_dir: /data/alertmanager
  fallback_config_file: ./config/alertmanager-fallback-config.yaml
  external_url: http://localhost:8006/alertmanager

alertmanager_storage:
  s3:
    bucket_name: mimir-alertmanager

overrides_exporter:
  enabled_metrics: ingestion_rate,ingestion_burst_size,ingestion_artificial_delay,max_global_series_per_user,max_global_series_per_metric,max_global_exemplars_per_user,max_fetched_chunks_per_query,max_fetched_series_per_query,max_fetched_chunk_bytes_per_query,ruler_max_rules_per_rule_group,ruler_max_rule_groups_per_tenant

  ring:
    enabled: true
    wait_stability_min_duration: 30s

limits:
  native_histograms_ingestion_enabled: true
  ingestion_rate: 100000

runtime_config:
  file: ./config/runtime.yaml

server:
  log_level: debug
