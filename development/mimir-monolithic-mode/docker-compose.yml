version: '3.4'
services:

  consul:
    image: consul:1.15  # latest tag not supported
    command: [ "agent", "-dev" ,"-client=0.0.0.0", "-log-level=info" ]
    ports:
      - 8500:8500

  minio:
    image: minio/minio
    command: [ "server", "--console-address", ":9001", "/data" ]
    environment:
      - MINIO_ROOT_USER=mimir
      - MINIO_ROOT_PASSWORD=supersecret
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - .data-minio:/data:delegated

  prometheus:
    profiles:
      - prometheus
    image: prom/prometheus:v2.50.1
    command: ["--config.file=/etc/prometheus/prometheus.yaml", "--enable-feature=native-histograms"]
    volumes:
      - ./config:/etc/prometheus
    ports:
      - 9090:9090

  grafana:
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    image: grafana/grafana:10.3.3
    ports:
      - 3000:3000
    volumes:
      - ./config/datasource-mimir.yaml:/etc/grafana/provisioning/datasources/mimir.yaml

  # Scrape the metrics also with the Grafana agent (useful to test metadata ingestion
  # until metadata remote write is supported by Prometheus).
  grafana-agent:
    profiles:
      - grafana-agent-static
    image: grafana/agent:v0.40.3
    command: ["-config.file=/etc/agent-config/grafana-agent.yaml", "-metrics.wal-directory=/tmp", "-server.http.address=127.0.0.1:9091"]
    volumes:
      - ./config:/etc/agent-config
    ports:
      - 9091:9091

  grafana-agent-flow:
    profiles:
      - grafana-agent-flow
    image: grafana/agent:v0.40.3
    environment:
      - AGENT_MODE=flow
    command: ["run", "--server.http.listen-addr=0.0.0.0:9092", "/etc/agent/config.river"]
    volumes:
      - ./config/grafana-agent.river:/etc/agent/config.river
    ports:
      - 9092:9092

  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - 16686:16686
      - "14268"

  mimir-1:
    build:
      context:    .
      dockerfile: dev.dockerfile
    image: mimir
    command: ["sh", "-c", "sleep 3 && exec ./mimir -config.file=./config/mimir.yaml -target=all -server.http-listen-port=8001 -server.grpc-listen-port=9001"]
    depends_on:
      - consul
      - minio
    environment:
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - JAEGER_TAGS=app=mimir-1
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
      - JAEGER_REPORTER_MAX_QUEUE_SIZE=1000
    ports:
      - 8001:8001
    volumes:
      - ./config:/mimir/config
      - .data-mimir-1:/data:delegated

  mimir-2:
    build:
      context:    .
      dockerfile: dev.dockerfile
    image: mimir
    command: ["sh", "-c", "sleep 3 && exec ./mimir -config.file=./config/mimir.yaml -target=all -server.http-listen-port=8002 -server.grpc-listen-port=9002"]
    depends_on:
      - consul
      - minio
    environment:
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - JAEGER_TAGS=app=mimir-2
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
      - JAEGER_REPORTER_MAX_QUEUE_SIZE=1000
    ports:
      - 8002:8002
    volumes:
      - ./config:/mimir/config
      - .data-mimir-2:/data:delegated

  otel-remote-write:
    image: otel/opentelemetry-collector-contrib:0.95.0
    profiles:
      - otel-collector-remote-write
    volumes:
      - ./config/otel-collector-remote-write-config.yaml:/etc/otelcol-contrib/config.yaml
    ports: # From https://opentelemetry.io/docs/collector/getting-started/
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension

  otel-otlp:
    image: otel/opentelemetry-collector-contrib:0.95.0
    profiles:
      - otel-collector-otlp-push
    volumes:
      - ./config/otel-collector-otlp-push-config.yaml:/etc/otelcol-contrib/config.yaml
    ports: # From https://opentelemetry.io/docs/collector/getting-started/
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
