{
  "kind": "block",
  "name": "",
  "required": false,
  "desc": "",
  "blockEntries": [
    {
      "kind": "field",
      "name": "target",
      "required": false,
      "desc": "Comma-separated list of components to include in the instantiated process. The default value 'all' includes all components that are required to form a functional Grafana Mimir instance in single-binary mode. Use the '-modules' command line flag to get a list of available components, and to see which components are included with 'all'.",
      "fieldValue": null,
      "fieldDefaultValue": "all",
      "fieldFlag": "target",
      "fieldType": "string"
    },
    {
      "kind": "field",
      "name": "multitenancy_enabled",
      "required": false,
      "desc": "When set to true, incoming HTTP requests must specify tenant ID in HTTP X-Scope-OrgId header. When set to false, tenant ID from -auth.no-auth-tenant is used instead.",
      "fieldValue": null,
      "fieldDefaultValue": true,
      "fieldFlag": "auth.multitenancy-enabled",
      "fieldType": "boolean"
    },
    {
      "kind": "field",
      "name": "no_auth_tenant",
      "required": false,
      "desc": "Tenant ID to use when multitenancy is disabled.",
      "fieldValue": null,
      "fieldDefaultValue": "anonymous",
      "fieldFlag": "auth.no-auth-tenant",
      "fieldType": "string",
      "fieldCategory": "advanced"
    },
    {
      "kind": "field",
      "name": "shutdown_delay",
      "required": false,
      "desc": "How long to wait between SIGTERM and shutdown. After receiving SIGTERM, Mimir will report not-ready status via /ready endpoint.",
      "fieldValue": null,
      "fieldDefaultValue": 0,
      "fieldFlag": "shutdown-delay",
      "fieldType": "duration",
      "fieldCategory": "experimental"
    },
    {
      "kind": "block",
      "name": "api",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "skip_label_name_validation_header_enabled",
          "required": false,
          "desc": "Allows to skip label name validation via X-Mimir-SkipLabelNameValidation header on the http write path. Use with caution as it breaks PromQL. Allowing this for external clients allows any client to send invalid label names. After enabling it, requests with a specific HTTP header set to true will not have label names validated.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "api.skip-label-name-validation-header-enabled",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "alertmanager_http_prefix",
          "required": false,
          "desc": "HTTP URL path under which the Alertmanager ui and api will be served.",
          "fieldValue": null,
          "fieldDefaultValue": "/alertmanager",
          "fieldFlag": "http.alertmanager-http-prefix",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "prometheus_http_prefix",
          "required": false,
          "desc": "HTTP URL path under which the Prometheus api will be served.",
          "fieldValue": null,
          "fieldDefaultValue": "/prometheus",
          "fieldFlag": "http.prometheus-http-prefix",
          "fieldType": "string",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "server",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "http_listen_network",
          "required": false,
          "desc": "HTTP server listen network, default tcp",
          "fieldValue": null,
          "fieldDefaultValue": "tcp",
          "fieldFlag": "server.http-listen-network",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "http_listen_address",
          "required": false,
          "desc": "HTTP server listen address.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "server.http-listen-address",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "http_listen_port",
          "required": false,
          "desc": "HTTP server listen port.",
          "fieldValue": null,
          "fieldDefaultValue": 8080,
          "fieldFlag": "server.http-listen-port",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "http_listen_conn_limit",
          "required": false,
          "desc": "Maximum number of simultaneous http connections, \u003c=0 to disable",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "server.http-conn-limit",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "grpc_listen_network",
          "required": false,
          "desc": "gRPC server listen network",
          "fieldValue": null,
          "fieldDefaultValue": "tcp",
          "fieldFlag": "server.grpc-listen-network",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "grpc_listen_address",
          "required": false,
          "desc": "gRPC server listen address.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "server.grpc-listen-address",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "grpc_listen_port",
          "required": false,
          "desc": "gRPC server listen port.",
          "fieldValue": null,
          "fieldDefaultValue": 9095,
          "fieldFlag": "server.grpc-listen-port",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "grpc_listen_conn_limit",
          "required": false,
          "desc": "Maximum number of simultaneous grpc connections, \u003c=0 to disable",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "server.grpc-conn-limit",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "tls_cipher_suites",
          "required": false,
          "desc": "Comma-separated list of cipher suites to use. If blank, the default Go cipher suites is used.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "server.tls-cipher-suites",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "tls_min_version",
          "required": false,
          "desc": "Minimum TLS version to use. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. If blank, the Go TLS minimum version is used.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "server.tls-min-version",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "http_tls_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "cert_file",
              "required": false,
              "desc": "HTTP server cert path.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.http-tls-cert-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "key_file",
              "required": false,
              "desc": "HTTP server key path.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.http-tls-key-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "client_auth_type",
              "required": false,
              "desc": "HTTP TLS Client Auth type.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.http-tls-client-auth",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "client_ca_file",
              "required": false,
              "desc": "HTTP TLS Client CA path.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.http-tls-ca-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "grpc_tls_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "cert_file",
              "required": false,
              "desc": "GRPC TLS server cert path.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.grpc-tls-cert-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "key_file",
              "required": false,
              "desc": "GRPC TLS server key path.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.grpc-tls-key-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "client_auth_type",
              "required": false,
              "desc": "GRPC TLS Client Auth type.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.grpc-tls-client-auth",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "client_ca_file",
              "required": false,
              "desc": "GRPC TLS Client CA path.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.grpc-tls-ca-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "register_instrumentation",
          "required": false,
          "desc": "Register the intrumentation handlers (/metrics etc).",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "server.register-instrumentation",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "graceful_shutdown_timeout",
          "required": false,
          "desc": "Timeout for graceful shutdowns",
          "fieldValue": null,
          "fieldDefaultValue": 30000000000,
          "fieldFlag": "server.graceful-shutdown-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "http_server_read_timeout",
          "required": false,
          "desc": "Read timeout for HTTP server",
          "fieldValue": null,
          "fieldDefaultValue": 30000000000,
          "fieldFlag": "server.http-read-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "http_server_write_timeout",
          "required": false,
          "desc": "Write timeout for HTTP server",
          "fieldValue": null,
          "fieldDefaultValue": 120000000000,
          "fieldFlag": "server.http-write-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "http_server_idle_timeout",
          "required": false,
          "desc": "Idle timeout for HTTP server",
          "fieldValue": null,
          "fieldDefaultValue": 120000000000,
          "fieldFlag": "server.http-idle-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "grpc_server_max_recv_msg_size",
          "required": false,
          "desc": "Limit on the size of a gRPC message this server can receive (bytes).",
          "fieldValue": null,
          "fieldDefaultValue": 104857600,
          "fieldFlag": "server.grpc-max-recv-msg-size-bytes",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "grpc_server_max_send_msg_size",
          "required": false,
          "desc": "Limit on the size of a gRPC message this server can send (bytes).",
          "fieldValue": null,
          "fieldDefaultValue": 104857600,
          "fieldFlag": "server.grpc-max-send-msg-size-bytes",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "grpc_server_max_concurrent_streams",
          "required": false,
          "desc": "Limit on the number of concurrent streams for gRPC calls (0 = unlimited)",
          "fieldValue": null,
          "fieldDefaultValue": 100,
          "fieldFlag": "server.grpc-max-concurrent-streams",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "grpc_server_max_connection_idle",
          "required": false,
          "desc": "The duration after which an idle connection should be closed. Default: infinity",
          "fieldValue": null,
          "fieldDefaultValue": 9223372036854775807,
          "fieldFlag": "server.grpc.keepalive.max-connection-idle",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "grpc_server_max_connection_age",
          "required": false,
          "desc": "The duration for the maximum amount of time a connection may exist before it will be closed. Default: infinity",
          "fieldValue": null,
          "fieldDefaultValue": 9223372036854775807,
          "fieldFlag": "server.grpc.keepalive.max-connection-age",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "grpc_server_max_connection_age_grace",
          "required": false,
          "desc": "An additive period after max-connection-age after which the connection will be forcibly closed. Default: infinity",
          "fieldValue": null,
          "fieldDefaultValue": 9223372036854775807,
          "fieldFlag": "server.grpc.keepalive.max-connection-age-grace",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "grpc_server_keepalive_time",
          "required": false,
          "desc": "Duration after which a keepalive probe is sent in case of no activity over the connection., Default: 2h",
          "fieldValue": null,
          "fieldDefaultValue": 7200000000000,
          "fieldFlag": "server.grpc.keepalive.time",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "grpc_server_keepalive_timeout",
          "required": false,
          "desc": "After having pinged for keepalive check, the duration after which an idle connection should be closed, Default: 20s",
          "fieldValue": null,
          "fieldDefaultValue": 20000000000,
          "fieldFlag": "server.grpc.keepalive.timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "grpc_server_min_time_between_pings",
          "required": false,
          "desc": "Minimum amount of time a client should wait before sending a keepalive ping. If client sends keepalive ping more often, server will send GOAWAY and close the connection.",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "server.grpc.keepalive.min-time-between-pings",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "grpc_server_ping_without_stream_allowed",
          "required": false,
          "desc": "If true, server allows keepalive pings even when there are no active streams(RPCs). If false, and client sends ping when there are no active streams, server will send GOAWAY and close the connection.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "server.grpc.keepalive.ping-without-stream-allowed",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "log_format",
          "required": false,
          "desc": "Output log messages in the given format. Valid formats: [logfmt, json]",
          "fieldValue": null,
          "fieldDefaultValue": "logfmt",
          "fieldFlag": "log.format",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "log_level",
          "required": false,
          "desc": "Only log messages with the given severity or above. Valid levels: [debug, info, warn, error]",
          "fieldValue": null,
          "fieldDefaultValue": "info",
          "fieldFlag": "log.level",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "log_source_ips_enabled",
          "required": false,
          "desc": "Optionally log the source IPs.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "server.log-source-ips-enabled",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "log_source_ips_header",
          "required": false,
          "desc": "Header field storing the source IPs. Only used if server.log-source-ips-enabled is true. If not set the default Forwarded, X-Real-IP and X-Forwarded-For headers are used",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "server.log-source-ips-header",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "log_source_ips_regex",
          "required": false,
          "desc": "Regex for matching the source IPs. Only used if server.log-source-ips-enabled is true. If not set the default Forwarded, X-Real-IP and X-Forwarded-For headers are used",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "server.log-source-ips-regex",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "log_request_at_info_level_enabled",
          "required": false,
          "desc": "Optionally log requests at info level instead of debug level.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "server.log-request-at-info-level-enabled",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "http_path_prefix",
          "required": false,
          "desc": "Base path to serve all API routes from (e.g. /v1/)",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "server.path-prefix",
          "fieldType": "string",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "distributor",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "pool",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "client_cleanup_period",
              "required": false,
              "desc": "How frequently to clean up clients for ingesters that have gone away.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "distributor.client-cleanup-period",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "health_check_ingesters",
              "required": false,
              "desc": "Run a health check on each ingester client during periodic cleanup.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "distributor.health-check-ingesters",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "ha_tracker",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enable_ha_tracker",
              "required": false,
              "desc": "Enable the distributors HA tracker so that it can accept samples from Prometheus HA replicas gracefully (requires labels).",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "distributor.ha-tracker.enable",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "ha_tracker_update_timeout",
              "required": false,
              "desc": "Update the timestamp in the KV store for a given cluster/replica only after this amount of time has passed since the current stored timestamp.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "distributor.ha-tracker.update-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "ha_tracker_update_timeout_jitter_max",
              "required": false,
              "desc": "Maximum jitter applied to the update timeout, in order to spread the HA heartbeats over time.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "distributor.ha-tracker.update-timeout-jitter-max",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "ha_tracker_failover_timeout",
              "required": false,
              "desc": "If we don't receive any samples from the accepted replica for a cluster in this amount of time we will failover to the next replica we receive a sample from. This value must be greater than the update timeout",
              "fieldValue": null,
              "fieldDefaultValue": 30000000000,
              "fieldFlag": "distributor.ha-tracker.failover-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "consul",
                  "fieldFlag": "distributor.ha-tracker.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "ha-tracker/",
                  "fieldFlag": "distributor.ha-tracker.prefix",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "distributor.ha-tracker.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.consul.acl-token",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "distributor.ha-tracker.consul.client-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ha-tracker.consul.consistent-reads",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "distributor.ha-tracker.consul.watch-rate-limit",
                      "fieldType": "float",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "distributor.ha-tracker.consul.watch-burst-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "cas_retry_delay",
                      "required": false,
                      "desc": "Maximum duration to wait before retrying a Compare And Swap (CAS) operation.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1000000000,
                      "fieldFlag": "distributor.ha-tracker.consul.cas-retry-delay",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "distributor.ha-tracker.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "distributor.ha-tracker.etcd.dial-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "distributor.ha-tracker.etcd.max-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-cert-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-key-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-ca-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-server-name",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cipher_suites",
                      "required": false,
                      "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-cipher-suites",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_min_version",
                      "required": false,
                      "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-min-version",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.multi.primary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.multi.secondary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ha-tracker.multi.mirror-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "distributor.ha-tracker.multi.mirror-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "max_recv_msg_size",
          "required": false,
          "desc": "Max message size in bytes that the distributors will accept for incoming push requests to the remote write API. If exceeded, the request will be rejected.",
          "fieldValue": null,
          "fieldDefaultValue": 104857600,
          "fieldFlag": "distributor.max-recv-msg-size",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "remote_timeout",
          "required": false,
          "desc": "Timeout for downstream ingesters.",
          "fieldValue": null,
          "fieldDefaultValue": 2000000000,
          "fieldFlag": "distributor.remote-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "ring",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "memberlist",
                  "fieldFlag": "distributor.ring.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "collectors/",
                  "fieldFlag": "distributor.ring.prefix",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "distributor.ring.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.consul.acl-token",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "distributor.ring.consul.client-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ring.consul.consistent-reads",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "distributor.ring.consul.watch-rate-limit",
                      "fieldType": "float",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "distributor.ring.consul.watch-burst-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "cas_retry_delay",
                      "required": false,
                      "desc": "Maximum duration to wait before retrying a Compare And Swap (CAS) operation.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1000000000,
                      "fieldFlag": "distributor.ring.consul.cas-retry-delay",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "distributor.ring.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "distributor.ring.etcd.dial-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "distributor.ring.etcd.max-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ring.etcd.tls-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.tls-cert-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.tls-key-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.tls-ca-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.tls-server-name",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ring.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cipher_suites",
                      "required": false,
                      "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.tls-cipher-suites",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_min_version",
                      "required": false,
                      "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.tls-min-version",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.multi.primary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.multi.secondary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ring.multi.mirror-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "distributor.ring.multi.mirror-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to the ring. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "distributor.ring.heartbeat-period",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "heartbeat_timeout",
              "required": false,
              "desc": "The heartbeat timeout after which distributors are considered unhealthy within the ring. 0 = never (timeout disabled).",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "distributor.ring.heartbeat-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_id",
              "required": false,
              "desc": "Instance ID to register in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "\u003chostname\u003e",
              "fieldFlag": "distributor.ring.instance-id",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_interface_names",
              "required": false,
              "desc": "List of network interface names to look up when finding the instance IP address.",
              "fieldValue": null,
              "fieldDefaultValue": [],
              "fieldFlag": "distributor.ring.instance-interface-names",
              "fieldType": "list of strings"
            },
            {
              "kind": "field",
              "name": "instance_port",
              "required": false,
              "desc": "Port to advertise in the ring (defaults to -server.grpc-listen-port).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "distributor.ring.instance-port",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_addr",
              "required": false,
              "desc": "IP address to advertise in the ring. Default is auto-detected.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "distributor.ring.instance-addr",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "instance_limits",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_ingestion_rate",
              "required": false,
              "desc": "Max ingestion rate (samples/sec) that this distributor will accept. This limit is per-distributor, not per-tenant. Additional push requests will be rejected. Current ingestion rate is computed as exponentially weighted moving average, updated every second. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "distributor.instance-limits.max-ingestion-rate",
              "fieldType": "float",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_inflight_push_requests",
              "required": false,
              "desc": "Max inflight push requests that this distributor can handle. This limit is per-distributor, not per-tenant. Additional requests will be rejected. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 2000,
              "fieldFlag": "distributor.instance-limits.max-inflight-push-requests",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_inflight_push_requests_bytes",
              "required": false,
              "desc": "The sum of the request sizes in bytes of inflight push requests that this distributor can handle. This limit is per-distributor, not per-tenant. Additional requests will be rejected. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "distributor.instance-limits.max-inflight-push-requests-bytes",
              "fieldType": "int",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "forwarding",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enabled",
              "required": false,
              "desc": "Enables the feature to forward certain metrics in remote_write requests, depending on defined rules.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "distributor.forwarding.enabled",
              "fieldType": "boolean",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "request_concurrency",
              "required": false,
              "desc": "Maximum concurrency at which forwarding requests get performed.",
              "fieldValue": null,
              "fieldDefaultValue": 10,
              "fieldFlag": "distributor.forwarding.request-concurrency",
              "fieldType": "int",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "request_timeout",
              "required": false,
              "desc": "Timeout for requests to ingestion endpoints to which we forward metrics.",
              "fieldValue": null,
              "fieldDefaultValue": 2000000000,
              "fieldFlag": "distributor.forwarding.request-timeout",
              "fieldType": "duration",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "propagate_errors",
              "required": false,
              "desc": "If disabled then forwarding requests are always considered to be successful, errors are ignored.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "distributor.forwarding.propagate-errors",
              "fieldType": "boolean",
              "fieldCategory": "experimental"
            },
            {
              "kind": "block",
              "name": "grpc_client",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "max_recv_msg_size",
                  "required": false,
                  "desc": "gRPC client max receive message size (bytes).",
                  "fieldValue": null,
                  "fieldDefaultValue": 104857600,
                  "fieldFlag": "distributor.forwarding.grpc-client.grpc-max-recv-msg-size",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_send_msg_size",
                  "required": false,
                  "desc": "gRPC client max send message size (bytes).",
                  "fieldValue": null,
                  "fieldDefaultValue": 104857600,
                  "fieldFlag": "distributor.forwarding.grpc-client.grpc-max-send-msg-size",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "grpc_compression",
                  "required": false,
                  "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "distributor.forwarding.grpc-client.grpc-compression",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "rate_limit",
                  "required": false,
                  "desc": "Rate limit for gRPC client; 0 means disabled.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "distributor.forwarding.grpc-client.grpc-client-rate-limit",
                  "fieldType": "float",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "rate_limit_burst",
                  "required": false,
                  "desc": "Rate limit burst for gRPC client.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "distributor.forwarding.grpc-client.grpc-client-rate-limit-burst",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "backoff_on_ratelimits",
                  "required": false,
                  "desc": "Enable backoff and retry when we hit ratelimits.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "distributor.forwarding.grpc-client.backoff-on-ratelimits",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "backoff_config",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "min_period",
                      "required": false,
                      "desc": "Minimum delay when backing off.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "distributor.forwarding.grpc-client.backoff-min-period",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_period",
                      "required": false,
                      "desc": "Maximum delay when backing off.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "distributor.forwarding.grpc-client.backoff-max-period",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "Number of times to backoff and retry before failing.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "distributor.forwarding.grpc-client.backoff-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "distributor.forwarding.grpc-client.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "distributor.forwarding.grpc-client.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "distributor.forwarding.grpc-client.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "distributor.forwarding.grpc-client.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "distributor.forwarding.grpc-client.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "distributor.forwarding.grpc-client.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "distributor.forwarding.grpc-client.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "distributor.forwarding.grpc-client.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "querier",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "iterators",
          "required": false,
          "desc": "Use iterators to execute query, as opposed to fully materialising the series in memory.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "querier.iterators",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "batch_iterators",
          "required": false,
          "desc": "Use batch iterators to execute query, as opposed to fully materialising the series in memory.  Takes precedent over the -querier.iterators flag.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "querier.batch-iterators",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "query_ingesters_within",
          "required": false,
          "desc": "Maximum lookback beyond which queries are not sent to ingester. 0 means all queries are sent to ingester.",
          "fieldValue": null,
          "fieldDefaultValue": 46800000000000,
          "fieldFlag": "querier.query-ingesters-within",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "query_store_after",
          "required": false,
          "desc": "The time after which a metric should be queried from storage and not just ingesters. 0 means all queries are sent to store. If this option is enabled, the time range of the query sent to the store-gateway will be manipulated to ensure the query end is not more recent than 'now - query-store-after'.",
          "fieldValue": null,
          "fieldDefaultValue": 43200000000000,
          "fieldFlag": "querier.query-store-after",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "max_query_into_future",
          "required": false,
          "desc": "Maximum duration into the future you can query. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 600000000000,
          "fieldFlag": "querier.max-query-into-future",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "store_gateway_client",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS for gRPC client connecting to store-gateway.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "querier.store-gateway-client.tls-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.store-gateway-client.tls-cert-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.store-gateway-client.tls-key-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.store-gateway-client.tls-ca-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.store-gateway-client.tls-server-name",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "querier.store-gateway-client.tls-insecure-skip-verify",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cipher_suites",
              "required": false,
              "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.store-gateway-client.tls-cipher-suites",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_min_version",
              "required": false,
              "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.store-gateway-client.tls-min-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "shuffle_sharding_ingesters_enabled",
          "required": false,
          "desc": "Fetch in-memory series from the minimum set of required ingesters, selecting only ingesters which may have received series since -querier.query-ingesters-within. If this setting is false or -querier.query-ingesters-within is '0', queriers always query all ingesters (ingesters shuffle sharding on read path is disabled).",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "querier.shuffle-sharding-ingesters-enabled",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "max_concurrent",
          "required": false,
          "desc": "The number of workers running in each querier process. This setting limits the maximum number of concurrent queries in each querier.",
          "fieldValue": null,
          "fieldDefaultValue": 20,
          "fieldFlag": "querier.max-concurrent",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "timeout",
          "required": false,
          "desc": "The timeout for a query. This config option should be set on query-frontend too when query sharding is enabled. This also applies to queries evaluated by the ruler (internally or remotely).",
          "fieldValue": null,
          "fieldDefaultValue": 120000000000,
          "fieldFlag": "querier.timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_samples",
          "required": false,
          "desc": "Maximum number of samples a single query can load into memory. This config option should be set on query-frontend too when query sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": 50000000,
          "fieldFlag": "querier.max-samples",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "default_evaluation_interval",
          "required": false,
          "desc": "The default evaluation interval or step size for subqueries. This config option should be set on query-frontend too when query sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "querier.default-evaluation-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "lookback_delta",
          "required": false,
          "desc": "Time since the last sample after which a time series is considered stale and ignored by expression evaluations. This config option should be set on query-frontend too when query sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": 300000000000,
          "fieldFlag": "querier.lookback-delta",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "ingester_client",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "grpc_client_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_recv_msg_size",
              "required": false,
              "desc": "gRPC client max receive message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "ingester.client.grpc-max-recv-msg-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_send_msg_size",
              "required": false,
              "desc": "gRPC client max send message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "ingester.client.grpc-max-send-msg-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "grpc_compression",
              "required": false,
              "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.client.grpc-compression",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit",
              "required": false,
              "desc": "Rate limit for gRPC client; 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.client.grpc-client-rate-limit",
              "fieldType": "float",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit_burst",
              "required": false,
              "desc": "Rate limit burst for gRPC client.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.client.grpc-client-rate-limit-burst",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "backoff_on_ratelimits",
              "required": false,
              "desc": "Enable backoff and retry when we hit ratelimits.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ingester.client.backoff-on-ratelimits",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "backoff_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "min_period",
                  "required": false,
                  "desc": "Minimum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "ingester.client.backoff-min-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_period",
                  "required": false,
                  "desc": "Maximum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "ingester.client.backoff-max-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of times to backoff and retry before failing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "ingester.client.backoff-retries",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ingester.client.tls-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.client.tls-cert-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.client.tls-key-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.client.tls-ca-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.client.tls-server-name",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ingester.client.tls-insecure-skip-verify",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cipher_suites",
              "required": false,
              "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.client.tls-cipher-suites",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_min_version",
              "required": false,
              "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.client.tls-min-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "ingester",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "ring",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "memberlist",
                  "fieldFlag": "ingester.ring.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "collectors/",
                  "fieldFlag": "ingester.ring.prefix",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "ingester.ring.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ingester.ring.consul.acl-token",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "ingester.ring.consul.client-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ingester.ring.consul.consistent-reads",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "ingester.ring.consul.watch-rate-limit",
                      "fieldType": "float",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "ingester.ring.consul.watch-burst-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "cas_retry_delay",
                      "required": false,
                      "desc": "Maximum duration to wait before retrying a Compare And Swap (CAS) operation.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1000000000,
                      "fieldFlag": "ingester.ring.consul.cas-retry-delay",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "ingester.ring.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "ingester.ring.etcd.dial-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "ingester.ring.etcd.max-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ingester.ring.etcd.tls-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ingester.ring.etcd.tls-cert-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ingester.ring.etcd.tls-key-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ingester.ring.etcd.tls-ca-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ingester.ring.etcd.tls-server-name",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ingester.ring.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cipher_suites",
                      "required": false,
                      "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ingester.ring.etcd.tls-cipher-suites",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_min_version",
                      "required": false,
                      "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ingester.ring.etcd.tls-min-version",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ingester.ring.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ingester.ring.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ingester.ring.multi.primary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ingester.ring.multi.secondary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ingester.ring.multi.mirror-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "ingester.ring.multi.mirror-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to the ring. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "ingester.ring.heartbeat-period",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "heartbeat_timeout",
              "required": false,
              "desc": "The heartbeat timeout after which ingesters are skipped for reads/writes. 0 = never (timeout disabled). This option needs be set on ingesters, distributors, queriers and rulers when running in microservices mode.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "ingester.ring.heartbeat-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "replication_factor",
              "required": false,
              "desc": "Number of ingesters that each time series is replicated to. This option needs be set on ingesters, distributors, queriers and rulers when running in microservices mode.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "ingester.ring.replication-factor",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "zone_awareness_enabled",
              "required": false,
              "desc": "True to enable the zone-awareness and replicate ingested samples across different availability zones. This option needs be set on ingesters, distributors, queriers and rulers when running in microservices mode.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ingester.ring.zone-awareness-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "excluded_zones",
              "required": false,
              "desc": "Comma-separated list of zones to exclude from the ring. Instances in excluded zones will be filtered out from the ring. This option needs be set on ingesters, distributors, queriers and rulers when running in microservices mode.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.ring.excluded-zones",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tokens_file_path",
              "required": false,
              "desc": "File path where tokens are stored. If empty, tokens are not stored at shutdown and restored at startup.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.ring.tokens-file-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "num_tokens",
              "required": false,
              "desc": "Number of tokens for each ingester.",
              "fieldValue": null,
              "fieldDefaultValue": 128,
              "fieldFlag": "ingester.ring.num-tokens",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_id",
              "required": false,
              "desc": "Instance ID to register in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "\u003chostname\u003e",
              "fieldFlag": "ingester.ring.instance-id",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_interface_names",
              "required": false,
              "desc": "List of network interface names to look up when finding the instance IP address.",
              "fieldValue": null,
              "fieldDefaultValue": [],
              "fieldFlag": "ingester.ring.instance-interface-names",
              "fieldType": "list of strings",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_port",
              "required": false,
              "desc": "Port to advertise in the ring (defaults to -server.grpc-listen-port).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.ring.instance-port",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_addr",
              "required": false,
              "desc": "IP address to advertise in the ring. Default is auto-detected.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.ring.instance-addr",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_availability_zone",
              "required": false,
              "desc": "The availability zone where this instance is running.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.ring.instance-availability-zone",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "unregister_on_shutdown",
              "required": false,
              "desc": "Unregister from the ring upon clean shutdown. It can be useful to disable for rolling restarts with consistent naming.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "ingester.ring.unregister-on-shutdown",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "observe_period",
              "required": false,
              "desc": "Observe tokens after generating to resolve collisions. Useful when using gossiping ring.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.ring.observe-period",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "min_ready_duration",
              "required": false,
              "desc": "Minimum duration to wait after the internal readiness checks have passed but before succeeding the readiness endpoint. This is used to slowdown deployment controllers (eg. Kubernetes) after an instance is ready and before they proceed with a rolling update, to give the rest of the cluster instances enough time to receive ring updates.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "ingester.ring.min-ready-duration",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "final_sleep",
              "required": false,
              "desc": "Duration to sleep for before exiting, to ensure metrics are scraped.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.ring.final-sleep",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "readiness_check_ring_health",
              "required": false,
              "desc": "When enabled the readiness probe succeeds only after all instances are ACTIVE and healthy in the ring, otherwise only the instance itself is checked. This option should be disabled if in your cluster multiple instances can be rolled out simultaneously, otherwise rolling updates may be slowed down.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ingester.ring.readiness-check-ring-health",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "metadata_retain_period",
          "required": false,
          "desc": "Period at which metadata we have not seen will remain in memory before being deleted.",
          "fieldValue": null,
          "fieldDefaultValue": 600000000000,
          "fieldFlag": "ingester.metadata-retain-period",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "rate_update_period",
          "required": false,
          "desc": "Period with which to update the per-tenant ingestion rates.",
          "fieldValue": null,
          "fieldDefaultValue": 15000000000,
          "fieldFlag": "ingester.rate-update-period",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "active_series_metrics_enabled",
          "required": false,
          "desc": "Enable tracking of active series and export them as metrics.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "ingester.active-series-metrics-enabled",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "active_series_metrics_update_period",
          "required": false,
          "desc": "How often to update active series metrics.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ingester.active-series-metrics-update-period",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "active_series_metrics_idle_timeout",
          "required": false,
          "desc": "After what time a series is considered to be inactive.",
          "fieldValue": null,
          "fieldDefaultValue": 600000000000,
          "fieldFlag": "ingester.active-series-metrics-idle-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "tsdb_config_update_period",
          "required": false,
          "desc": "Period with which to update the per-tenant TSDB configuration.",
          "fieldValue": null,
          "fieldDefaultValue": 15000000000,
          "fieldFlag": "ingester.tsdb-config-update-period",
          "fieldType": "duration",
          "fieldCategory": "experimental"
        },
        {
          "kind": "block",
          "name": "instance_limits",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_ingestion_rate",
              "required": false,
              "desc": "Max ingestion rate (samples/sec) that ingester will accept. This limit is per-ingester, not per-tenant. Additional push requests will be rejected. Current ingestion rate is computed as exponentially weighted moving average, updated every second. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.instance-limits.max-ingestion-rate",
              "fieldType": "float",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_tenants",
              "required": false,
              "desc": "Max tenants that this ingester can hold. Requests from additional tenants will be rejected. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.instance-limits.max-tenants",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_series",
              "required": false,
              "desc": "Max series that this ingester can hold (across all tenants). Requests to create additional series will be rejected. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.instance-limits.max-series",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_inflight_push_requests",
              "required": false,
              "desc": "Max inflight push requests that this ingester can handle (across all tenants). Additional requests will be rejected. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 30000,
              "fieldFlag": "ingester.instance-limits.max-inflight-push-requests",
              "fieldType": "int",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "ignore_series_limit_for_metric_names",
          "required": false,
          "desc": "Comma-separated list of metric names, for which the -ingester.max-global-series-per-metric limit will be ignored. Does not affect the -ingester.max-global-series-per-user limit.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "ingester.ignore-series-limit-for-metric-names",
          "fieldType": "string",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "flusher",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "exit_after_flush",
          "required": false,
          "desc": "Stop after flush has finished. If false, process will keep running, doing nothing.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "flusher.exit-after-flush",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "limits",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "request_rate",
          "required": false,
          "desc": "Per-tenant request rate limit in requests per second. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "distributor.request-rate-limit",
          "fieldType": "float",
          "fieldCategory": "experimental"
        },
        {
          "kind": "field",
          "name": "request_burst_size",
          "required": false,
          "desc": "Per-tenant allowed request burst size. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "distributor.request-burst-size",
          "fieldType": "int",
          "fieldCategory": "experimental"
        },
        {
          "kind": "field",
          "name": "ingestion_rate",
          "required": false,
          "desc": "Per-tenant ingestion rate limit in samples per second.",
          "fieldValue": null,
          "fieldDefaultValue": 10000,
          "fieldFlag": "distributor.ingestion-rate-limit",
          "fieldType": "float"
        },
        {
          "kind": "field",
          "name": "ingestion_burst_size",
          "required": false,
          "desc": "Per-tenant allowed ingestion burst size (in number of samples).",
          "fieldValue": null,
          "fieldDefaultValue": 200000,
          "fieldFlag": "distributor.ingestion-burst-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "accept_ha_samples",
          "required": false,
          "desc": "Flag to enable, for all tenants, handling of samples with external labels identifying replicas in an HA Prometheus setup.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "distributor.ha-tracker.enable-for-all-users",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "ha_cluster_label",
          "required": false,
          "desc": "Prometheus label to look for in samples to identify a Prometheus HA cluster.",
          "fieldValue": null,
          "fieldDefaultValue": "cluster",
          "fieldFlag": "distributor.ha-tracker.cluster",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "ha_replica_label",
          "required": false,
          "desc": "Prometheus label to look for in samples to identify a Prometheus HA replica.",
          "fieldValue": null,
          "fieldDefaultValue": "__replica__",
          "fieldFlag": "distributor.ha-tracker.replica",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "ha_max_clusters",
          "required": false,
          "desc": "Maximum number of clusters that HA tracker will keep track of for a single tenant. 0 to disable the limit.",
          "fieldValue": null,
          "fieldDefaultValue": 100,
          "fieldFlag": "distributor.ha-tracker.max-clusters",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "drop_labels",
          "required": false,
          "desc": "This flag can be used to specify label names that to drop during sample ingestion within the distributor and can be repeated in order to drop multiple labels.",
          "fieldValue": null,
          "fieldDefaultValue": [],
          "fieldFlag": "distributor.drop-label",
          "fieldType": "list of strings",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "max_label_name_length",
          "required": false,
          "desc": "Maximum length accepted for label names",
          "fieldValue": null,
          "fieldDefaultValue": 1024,
          "fieldFlag": "validation.max-length-label-name",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_label_value_length",
          "required": false,
          "desc": "Maximum length accepted for label value. This setting also applies to the metric name",
          "fieldValue": null,
          "fieldDefaultValue": 2048,
          "fieldFlag": "validation.max-length-label-value",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_label_names_per_series",
          "required": false,
          "desc": "Maximum number of label names per series.",
          "fieldValue": null,
          "fieldDefaultValue": 30,
          "fieldFlag": "validation.max-label-names-per-series",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_metadata_length",
          "required": false,
          "desc": "Maximum length accepted for metric metadata. Metadata refers to Metric Name, HELP and UNIT. Longer metadata is dropped except for HELP which is truncated.",
          "fieldValue": null,
          "fieldDefaultValue": 1024,
          "fieldFlag": "validation.max-metadata-length",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "creation_grace_period",
          "required": false,
          "desc": "Controls how far into the future incoming samples are accepted compared to the wall clock. Any sample with timestamp `t` will be rejected if `t \u003e (now + validation.create-grace-period)`. Also used by query-frontend to avoid querying too far into the future. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 600000000000,
          "fieldFlag": "validation.create-grace-period",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "enforce_metadata_metric_name",
          "required": false,
          "desc": "Enforce every metadata has a metric name.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "validation.enforce-metadata-metric-name",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "ingestion_tenant_shard_size",
          "required": false,
          "desc": "The tenant's shard size used by shuffle-sharding. Must be set both on ingesters and distributors. 0 disables shuffle sharding.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "distributor.ingestion-tenant-shard-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "metric_relabel_configs",
          "required": false,
          "desc": "List of metric relabel configurations. Note that in most situations, it is more effective to use metrics relabeling directly in the Prometheus server, e.g. remote_write.write_relabel_configs.",
          "fieldValue": null,
          "fieldDefaultValue": null,
          "fieldType": "relabel_config...",
          "fieldCategory": "experimental"
        },
        {
          "kind": "field",
          "name": "max_global_series_per_user",
          "required": false,
          "desc": "The maximum number of in-memory series per tenant, across the cluster before replication. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 150000,
          "fieldFlag": "ingester.max-global-series-per-user",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_global_series_per_metric",
          "required": false,
          "desc": "The maximum number of in-memory series per metric name, across the cluster before replication. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ingester.max-global-series-per-metric",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_global_metadata_per_user",
          "required": false,
          "desc": "The maximum number of in-memory metrics with metadata per tenant, across the cluster. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ingester.max-global-metadata-per-user",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_global_metadata_per_metric",
          "required": false,
          "desc": "The maximum number of metadata per metric, across the cluster. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ingester.max-global-metadata-per-metric",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_global_exemplars_per_user",
          "required": false,
          "desc": "The maximum number of exemplars in memory, across the cluster. 0 to disable exemplars ingestion.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ingester.max-global-exemplars-per-user",
          "fieldType": "int",
          "fieldCategory": "experimental"
        },
        {
          "kind": "field",
          "name": "active_series_custom_trackers",
          "required": false,
          "desc": "Additional custom trackers for active metrics. If there are active series matching a provided matcher (map value), the count will be exposed in the custom trackers metric labeled using the tracker name (map key). Zero valued counts are not exposed (and removed when they go back to zero).",
          "fieldValue": null,
          "fieldDefaultValue": {},
          "fieldFlag": "ingester.active-series-custom-trackers",
          "fieldType": "map of tracker name (string) to matcher (string)",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "out_of_order_time_window",
          "required": false,
          "desc": "Non-zero value enables out-of-order support for most recent samples that are within the time window in relation to the TSDB's maximum time, i.e., within [db.maxTime-timeWindow, db.maxTime]). The ingester will need more memory as a factor of rate of out-of-order samples being ingested and the number of series that are getting out-of-order samples. A lower TTL of 10 minutes will be set for the query cache entries that overlap with this window.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ingester.out-of-order-time-window",
          "fieldType": "duration",
          "fieldCategory": "experimental"
        },
        {
          "kind": "field",
          "name": "max_fetched_chunks_per_query",
          "required": false,
          "desc": "Maximum number of chunks that can be fetched in a single query from ingesters and long-term storage. This limit is enforced in the querier, ruler and store-gateway. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 2000000,
          "fieldFlag": "querier.max-fetched-chunks-per-query",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_fetched_series_per_query",
          "required": false,
          "desc": "The maximum number of unique series for which a query can fetch samples from each ingesters and storage. This limit is enforced in the querier and ruler. 0 to disable",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "querier.max-fetched-series-per-query",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_fetched_chunk_bytes_per_query",
          "required": false,
          "desc": "The maximum size of all chunks in bytes that a query can fetch from each ingester and storage. This limit is enforced in the querier and ruler. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "querier.max-fetched-chunk-bytes-per-query",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_query_lookback",
          "required": false,
          "desc": "Limit how long back data (series and metadata) can be queried, up until \u003clookback\u003e duration ago. This limit is enforced in the query-frontend, querier and ruler. If the requested time range is outside the allowed range, the request will not fail but will be manipulated to only query data within the allowed time range. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "querier.max-query-lookback",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_partial_query_length",
          "required": false,
          "desc": "Limit the time range for partial queries at the querier level. Defaults to the value of -store.max-query-length if set to 0.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "querier.max-partial-query-length",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_query_parallelism",
          "required": false,
          "desc": "Maximum number of split (by time) or partial (by shard) queries that will be scheduled in parallel by the query-frontend for a single input query. This limit is introduced to have a fairer query scheduling and avoid a single query over a large time range saturating all available queriers.",
          "fieldValue": null,
          "fieldDefaultValue": 14,
          "fieldFlag": "querier.max-query-parallelism",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_labels_query_length",
          "required": false,
          "desc": "Limit the time range (end - start time) of series, label names and values queries. This limit is enforced in the querier. If the requested time range is outside the allowed range, the request will not fail but will be manipulated to only query data within the allowed time range. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "store.max-labels-query-length",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_cache_freshness",
          "required": false,
          "desc": "Most recent allowed cacheable result per-tenant, to prevent caching very recent results that might still be in flux.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "query-frontend.max-cache-freshness",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "max_queriers_per_tenant",
          "required": false,
          "desc": "Maximum number of queriers that can handle requests for a single tenant. If set to 0 or value higher than number of available queriers, *all* queriers will handle requests for the tenant. Each frontend (or query-scheduler, if used) will select the same set of queriers for the same tenant (given that all queriers are connected to all frontends / query-schedulers). This option only works with queriers connecting to the query-frontend / query-scheduler, not when using downstream URL.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "query-frontend.max-queriers-per-tenant",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "query_sharding_total_shards",
          "required": false,
          "desc": "The amount of shards to use when doing parallelisation via query sharding by tenant. 0 to disable query sharding for tenant. Query sharding implementation will adjust the number of query shards based on compactor shards. This allows querier to not search the blocks which cannot possibly have the series for given query shard.",
          "fieldValue": null,
          "fieldDefaultValue": 16,
          "fieldFlag": "query-frontend.query-sharding-total-shards",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "query_sharding_max_sharded_queries",
          "required": false,
          "desc": "The max number of sharded queries that can be run for a given received query. 0 to disable limit.",
          "fieldValue": null,
          "fieldDefaultValue": 128,
          "fieldFlag": "query-frontend.query-sharding-max-sharded-queries",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "split_instant_queries_by_interval",
          "required": false,
          "desc": "Split instant queries by an interval and execute in parallel. 0 to disable it.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "query-frontend.split-instant-queries-by-interval",
          "fieldType": "duration",
          "fieldCategory": "experimental"
        },
        {
          "kind": "field",
          "name": "max_total_query_length",
          "required": false,
          "desc": "Limit the total query time range (end - start time). This limit is enforced in the query-frontend on the received query. Defaults to the value of -store.max-query-length if set to 0.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "query-frontend.max-total-query-length",
          "fieldType": "duration",
          "fieldCategory": "experimental"
        },
        {
          "kind": "field",
          "name": "cardinality_analysis_enabled",
          "required": false,
          "desc": "Enables endpoints used for cardinality analysis.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "querier.cardinality-analysis-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "label_names_and_values_results_max_size_bytes",
          "required": false,
          "desc": "Maximum size in bytes of distinct label names and values. When querier receives response from ingester, it merges the response with responses from other ingesters. This maximum size limit is applied to the merged(distinct) results. If the limit is reached, an error is returned.",
          "fieldValue": null,
          "fieldDefaultValue": 419430400,
          "fieldFlag": "querier.label-names-and-values-results-max-size-bytes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "label_values_max_cardinality_label_names_per_request",
          "required": false,
          "desc": "Maximum number of label names allowed to be queried in a single /api/v1/cardinality/label_values API call.",
          "fieldValue": null,
          "fieldDefaultValue": 100,
          "fieldFlag": "querier.label-values-max-cardinality-label-names-per-request",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "ruler_evaluation_delay_duration",
          "required": false,
          "desc": "Duration to delay the evaluation of rules to ensure the underlying metrics have been pushed.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ruler.evaluation-delay-duration",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "ruler_tenant_shard_size",
          "required": false,
          "desc": "The tenant's shard size when sharding is used by ruler. Value of 0 disables shuffle sharding for the tenant, and tenant rules will be sharded across all ruler replicas.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ruler.tenant-shard-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "ruler_max_rules_per_rule_group",
          "required": false,
          "desc": "Maximum number of rules per rule group per-tenant. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 20,
          "fieldFlag": "ruler.max-rules-per-rule-group",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "ruler_max_rule_groups_per_tenant",
          "required": false,
          "desc": "Maximum number of rule groups per-tenant. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 70,
          "fieldFlag": "ruler.max-rule-groups-per-tenant",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "ruler_recording_rules_evaluation_enabled",
          "required": false,
          "desc": "Controls whether recording rules evaluation is enabled. This configuration option can be used to forcefully disable recording rules evaluation on a per-tenant basis.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "ruler.recording-rules-evaluation-enabled",
          "fieldType": "boolean",
          "fieldCategory": "experimental"
        },
        {
          "kind": "field",
          "name": "ruler_alerting_rules_evaluation_enabled",
          "required": false,
          "desc": "Controls whether alerting rules evaluation is enabled. This configuration option can be used to forcefully disable alerting rules evaluation on a per-tenant basis.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "ruler.alerting-rules-evaluation-enabled",
          "fieldType": "boolean",
          "fieldCategory": "experimental"
        },
        {
          "kind": "field",
          "name": "store_gateway_tenant_shard_size",
          "required": false,
          "desc": "The tenant's shard size, used when store-gateway sharding is enabled. Value of 0 disables shuffle sharding for the tenant, that is all tenant blocks are sharded across all store-gateway replicas.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "store-gateway.tenant-shard-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "compactor_blocks_retention_period",
          "required": false,
          "desc": "Delete blocks containing samples older than the specified retention period. Also used by query-frontend to avoid querying beyond the retention period. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "compactor.blocks-retention-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "compactor_split_and_merge_shards",
          "required": false,
          "desc": "The number of shards to use when splitting blocks. 0 to disable splitting.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "compactor.split-and-merge-shards",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "compactor_split_groups",
          "required": false,
          "desc": "Number of groups that blocks for splitting should be grouped into. Each group of blocks is then split separately. Number of output split shards is controlled by -compactor.split-and-merge-shards.",
          "fieldValue": null,
          "fieldDefaultValue": 1,
          "fieldFlag": "compactor.split-groups",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "compactor_tenant_shard_size",
          "required": false,
          "desc": "Max number of compactors that can compact blocks for single tenant. 0 to disable the limit and use all compactors.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "compactor.compactor-tenant-shard-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "compactor_partial_block_deletion_delay",
          "required": false,
          "desc": "If a partial block (unfinished block without meta.json file) hasn't been modified for this time, it will be marked for deletion. The minimum accepted value is 4h0m0s: a lower value will be ignored and the feature disabled. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "compactor.partial-block-deletion-delay",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "compactor_block_upload_enabled",
          "required": false,
          "desc": "Enable block upload API for the tenant.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "compactor.block-upload-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "s3_sse_type",
          "required": false,
          "desc": "S3 server-side encryption type. Required to enable server-side encryption overrides for a specific tenant. If not set, the default S3 client settings are used.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "s3_sse_kms_key_id",
          "required": false,
          "desc": "S3 server-side encryption KMS Key ID. Ignored if the SSE type override is not set.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "s3_sse_kms_encryption_context",
          "required": false,
          "desc": "S3 server-side encryption KMS encryption context. If unset and the key ID override is set, the encryption context will not be provided to S3. Ignored if the SSE type override is not set.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "alertmanager_receivers_firewall_block_cidr_networks",
          "required": false,
          "desc": "Comma-separated list of network CIDRs to block in Alertmanager receiver integrations.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "alertmanager.receivers-firewall-block-cidr-networks",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "alertmanager_receivers_firewall_block_private_addresses",
          "required": false,
          "desc": "True to block private and local addresses in Alertmanager receiver integrations. It blocks private addresses defined by  RFC 1918 (IPv4 addresses) and RFC 4193 (IPv6 addresses), as well as loopback, local unicast and local multicast addresses.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "alertmanager.receivers-firewall-block-private-addresses",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "alertmanager_notification_rate_limit",
          "required": false,
          "desc": "Per-tenant rate limit for sending notifications from Alertmanager in notifications/sec. 0 = rate limit disabled. Negative value = no notifications are allowed.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.notification-rate-limit",
          "fieldType": "float"
        },
        {
          "kind": "field",
          "name": "alertmanager_notification_rate_limit_per_integration",
          "required": false,
          "desc": "Per-integration notification rate limits. Value is a map, where each key is integration name and value is a rate-limit (float). On command line, this map is given in JSON format. Rate limit has the same meaning as -alertmanager.notification-rate-limit, but only applies for specific integration. Allowed integration names: webhook, email, pagerduty, opsgenie, wechat, slack, victorops, pushover, sns.",
          "fieldValue": null,
          "fieldDefaultValue": {},
          "fieldFlag": "alertmanager.notification-rate-limit-per-integration",
          "fieldType": "map of string to float64"
        },
        {
          "kind": "field",
          "name": "alertmanager_max_config_size_bytes",
          "required": false,
          "desc": "Maximum size of configuration file for Alertmanager that tenant can upload via Alertmanager API. 0 = no limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-config-size-bytes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "alertmanager_max_templates_count",
          "required": false,
          "desc": "Maximum number of templates in tenant's Alertmanager configuration uploaded via Alertmanager API. 0 = no limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-templates-count",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "alertmanager_max_template_size_bytes",
          "required": false,
          "desc": "Maximum size of single template in tenant's Alertmanager configuration uploaded via Alertmanager API. 0 = no limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-template-size-bytes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "alertmanager_max_dispatcher_aggregation_groups",
          "required": false,
          "desc": "Maximum number of aggregation groups in Alertmanager's dispatcher that a tenant can have. Each active aggregation group uses single goroutine. When the limit is reached, dispatcher will not dispatch alerts that belong to additional aggregation groups, but existing groups will keep working properly. 0 = no limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-dispatcher-aggregation-groups",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "alertmanager_max_alerts_count",
          "required": false,
          "desc": "Maximum number of alerts that a single tenant can have. Inserting more alerts will fail with a log message and metric increment. 0 = no limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-alerts-count",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "alertmanager_max_alerts_size_bytes",
          "required": false,
          "desc": "Maximum total size of alerts that a single tenant can have, alert size is the sum of the bytes of its labels, annotations and generatorURL. Inserting more alerts will fail with a log message and metric increment. 0 = no limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-alerts-size-bytes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "forwarding_endpoint",
          "required": false,
          "desc": "Remote-write endpoint where metrics specified in forwarding_rules are forwarded to. If set, takes precedence over endpoints specified in forwarding rules.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "forwarding_drop_older_than",
          "required": false,
          "desc": "If set, forwarding drops samples that are older than this duration. If unset or 0, no samples get dropped.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "forwarding_rules",
          "required": false,
          "desc": "Rules based on which the Distributor decides whether a metric should be forwarded to an alternative remote_write API endpoint.",
          "fieldValue": null,
          "fieldDefaultValue": {},
          "fieldType": "map of string to validation.ForwardingRule"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "frontend_worker",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "frontend_address",
          "required": false,
          "desc": "Address of the query-frontend component, in host:port format. If multiple query-frontends are running, the host should be a DNS resolving to all query-frontend instances. This option should be set only when query-scheduler component is not in use.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "querier.frontend-address",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "scheduler_address",
          "required": false,
          "desc": "Address of the query-scheduler component, in host:port format. The host should resolve to all query-scheduler instances. This option should be set only when query-scheduler component is in use and -query-scheduler.service-discovery-mode is set to 'dns'.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "querier.scheduler-address",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "dns_lookup_duration",
          "required": false,
          "desc": "How often to query DNS for query-frontend or query-scheduler address.",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "querier.dns-lookup-period",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "id",
          "required": false,
          "desc": "Querier ID, sent to the query-frontend to identify requests from the same querier. Defaults to hostname.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "querier.id",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "grpc_client_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_recv_msg_size",
              "required": false,
              "desc": "gRPC client max receive message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "querier.frontend-client.grpc-max-recv-msg-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_send_msg_size",
              "required": false,
              "desc": "gRPC client max send message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "querier.frontend-client.grpc-max-send-msg-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "grpc_compression",
              "required": false,
              "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.frontend-client.grpc-compression",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit",
              "required": false,
              "desc": "Rate limit for gRPC client; 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "querier.frontend-client.grpc-client-rate-limit",
              "fieldType": "float",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit_burst",
              "required": false,
              "desc": "Rate limit burst for gRPC client.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "querier.frontend-client.grpc-client-rate-limit-burst",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "backoff_on_ratelimits",
              "required": false,
              "desc": "Enable backoff and retry when we hit ratelimits.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "querier.frontend-client.backoff-on-ratelimits",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "backoff_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "min_period",
                  "required": false,
                  "desc": "Minimum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "querier.frontend-client.backoff-min-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_period",
                  "required": false,
                  "desc": "Maximum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "querier.frontend-client.backoff-max-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of times to backoff and retry before failing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "querier.frontend-client.backoff-retries",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "querier.frontend-client.tls-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.frontend-client.tls-cert-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.frontend-client.tls-key-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.frontend-client.tls-ca-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.frontend-client.tls-server-name",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "querier.frontend-client.tls-insecure-skip-verify",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cipher_suites",
              "required": false,
              "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.frontend-client.tls-cipher-suites",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_min_version",
              "required": false,
              "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.frontend-client.tls-min-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "frontend",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "log_queries_longer_than",
          "required": false,
          "desc": "Log queries that are slower than the specified duration. Set to 0 to disable. Set to \u003c 0 to enable on all queries.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "query-frontend.log-queries-longer-than",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_body_size",
          "required": false,
          "desc": "Max body size for downstream prometheus.",
          "fieldValue": null,
          "fieldDefaultValue": 10485760,
          "fieldFlag": "query-frontend.max-body-size",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "query_stats_enabled",
          "required": false,
          "desc": "False to disable query statistics tracking. When enabled, a message with some statistics is logged for every query.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "query-frontend.query-stats-enabled",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "max_outstanding_per_tenant",
          "required": false,
          "desc": "Maximum number of outstanding requests per tenant per frontend; requests beyond this error with HTTP 429.",
          "fieldValue": null,
          "fieldDefaultValue": 100,
          "fieldFlag": "querier.max-outstanding-requests-per-tenant",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "querier_forget_delay",
          "required": false,
          "desc": "If a querier disconnects without sending notification about graceful shutdown, the query-frontend will keep the querier in the tenant's shard until the forget delay has passed. This feature is useful to reduce the blast radius when shuffle-sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "query-frontend.querier-forget-delay",
          "fieldType": "duration",
          "fieldCategory": "experimental"
        },
        {
          "kind": "field",
          "name": "scheduler_address",
          "required": false,
          "desc": "Address of the query-scheduler component, in host:port format. The host should resolve to all query-scheduler instances. This option should be set only when query-scheduler component is in use and -query-scheduler.service-discovery-mode is set to 'dns'.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "query-frontend.scheduler-address",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "scheduler_dns_lookup_period",
          "required": false,
          "desc": "How often to resolve the scheduler-address, in order to look for new query-scheduler instances.",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "query-frontend.scheduler-dns-lookup-period",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "scheduler_worker_concurrency",
          "required": false,
          "desc": "Number of concurrent workers forwarding queries to single query-scheduler.",
          "fieldValue": null,
          "fieldDefaultValue": 5,
          "fieldFlag": "query-frontend.scheduler-worker-concurrency",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "grpc_client_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_recv_msg_size",
              "required": false,
              "desc": "gRPC client max receive message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "query-frontend.grpc-client-config.grpc-max-recv-msg-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_send_msg_size",
              "required": false,
              "desc": "gRPC client max send message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "query-frontend.grpc-client-config.grpc-max-send-msg-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "grpc_compression",
              "required": false,
              "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-frontend.grpc-client-config.grpc-compression",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit",
              "required": false,
              "desc": "Rate limit for gRPC client; 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "query-frontend.grpc-client-config.grpc-client-rate-limit",
              "fieldType": "float",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit_burst",
              "required": false,
              "desc": "Rate limit burst for gRPC client.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "query-frontend.grpc-client-config.grpc-client-rate-limit-burst",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "backoff_on_ratelimits",
              "required": false,
              "desc": "Enable backoff and retry when we hit ratelimits.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "query-frontend.grpc-client-config.backoff-on-ratelimits",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "backoff_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "min_period",
                  "required": false,
                  "desc": "Minimum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "query-frontend.grpc-client-config.backoff-min-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_period",
                  "required": false,
                  "desc": "Maximum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "query-frontend.grpc-client-config.backoff-max-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of times to backoff and retry before failing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "query-frontend.grpc-client-config.backoff-retries",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "query-frontend.grpc-client-config.tls-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-frontend.grpc-client-config.tls-cert-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-frontend.grpc-client-config.tls-key-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-frontend.grpc-client-config.tls-ca-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-frontend.grpc-client-config.tls-server-name",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "query-frontend.grpc-client-config.tls-insecure-skip-verify",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cipher_suites",
              "required": false,
              "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-frontend.grpc-client-config.tls-cipher-suites",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_min_version",
              "required": false,
              "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-frontend.grpc-client-config.tls-min-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "instance_interface_names",
          "required": false,
          "desc": "List of network interface names to look up when finding the instance IP address. This address is sent to query-scheduler and querier, which uses it to send the query response back to query-frontend.",
          "fieldValue": null,
          "fieldDefaultValue": [],
          "fieldFlag": "query-frontend.instance-interface-names",
          "fieldType": "list of strings",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "address",
          "required": false,
          "desc": "IP address to advertise to the querier (via scheduler) (default is auto-detected from network interfaces).",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "query-frontend.instance-addr",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "port",
          "required": false,
          "desc": "Port to advertise to querier (via scheduler) (defaults to server.grpc-listen-port).",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "query-frontend.instance-port",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "split_queries_by_interval",
          "required": false,
          "desc": "Split range queries by an interval and execute in parallel. You should use a multiple of 24 hours to optimize querying blocks. 0 to disable it.",
          "fieldValue": null,
          "fieldDefaultValue": 86400000000000,
          "fieldFlag": "query-frontend.split-queries-by-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "align_queries_with_step",
          "required": false,
          "desc": "Mutate incoming queries to align their start and end with their step.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "query-frontend.align-queries-with-step",
          "fieldType": "boolean"
        },
        {
          "kind": "block",
          "name": "results_cache",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "backend",
              "required": false,
              "desc": "Backend for query-frontend results cache, if not empty. Supported values: [memcached].",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-frontend.results-cache.backend",
              "fieldType": "string"
            },
            {
              "kind": "block",
              "name": "memcached",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "addresses",
                  "required": false,
                  "desc": "Comma-separated list of memcached addresses. Each address can be an IP address, hostname, or an entry specified in the DNS Service Discovery format.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "query-frontend.results-cache.memcached.addresses",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "timeout",
                  "required": false,
                  "desc": "The socket read/write timeout.",
                  "fieldValue": null,
                  "fieldDefaultValue": 200000000,
                  "fieldFlag": "query-frontend.results-cache.memcached.timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections",
                  "required": false,
                  "desc": "The maximum number of idle connections that will be maintained per address.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "query-frontend.results-cache.memcached.max-idle-connections",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_async_concurrency",
                  "required": false,
                  "desc": "The maximum number of concurrent asynchronous operations can occur.",
                  "fieldValue": null,
                  "fieldDefaultValue": 50,
                  "fieldFlag": "query-frontend.results-cache.memcached.max-async-concurrency",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_async_buffer_size",
                  "required": false,
                  "desc": "The maximum number of enqueued asynchronous operations allowed.",
                  "fieldValue": null,
                  "fieldDefaultValue": 25000,
                  "fieldFlag": "query-frontend.results-cache.memcached.max-async-buffer-size",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_get_multi_concurrency",
                  "required": false,
                  "desc": "The maximum number of concurrent connections running get operations. If set to 0, concurrency is unlimited.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "query-frontend.results-cache.memcached.max-get-multi-concurrency",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_get_multi_batch_size",
                  "required": false,
                  "desc": "The maximum number of keys a single underlying get operation should run. If more keys are specified, internally keys are split into multiple batches and fetched concurrently, honoring the max concurrency. If set to 0, the max batch size is unlimited.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "query-frontend.results-cache.memcached.max-get-multi-batch-size",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_item_size",
                  "required": false,
                  "desc": "The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1048576,
                  "fieldFlag": "query-frontend.results-cache.memcached.max-item-size",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "compression",
              "required": false,
              "desc": "Enable cache compression, if not empty. Supported values are: snappy.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-frontend.results-cache.compression",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "cache_results",
          "required": false,
          "desc": "Cache query results.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "query-frontend.cache-results",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "max_retries",
          "required": false,
          "desc": "Maximum number of retries for a single request; beyond this, the downstream error is returned.",
          "fieldValue": null,
          "fieldDefaultValue": 5,
          "fieldFlag": "query-frontend.max-retries-per-request",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "parallelize_shardable_queries",
          "required": false,
          "desc": "True to enable query sharding.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "query-frontend.parallelize-shardable-queries",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "cache_unaligned_requests",
          "required": false,
          "desc": "Cache requests that are not step-aligned.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "query-frontend.cache-unaligned-requests",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "downstream_url",
          "required": false,
          "desc": "URL of downstream Prometheus.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "query-frontend.downstream-url",
          "fieldType": "string",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "blocks_storage",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "backend",
          "required": false,
          "desc": "Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem.",
          "fieldValue": null,
          "fieldDefaultValue": "filesystem",
          "fieldFlag": "blocks-storage.backend",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "s3",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "endpoint",
              "required": false,
              "desc": "The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.s3.endpoint",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region",
              "required": false,
              "desc": "S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.s3.region",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "S3 bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.s3.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "secret_access_key",
              "required": false,
              "desc": "S3 secret access key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.s3.secret-access-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "access_key_id",
              "required": false,
              "desc": "S3 access key ID",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.s3.access-key-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "insecure",
              "required": false,
              "desc": "If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "blocks-storage.s3.insecure",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "signature_version",
              "required": false,
              "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
              "fieldValue": null,
              "fieldDefaultValue": "v4",
              "fieldFlag": "blocks-storage.s3.signature-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "sse",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "type",
                  "required": false,
                  "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "blocks-storage.s3.sse.type",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_key_id",
                  "required": false,
                  "desc": "KMS Key ID used to encrypt objects in S3",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "blocks-storage.s3.sse.kms-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_encryption_context",
                  "required": false,
                  "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "blocks-storage.s3.sse.kms-encryption-context",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "http",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "idle_conn_timeout",
                  "required": false,
                  "desc": "The time an idle connection will remain idle before closing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 90000000000,
                  "fieldFlag": "blocks-storage.s3.http.idle-conn-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "response_header_timeout",
                  "required": false,
                  "desc": "The amount of time the client will wait for a servers response headers.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "blocks-storage.s3.http.response-header-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "insecure_skip_verify",
                  "required": false,
                  "desc": "If the client connects to S3 via HTTPS and this option is enabled, the client will accept any certificate and hostname.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "blocks-storage.s3.http.insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_handshake_timeout",
                  "required": false,
                  "desc": "Maximum time to wait for a TLS handshake. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "blocks-storage.s3.tls-handshake-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "expect_continue_timeout",
                  "required": false,
                  "desc": "The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1000000000,
                  "fieldFlag": "blocks-storage.s3.expect-continue-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "blocks-storage.s3.max-idle-connections",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "blocks-storage.s3.max-idle-connections-per-host",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of connections per host. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "blocks-storage.s3.max-connections-per-host",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "gcs",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "GCS bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.gcs.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "service_account",
              "required": false,
              "desc": "JSON either from a Google Developers Console client_credentials.json file, or a Google Developers service account key. Needs to be valid JSON, not a filesystem path. If empty, fallback to Google default logic:\n1. A JSON file whose path is specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable. For workload identity federation, refer to https://cloud.google.com/iam/docs/how-to#using-workload-identity-federation on how to generate the JSON configuration file for on-prem/non-Google cloud platforms.\n2. A JSON file in a location known to the gcloud command-line tool: $HOME/.config/gcloud/application_default_credentials.json.\n3. On Google Compute Engine it fetches credentials from the metadata server.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.gcs.service-account",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "azure",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "account_name",
              "required": false,
              "desc": "Azure storage account name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.azure.account-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "account_key",
              "required": false,
              "desc": "Azure storage account key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.azure.account-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Azure storage container name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.azure.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "endpoint_suffix",
              "required": false,
              "desc": "Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN. If set to empty string, default endpoint suffix is used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.azure.endpoint-suffix",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Number of retries for recoverable errors",
              "fieldValue": null,
              "fieldDefaultValue": 20,
              "fieldFlag": "blocks-storage.azure.max-retries",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "user_assigned_id",
              "required": false,
              "desc": "User assigned identity. If empty, then System assigned identity is used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.azure.user-assigned-id",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "swift",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "auth_version",
              "required": false,
              "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "blocks-storage.swift.auth-version",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "auth_url",
              "required": false,
              "desc": "OpenStack Swift authentication URL",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.auth-url",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "username",
              "required": false,
              "desc": "OpenStack Swift username.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.username",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.user-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.user-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_id",
              "required": false,
              "desc": "OpenStack Swift user ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.user-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "password",
              "required": false,
              "desc": "OpenStack Swift API key.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.password",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_id",
              "required": false,
              "desc": "OpenStack Swift project ID (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.project-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_name",
              "required": false,
              "desc": "OpenStack Swift project name (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.project-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_id",
              "required": false,
              "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.project-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_name",
              "required": false,
              "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.project-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region_name",
              "required": false,
              "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.region-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Name of the OpenStack Swift container to put chunks in.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Max retries on requests error.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "blocks-storage.swift.max-retries",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "connect_timeout",
              "required": false,
              "desc": "Time after which a connection attempt is aborted.",
              "fieldValue": null,
              "fieldDefaultValue": 10000000000,
              "fieldFlag": "blocks-storage.swift.connect-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "request_timeout",
              "required": false,
              "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "blocks-storage.swift.request-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "filesystem",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "dir",
              "required": false,
              "desc": "Local filesystem storage directory.",
              "fieldValue": null,
              "fieldDefaultValue": "blocks",
              "fieldFlag": "blocks-storage.filesystem.dir",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "storage_prefix",
          "required": false,
          "desc": "Prefix for all objects stored in the backend storage. For simplicity, it may only contain digits and English alphabet letters.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "blocks-storage.storage-prefix",
          "fieldType": "string",
          "fieldCategory": "experimental"
        },
        {
          "kind": "block",
          "name": "bucket_store",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "sync_dir",
              "required": false,
              "desc": "Directory to store synchronized TSDB index headers. This directory is not required to be persisted between restarts, but it's highly recommended in order to improve the store-gateway startup time.",
              "fieldValue": null,
              "fieldDefaultValue": "./tsdb-sync/",
              "fieldFlag": "blocks-storage.bucket-store.sync-dir",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "sync_interval",
              "required": false,
              "desc": "How frequently to scan the bucket, or to refresh the bucket index (if enabled), in order to look for changes (new blocks shipped by ingesters and blocks deleted by retention or compaction).",
              "fieldValue": null,
              "fieldDefaultValue": 900000000000,
              "fieldFlag": "blocks-storage.bucket-store.sync-interval",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_concurrent",
              "required": false,
              "desc": "Max number of concurrent queries to execute against the long-term storage. The limit is shared across all tenants.",
              "fieldValue": null,
              "fieldDefaultValue": 100,
              "fieldFlag": "blocks-storage.bucket-store.max-concurrent",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tenant_sync_concurrency",
              "required": false,
              "desc": "Maximum number of concurrent tenants synching blocks.",
              "fieldValue": null,
              "fieldDefaultValue": 10,
              "fieldFlag": "blocks-storage.bucket-store.tenant-sync-concurrency",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "block_sync_concurrency",
              "required": false,
              "desc": "Maximum number of concurrent blocks synching per tenant.",
              "fieldValue": null,
              "fieldDefaultValue": 20,
              "fieldFlag": "blocks-storage.bucket-store.block-sync-concurrency",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "meta_sync_concurrency",
              "required": false,
              "desc": "Number of Go routines to use when syncing block meta files from object storage per tenant.",
              "fieldValue": null,
              "fieldDefaultValue": 20,
              "fieldFlag": "blocks-storage.bucket-store.meta-sync-concurrency",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "consistency_delay",
              "required": false,
              "desc": "Minimum age of a block before it's being read. Set it to safe value (e.g 30m) if your object storage is eventually consistent. GCS and S3 are (roughly) strongly consistent.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "blocks-storage.bucket-store.consistency-delay",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "index_cache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "backend",
                  "required": false,
                  "desc": "The index cache backend type. Supported values: inmemory, memcached.",
                  "fieldValue": null,
                  "fieldDefaultValue": "inmemory",
                  "fieldFlag": "blocks-storage.bucket-store.index-cache.backend",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "memcached",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "addresses",
                      "required": false,
                      "desc": "Comma-separated list of memcached addresses. Each address can be an IP address, hostname, or an entry specified in the DNS Service Discovery format.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.addresses",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "The socket read/write timeout.",
                      "fieldValue": null,
                      "fieldDefaultValue": 200000000,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections",
                      "required": false,
                      "desc": "The maximum number of idle connections that will be maintained per address.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.max-idle-connections",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent asynchronous operations can occur.",
                      "fieldValue": null,
                      "fieldDefaultValue": 50,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.max-async-concurrency",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_buffer_size",
                      "required": false,
                      "desc": "The maximum number of enqueued asynchronous operations allowed.",
                      "fieldValue": null,
                      "fieldDefaultValue": 25000,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.max-async-buffer-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent connections running get operations. If set to 0, concurrency is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.max-get-multi-concurrency",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_batch_size",
                      "required": false,
                      "desc": "The maximum number of keys a single underlying get operation should run. If more keys are specified, internally keys are split into multiple batches and fetched concurrently, honoring the max concurrency. If set to 0, the max batch size is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.max-get-multi-batch-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_item_size",
                      "required": false,
                      "desc": "The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1048576,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.max-item-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "inmemory",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "max_size_bytes",
                      "required": false,
                      "desc": "Maximum size in bytes of in-memory index cache used to speed up blocks index lookups (shared between all tenants).",
                      "fieldValue": null,
                      "fieldDefaultValue": 1073741824,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.inmemory.max-size-bytes",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "chunks_cache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "backend",
                  "required": false,
                  "desc": "Backend for chunks cache, if not empty. Supported values: memcached.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "blocks-storage.bucket-store.chunks-cache.backend",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "memcached",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "addresses",
                      "required": false,
                      "desc": "Comma-separated list of memcached addresses. Each address can be an IP address, hostname, or an entry specified in the DNS Service Discovery format.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.addresses",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "The socket read/write timeout.",
                      "fieldValue": null,
                      "fieldDefaultValue": 200000000,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections",
                      "required": false,
                      "desc": "The maximum number of idle connections that will be maintained per address.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.max-idle-connections",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent asynchronous operations can occur.",
                      "fieldValue": null,
                      "fieldDefaultValue": 50,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.max-async-concurrency",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_buffer_size",
                      "required": false,
                      "desc": "The maximum number of enqueued asynchronous operations allowed.",
                      "fieldValue": null,
                      "fieldDefaultValue": 25000,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.max-async-buffer-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent connections running get operations. If set to 0, concurrency is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.max-get-multi-concurrency",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_batch_size",
                      "required": false,
                      "desc": "The maximum number of keys a single underlying get operation should run. If more keys are specified, internally keys are split into multiple batches and fetched concurrently, honoring the max concurrency. If set to 0, the max batch size is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.max-get-multi-batch-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_item_size",
                      "required": false,
                      "desc": "The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1048576,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.max-item-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "subrange_size",
                  "required": false,
                  "desc": "Size of each subrange that bucket object is split into for better caching.",
                  "fieldValue": null,
                  "fieldDefaultValue": 16000,
                  "fieldFlag": "blocks-storage.bucket-store.chunks-cache.subrange-size",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_get_range_requests",
                  "required": false,
                  "desc": "Maximum number of sub-GetRange requests that a single GetRange request can be split into when fetching chunks. Zero or negative value = unlimited number of sub-requests.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3,
                  "fieldFlag": "blocks-storage.bucket-store.chunks-cache.max-get-range-requests",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "attributes_ttl",
                  "required": false,
                  "desc": "TTL for caching object attributes for chunks. If the metadata cache is configured, attributes will be stored under this cache backend, otherwise attributes are stored in the chunks cache backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": 604800000000000,
                  "fieldFlag": "blocks-storage.bucket-store.chunks-cache.attributes-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "attributes_in_memory_max_items",
                  "required": false,
                  "desc": "Maximum number of object attribute items to keep in a first level in-memory LRU cache. Metadata will be stored and fetched in-memory before hitting the cache backend. 0 to disable the in-memory cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 50000,
                  "fieldFlag": "blocks-storage.bucket-store.chunks-cache.attributes-in-memory-max-items",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "subrange_ttl",
                  "required": false,
                  "desc": "TTL for caching individual chunks subranges.",
                  "fieldValue": null,
                  "fieldDefaultValue": 86400000000000,
                  "fieldFlag": "blocks-storage.bucket-store.chunks-cache.subrange-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "metadata_cache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "backend",
                  "required": false,
                  "desc": "Backend for metadata cache, if not empty. Supported values: memcached.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.backend",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "memcached",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "addresses",
                      "required": false,
                      "desc": "Comma-separated list of memcached addresses. Each address can be an IP address, hostname, or an entry specified in the DNS Service Discovery format.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.addresses",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "The socket read/write timeout.",
                      "fieldValue": null,
                      "fieldDefaultValue": 200000000,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections",
                      "required": false,
                      "desc": "The maximum number of idle connections that will be maintained per address.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.max-idle-connections",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent asynchronous operations can occur.",
                      "fieldValue": null,
                      "fieldDefaultValue": 50,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.max-async-concurrency",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_buffer_size",
                      "required": false,
                      "desc": "The maximum number of enqueued asynchronous operations allowed.",
                      "fieldValue": null,
                      "fieldDefaultValue": 25000,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.max-async-buffer-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent connections running get operations. If set to 0, concurrency is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.max-get-multi-concurrency",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_batch_size",
                      "required": false,
                      "desc": "The maximum number of keys a single underlying get operation should run. If more keys are specified, internally keys are split into multiple batches and fetched concurrently, honoring the max concurrency. If set to 0, the max batch size is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.max-get-multi-batch-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_item_size",
                      "required": false,
                      "desc": "The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1048576,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.max-item-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "tenants_list_ttl",
                  "required": false,
                  "desc": "How long to cache list of tenants in the bucket.",
                  "fieldValue": null,
                  "fieldDefaultValue": 900000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.tenants-list-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tenant_blocks_list_ttl",
                  "required": false,
                  "desc": "How long to cache list of blocks for each tenant.",
                  "fieldValue": null,
                  "fieldDefaultValue": 300000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.tenant-blocks-list-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "chunks_list_ttl",
                  "required": false,
                  "desc": "How long to cache list of chunks for a block.",
                  "fieldValue": null,
                  "fieldDefaultValue": 86400000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.chunks-list-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "metafile_exists_ttl",
                  "required": false,
                  "desc": "How long to cache information that block metafile exists. Also used for tenant deletion mark file.",
                  "fieldValue": null,
                  "fieldDefaultValue": 7200000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.metafile-exists-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "metafile_doesnt_exist_ttl",
                  "required": false,
                  "desc": "How long to cache information that block metafile doesn't exist. Also used for tenant deletion mark file.",
                  "fieldValue": null,
                  "fieldDefaultValue": 300000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.metafile-doesnt-exist-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "metafile_content_ttl",
                  "required": false,
                  "desc": "How long to cache content of the metafile.",
                  "fieldValue": null,
                  "fieldDefaultValue": 86400000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.metafile-content-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "metafile_max_size_bytes",
                  "required": false,
                  "desc": "Maximum size of metafile content to cache in bytes. Caching will be skipped if the content exceeds this size. This is useful to avoid network round trip for large content if the configured caching backend has an hard limit on cached items size (in this case, you should set this limit to the same limit in the caching backend).",
                  "fieldValue": null,
                  "fieldDefaultValue": 1048576,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.metafile-max-size-bytes",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "metafile_attributes_ttl",
                  "required": false,
                  "desc": "How long to cache attributes of the block metafile.",
                  "fieldValue": null,
                  "fieldDefaultValue": 604800000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.metafile-attributes-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "block_index_attributes_ttl",
                  "required": false,
                  "desc": "How long to cache attributes of the block index.",
                  "fieldValue": null,
                  "fieldDefaultValue": 604800000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.block-index-attributes-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "bucket_index_content_ttl",
                  "required": false,
                  "desc": "How long to cache content of the bucket index.",
                  "fieldValue": null,
                  "fieldDefaultValue": 300000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.bucket-index-content-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "bucket_index_max_size_bytes",
                  "required": false,
                  "desc": "Maximum size of bucket index content to cache in bytes. Caching will be skipped if the content exceeds this size. This is useful to avoid network round trip for large content if the configured caching backend has an hard limit on cached items size (in this case, you should set this limit to the same limit in the caching backend).",
                  "fieldValue": null,
                  "fieldDefaultValue": 1048576,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.bucket-index-max-size-bytes",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "ignore_deletion_mark_delay",
              "required": false,
              "desc": "Duration after which the blocks marked for deletion will be filtered out while fetching blocks. The idea of ignore-deletion-marks-delay is to ignore blocks that are marked for deletion with some delay. This ensures store can still serve blocks that are meant to be deleted but do not have a replacement yet.",
              "fieldValue": null,
              "fieldDefaultValue": 3600000000000,
              "fieldFlag": "blocks-storage.bucket-store.ignore-deletion-marks-delay",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "bucket_index",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enabled",
                  "required": false,
                  "desc": "If enabled, queriers and store-gateways discover blocks by reading a bucket index (created and updated by the compactor) instead of periodically scanning the bucket.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "blocks-storage.bucket-store.bucket-index.enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "update_on_error_interval",
                  "required": false,
                  "desc": "How frequently a bucket index, which previously failed to load, should be tried to load again. This option is used only by querier.",
                  "fieldValue": null,
                  "fieldDefaultValue": 60000000000,
                  "fieldFlag": "blocks-storage.bucket-store.bucket-index.update-on-error-interval",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "idle_timeout",
                  "required": false,
                  "desc": "How long a unused bucket index should be cached. Once this timeout expires, the unused bucket index is removed from the in-memory cache. This option is used only by querier.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3600000000000,
                  "fieldFlag": "blocks-storage.bucket-store.bucket-index.idle-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_stale_period",
                  "required": false,
                  "desc": "The maximum allowed age of a bucket index (last updated) before queries start failing because the bucket index is too old. The bucket index is periodically updated by the compactor, and this check is enforced in the querier (at query time).",
                  "fieldValue": null,
                  "fieldDefaultValue": 3600000000000,
                  "fieldFlag": "blocks-storage.bucket-store.bucket-index.max-stale-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "ignore_blocks_within",
              "required": false,
              "desc": "Blocks with minimum time within this duration are ignored, and not loaded by store-gateway. Useful when used together with -querier.query-store-after to prevent loading young blocks, because there are usually many of them (depending on number of ingesters) and they are not yet compacted. Negative values or 0 disable the filter.",
              "fieldValue": null,
              "fieldDefaultValue": 36000000000000,
              "fieldFlag": "blocks-storage.bucket-store.ignore-blocks-within",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_chunk_pool_bytes",
              "required": false,
              "desc": "Max size - in bytes - of a chunks pool, used to reduce memory allocations. The pool is shared across all tenants. 0 to disable the limit.",
              "fieldValue": null,
              "fieldDefaultValue": 2147483648,
              "fieldFlag": "blocks-storage.bucket-store.max-chunk-pool-bytes",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "chunk_pool_min_bucket_size_bytes",
              "required": false,
              "desc": "Size - in bytes - of the smallest chunks pool bucket.",
              "fieldValue": null,
              "fieldDefaultValue": 16000,
              "fieldFlag": "blocks-storage.bucket-store.chunk-pool-min-bucket-size-bytes",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "chunk_pool_max_bucket_size_bytes",
              "required": false,
              "desc": "Size - in bytes - of the largest chunks pool bucket.",
              "fieldValue": null,
              "fieldDefaultValue": 50000000,
              "fieldFlag": "blocks-storage.bucket-store.chunk-pool-max-bucket-size-bytes",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "series_hash_cache_max_size_bytes",
              "required": false,
              "desc": "Max size - in bytes - of the in-memory series hash cache. The cache is shared across all tenants and it's used only when query sharding is enabled.",
              "fieldValue": null,
              "fieldDefaultValue": 1073741824,
              "fieldFlag": "blocks-storage.bucket-store.series-hash-cache-max-size-bytes",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "index_header_lazy_loading_enabled",
              "required": false,
              "desc": "If enabled, store-gateway will lazy load an index-header only once required by a query.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "blocks-storage.bucket-store.index-header-lazy-loading-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "index_header_lazy_loading_idle_timeout",
              "required": false,
              "desc": "If index-header lazy loading is enabled and this setting is \u003e 0, the store-gateway will offload unused index-headers after 'idle timeout' inactivity.",
              "fieldValue": null,
              "fieldDefaultValue": 3600000000000,
              "fieldFlag": "blocks-storage.bucket-store.index-header-lazy-loading-idle-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "partitioner_max_gap_bytes",
              "required": false,
              "desc": "Max size - in bytes - of a gap for which the partitioner aggregates together two bucket GET object requests.",
              "fieldValue": null,
              "fieldDefaultValue": 524288,
              "fieldFlag": "blocks-storage.bucket-store.partitioner-max-gap-bytes",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "postings_offsets_in_mem_sampling",
              "required": false,
              "desc": "Controls what is the ratio of postings offsets that the store will hold in memory.",
              "fieldValue": null,
              "fieldDefaultValue": 32,
              "fieldFlag": "blocks-storage.bucket-store.posting-offsets-in-mem-sampling",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "index_header",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "map_populate_enabled",
                  "required": false,
                  "desc": "If enabled, the store-gateway will attempt to pre-populate the file system cache when memory-mapping index-header files.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "blocks-storage.bucket-store.index-header.map-populate-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "stream_reader_enabled",
                  "required": false,
                  "desc": "If enabled, the store-gateway will use an experimental streaming reader to load and parse index-header files.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "blocks-storage.bucket-store.index-header.stream-reader-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "stream_reader_max_idle_file_handles",
                  "required": false,
                  "desc": "Maximum number of idle file handles the store-gateway keeps open for each index-header file when using the streaming reader. This option is used only when the index-header streaming reader is enabled.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1,
                  "fieldFlag": "blocks-storage.bucket-store.index-header.stream-reader-max-idle-file-handles",
                  "fieldType": "int",
                  "fieldCategory": "experimental"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "streaming_series_batch_size",
              "required": false,
              "desc": "If larger than 0, this option enables store-gateway series streaming. The store-gateway will load series from the bucket in batches instead of buffering them all in memory before returning to the querier. This option controls how many series to fetch per batch.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "blocks-storage.bucket-store.batch-series-size",
              "fieldType": "int",
              "fieldCategory": "experimental"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "tsdb",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "dir",
              "required": false,
              "desc": "Directory to store TSDBs (including WAL) in the ingesters. This directory is required to be persisted between restarts.",
              "fieldValue": null,
              "fieldDefaultValue": "./tsdb/",
              "fieldFlag": "blocks-storage.tsdb.dir",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "retention_period",
              "required": false,
              "desc": "TSDB blocks retention in the ingester before a block is removed, relative to the newest block written for the tenant. This should be larger than the -blocks-storage.tsdb.block-ranges-period, -querier.query-store-after and large enough to give store-gateways and queriers enough time to discover newly uploaded blocks.",
              "fieldValue": null,
              "fieldDefaultValue": 86400000000000,
              "fieldFlag": "blocks-storage.tsdb.retention-period",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "ship_interval",
              "required": false,
              "desc": "How frequently the TSDB blocks are scanned and new ones are shipped to the storage. 0 means shipping is disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "blocks-storage.tsdb.ship-interval",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "ship_concurrency",
              "required": false,
              "desc": "Maximum number of tenants concurrently shipping blocks to the storage.",
              "fieldValue": null,
              "fieldDefaultValue": 10,
              "fieldFlag": "blocks-storage.tsdb.ship-concurrency",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "head_compaction_interval",
              "required": false,
              "desc": "How frequently ingesters try to compact TSDB head. Block is only created if data covers smallest block range. Must be greater than 0 and max 5 minutes.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "blocks-storage.tsdb.head-compaction-interval",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "head_compaction_concurrency",
              "required": false,
              "desc": "Maximum number of tenants concurrently compacting TSDB head into a new block",
              "fieldValue": null,
              "fieldDefaultValue": 1,
              "fieldFlag": "blocks-storage.tsdb.head-compaction-concurrency",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "head_compaction_idle_timeout",
              "required": false,
              "desc": "If TSDB head is idle for this duration, it is compacted. Note that up to 25% jitter is added to the value to avoid ingesters compacting concurrently. 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 3600000000000,
              "fieldFlag": "blocks-storage.tsdb.head-compaction-idle-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "head_chunks_write_buffer_size_bytes",
              "required": false,
              "desc": "The write buffer size used by the head chunks mapper. Lower values reduce memory utilisation on clusters with a large number of tenants at the cost of increased disk I/O operations.",
              "fieldValue": null,
              "fieldDefaultValue": 4194304,
              "fieldFlag": "blocks-storage.tsdb.head-chunks-write-buffer-size-bytes",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "head_chunks_end_time_variance",
              "required": false,
              "desc": "How much variance (as percentage between 0 and 1) should be applied to the chunk end time, to spread chunks writing across time. Doesn't apply to the last chunk of the chunk range. 0 means no variance.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "blocks-storage.tsdb.head-chunks-end-time-variance",
              "fieldType": "float",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "stripe_size",
              "required": false,
              "desc": "The number of shards of series to use in TSDB (must be a power of 2). Reducing this will decrease memory footprint, but can negatively impact performance.",
              "fieldValue": null,
              "fieldDefaultValue": 16384,
              "fieldFlag": "blocks-storage.tsdb.stripe-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "wal_compression_enabled",
              "required": false,
              "desc": "True to enable TSDB WAL compression.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "blocks-storage.tsdb.wal-compression-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "wal_segment_size_bytes",
              "required": false,
              "desc": "TSDB WAL segments files max size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 134217728,
              "fieldFlag": "blocks-storage.tsdb.wal-segment-size-bytes",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "flush_blocks_on_shutdown",
              "required": false,
              "desc": "True to flush blocks to storage on shutdown. If false, incomplete blocks will be reused after restart.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "blocks-storage.tsdb.flush-blocks-on-shutdown",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "close_idle_tsdb_timeout",
              "required": false,
              "desc": "If TSDB has not received any data for this duration, and all blocks from TSDB have been shipped, TSDB is closed and deleted from local disk. If set to positive value, this value should be equal or higher than -querier.query-ingesters-within flag to make sure that TSDB is not closed prematurely, which could cause partial query results. 0 or negative value disables closing of idle TSDB.",
              "fieldValue": null,
              "fieldDefaultValue": 46800000000000,
              "fieldFlag": "blocks-storage.tsdb.close-idle-tsdb-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "memory_snapshot_on_shutdown",
              "required": false,
              "desc": "True to enable snapshotting of in-memory TSDB data on disk when shutting down.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "blocks-storage.tsdb.memory-snapshot-on-shutdown",
              "fieldType": "boolean",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "head_chunks_write_queue_size",
              "required": false,
              "desc": "The size of the write queue used by the head chunks mapper. Lower values reduce memory utilisation at the cost of potentially higher ingest latency. Value of 0 switches chunks mapper to implementation without a queue.",
              "fieldValue": null,
              "fieldDefaultValue": 1000000,
              "fieldFlag": "blocks-storage.tsdb.head-chunks-write-queue-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "series_hash_cache_max_size_bytes",
              "required": false,
              "desc": "Max size - in bytes - of the in-memory series hash cache. The cache is shared across all tenants and it's used only when query sharding is enabled.",
              "fieldValue": null,
              "fieldDefaultValue": 1073741824,
              "fieldFlag": "blocks-storage.tsdb.series-hash-cache-max-size-bytes",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_tsdb_opening_concurrency_on_startup",
              "required": false,
              "desc": "limit the number of concurrently opening TSDB's on startup",
              "fieldValue": null,
              "fieldDefaultValue": 10,
              "fieldFlag": "blocks-storage.tsdb.max-tsdb-opening-concurrency-on-startup",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "out_of_order_capacity_max",
              "required": false,
              "desc": "Maximum capacity for out of order chunks, in samples between 1 and 255.",
              "fieldValue": null,
              "fieldDefaultValue": 32,
              "fieldFlag": "blocks-storage.tsdb.out-of-order-capacity-max",
              "fieldType": "int",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "head_postings_for_matchers_cache_ttl",
              "required": false,
              "desc": "How long to cache postings for matchers in the Head and OOOHead. 0 disables the cache and just deduplicates the in-flight calls.",
              "fieldValue": null,
              "fieldDefaultValue": 10000000000,
              "fieldFlag": "blocks-storage.tsdb.head-postings-for-matchers-cache-ttl",
              "fieldType": "duration",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "head_postings_for_matchers_cache_size",
              "required": false,
              "desc": "Maximum number of entries in the cache for postings for matchers in the Head and OOOHead when ttl \u003e 0.",
              "fieldValue": null,
              "fieldDefaultValue": 100,
              "fieldFlag": "blocks-storage.tsdb.head-postings-for-matchers-cache-size",
              "fieldType": "int",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "head_postings_for_matchers_cache_force",
              "required": false,
              "desc": "Force the cache to be used for postings for matchers in the Head and OOOHead, even if it's not a concurrent (query-sharding) call.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "blocks-storage.tsdb.head-postings-for-matchers-cache-force",
              "fieldType": "boolean",
              "fieldCategory": "experimental"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "bucket_rate_limit",
          "required": false,
          "desc": "Rate limit (per second), if set \u003c= 0 rate limiting is disabled.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "blocks-storage.bucket-rate-limit.limit",
          "fieldType": "float"
        },
        {
          "kind": "field",
          "name": "bucket_rate_limit_burst",
          "required": false,
          "desc": "Burst size",
          "fieldValue": null,
          "fieldDefaultValue": 1,
          "fieldFlag": "blocks-storage.bucket-rate-limit.burst",
          "fieldType": "int"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "compactor",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "block_ranges",
          "required": false,
          "desc": "List of compaction time ranges.",
          "fieldValue": null,
          "fieldDefaultValue": [],
          "fieldFlag": "compactor.block-ranges",
          "fieldType": "list of durations",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "block_sync_concurrency",
          "required": false,
          "desc": "Number of Go routines to use when downloading blocks for compaction and uploading resulting blocks.",
          "fieldValue": null,
          "fieldDefaultValue": 8,
          "fieldFlag": "compactor.block-sync-concurrency",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "meta_sync_concurrency",
          "required": false,
          "desc": "Number of Go routines to use when syncing block meta files from the long term storage.",
          "fieldValue": null,
          "fieldDefaultValue": 20,
          "fieldFlag": "compactor.meta-sync-concurrency",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "consistency_delay",
          "required": false,
          "desc": "Minimum age of fresh (non-compacted) blocks before they are being processed.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "compactor.consistency-delay",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "data_dir",
          "required": false,
          "desc": "Directory to temporarily store blocks during compaction. This directory is not required to be persisted between restarts.",
          "fieldValue": null,
          "fieldDefaultValue": "./data-compactor/",
          "fieldFlag": "compactor.data-dir",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "compaction_interval",
          "required": false,
          "desc": "The frequency at which the compaction runs",
          "fieldValue": null,
          "fieldDefaultValue": 3600000000000,
          "fieldFlag": "compactor.compaction-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "compaction_retries",
          "required": false,
          "desc": "How many times to retry a failed compaction within a single compaction run.",
          "fieldValue": null,
          "fieldDefaultValue": 3,
          "fieldFlag": "compactor.compaction-retries",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "compaction_concurrency",
          "required": false,
          "desc": "Max number of concurrent compactions running.",
          "fieldValue": null,
          "fieldDefaultValue": 1,
          "fieldFlag": "compactor.compaction-concurrency",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "cleanup_interval",
          "required": false,
          "desc": "How frequently compactor should run blocks cleanup and maintenance, as well as update the bucket index.",
          "fieldValue": null,
          "fieldDefaultValue": 900000000000,
          "fieldFlag": "compactor.cleanup-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "cleanup_concurrency",
          "required": false,
          "desc": "Max number of tenants for which blocks cleanup and maintenance should run concurrently.",
          "fieldValue": null,
          "fieldDefaultValue": 20,
          "fieldFlag": "compactor.cleanup-concurrency",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "deletion_delay",
          "required": false,
          "desc": "Time before a block marked for deletion is deleted from bucket. If not 0, blocks will be marked for deletion and compactor component will permanently delete blocks marked for deletion from the bucket. If 0, blocks will be deleted straight away. Note that deleting blocks immediately can cause query failures.",
          "fieldValue": null,
          "fieldDefaultValue": 43200000000000,
          "fieldFlag": "compactor.deletion-delay",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "tenant_cleanup_delay",
          "required": false,
          "desc": "For tenants marked for deletion, this is time between deleting of last block, and doing final cleanup (marker files, debug files) of the tenant.",
          "fieldValue": null,
          "fieldDefaultValue": 21600000000000,
          "fieldFlag": "compactor.tenant-cleanup-delay",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "max_compaction_time",
          "required": false,
          "desc": "Max time for starting compactions for a single tenant. After this time no new compactions for the tenant are started before next compaction cycle. This can help in multi-tenant environments to avoid single tenant using all compaction time, but also in single-tenant environments to force new discovery of blocks more often. 0 = disabled.",
          "fieldValue": null,
          "fieldDefaultValue": 3600000000000,
          "fieldFlag": "compactor.max-compaction-time",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "max_opening_blocks_concurrency",
          "required": false,
          "desc": "Number of goroutines opening blocks before compaction.",
          "fieldValue": null,
          "fieldDefaultValue": 1,
          "fieldFlag": "compactor.max-opening-blocks-concurrency",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "max_closing_blocks_concurrency",
          "required": false,
          "desc": "Max number of blocks that can be closed concurrently during split compaction. Note that closing of newly compacted block uses a lot of memory for writing index.",
          "fieldValue": null,
          "fieldDefaultValue": 1,
          "fieldFlag": "compactor.max-closing-blocks-concurrency",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "symbols_flushers_concurrency",
          "required": false,
          "desc": "Number of symbols flushers used when doing split compaction.",
          "fieldValue": null,
          "fieldDefaultValue": 1,
          "fieldFlag": "compactor.symbols-flushers-concurrency",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "enabled_tenants",
          "required": false,
          "desc": "Comma separated list of tenants that can be compacted. If specified, only these tenants will be compacted by compactor, otherwise all tenants can be compacted. Subject to sharding.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "compactor.enabled-tenants",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "disabled_tenants",
          "required": false,
          "desc": "Comma separated list of tenants that cannot be compacted by this compactor. If specified, and compactor would normally pick given tenant for compaction (via -compactor.enabled-tenants or sharding), it will be ignored instead.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "compactor.disabled-tenants",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "sharding_ring",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "memberlist",
                  "fieldFlag": "compactor.ring.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "collectors/",
                  "fieldFlag": "compactor.ring.prefix",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "compactor.ring.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.consul.acl-token",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "compactor.ring.consul.client-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "compactor.ring.consul.consistent-reads",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "compactor.ring.consul.watch-rate-limit",
                      "fieldType": "float",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "compactor.ring.consul.watch-burst-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "cas_retry_delay",
                      "required": false,
                      "desc": "Maximum duration to wait before retrying a Compare And Swap (CAS) operation.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1000000000,
                      "fieldFlag": "compactor.ring.consul.cas-retry-delay",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "compactor.ring.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "compactor.ring.etcd.dial-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "compactor.ring.etcd.max-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "compactor.ring.etcd.tls-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.tls-cert-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.tls-key-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.tls-ca-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.tls-server-name",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "compactor.ring.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cipher_suites",
                      "required": false,
                      "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.tls-cipher-suites",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_min_version",
                      "required": false,
                      "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.tls-min-version",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.multi.primary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.multi.secondary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "compactor.ring.multi.mirror-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "compactor.ring.multi.mirror-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to the ring. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "compactor.ring.heartbeat-period",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "heartbeat_timeout",
              "required": false,
              "desc": "The heartbeat timeout after which compactors are considered unhealthy within the ring. 0 = never (timeout disabled).",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "compactor.ring.heartbeat-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "wait_stability_min_duration",
              "required": false,
              "desc": "Minimum time to wait for ring stability at startup. 0 to disable.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "compactor.ring.wait-stability-min-duration",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "wait_stability_max_duration",
              "required": false,
              "desc": "Maximum time to wait for ring stability at startup. If the compactor ring keeps changing after this period of time, the compactor will start anyway.",
              "fieldValue": null,
              "fieldDefaultValue": 300000000000,
              "fieldFlag": "compactor.ring.wait-stability-max-duration",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_id",
              "required": false,
              "desc": "Instance ID to register in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "\u003chostname\u003e",
              "fieldFlag": "compactor.ring.instance-id",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_interface_names",
              "required": false,
              "desc": "List of network interface names to look up when finding the instance IP address.",
              "fieldValue": null,
              "fieldDefaultValue": [],
              "fieldFlag": "compactor.ring.instance-interface-names",
              "fieldType": "list of strings"
            },
            {
              "kind": "field",
              "name": "instance_port",
              "required": false,
              "desc": "Port to advertise in the ring (defaults to -server.grpc-listen-port).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "compactor.ring.instance-port",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_addr",
              "required": false,
              "desc": "IP address to advertise in the ring. Default is auto-detected.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "compactor.ring.instance-addr",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "wait_active_instance_timeout",
              "required": false,
              "desc": "Timeout for waiting on compactor to become ACTIVE in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": 600000000000,
              "fieldFlag": "compactor.ring.wait-active-instance-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "compaction_jobs_order",
          "required": false,
          "desc": "The sorting to use when deciding which compaction jobs should run first for a given tenant. Supported values are: smallest-range-oldest-blocks-first, newest-blocks-first.",
          "fieldValue": null,
          "fieldDefaultValue": "smallest-range-oldest-blocks-first",
          "fieldFlag": "compactor.compaction-jobs-order",
          "fieldType": "string",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "store_gateway",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "sharding_ring",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "memberlist",
                  "fieldFlag": "store-gateway.sharding-ring.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "collectors/",
                  "fieldFlag": "store-gateway.sharding-ring.prefix",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "store-gateway.sharding-ring.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.consul.acl-token",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "store-gateway.sharding-ring.consul.client-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "store-gateway.sharding-ring.consul.consistent-reads",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "store-gateway.sharding-ring.consul.watch-rate-limit",
                      "fieldType": "float",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "store-gateway.sharding-ring.consul.watch-burst-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "cas_retry_delay",
                      "required": false,
                      "desc": "Maximum duration to wait before retrying a Compare And Swap (CAS) operation.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1000000000,
                      "fieldFlag": "store-gateway.sharding-ring.consul.cas-retry-delay",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "store-gateway.sharding-ring.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "store-gateway.sharding-ring.etcd.dial-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "store-gateway.sharding-ring.etcd.max-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-cert-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-key-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-ca-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-server-name",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cipher_suites",
                      "required": false,
                      "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-cipher-suites",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_min_version",
                      "required": false,
                      "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-min-version",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.multi.primary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.multi.secondary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "store-gateway.sharding-ring.multi.mirror-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "store-gateway.sharding-ring.multi.mirror-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to the ring. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "store-gateway.sharding-ring.heartbeat-period",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "heartbeat_timeout",
              "required": false,
              "desc": "The heartbeat timeout after which store gateways are considered unhealthy within the ring. 0 = never (timeout disabled). This option needs be set both on the store-gateway, querier and ruler when running in microservices mode.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "store-gateway.sharding-ring.heartbeat-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "replication_factor",
              "required": false,
              "desc": "The replication factor to use when sharding blocks. This option needs be set both on the store-gateway, querier and ruler when running in microservices mode.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "store-gateway.sharding-ring.replication-factor",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tokens_file_path",
              "required": false,
              "desc": "File path where tokens are stored. If empty, tokens are not stored at shutdown and restored at startup.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "store-gateway.sharding-ring.tokens-file-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "zone_awareness_enabled",
              "required": false,
              "desc": "True to enable zone-awareness and replicate blocks across different availability zones. This option needs be set both on the store-gateway, querier and ruler when running in microservices mode.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "store-gateway.sharding-ring.zone-awareness-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "wait_stability_min_duration",
              "required": false,
              "desc": "Minimum time to wait for ring stability at startup, if set to positive value.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "store-gateway.sharding-ring.wait-stability-min-duration",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "wait_stability_max_duration",
              "required": false,
              "desc": "Maximum time to wait for ring stability at startup. If the store-gateway ring keeps changing after this period of time, the store-gateway will start anyway.",
              "fieldValue": null,
              "fieldDefaultValue": 300000000000,
              "fieldFlag": "store-gateway.sharding-ring.wait-stability-max-duration",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_id",
              "required": false,
              "desc": "Instance ID to register in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "\u003chostname\u003e",
              "fieldFlag": "store-gateway.sharding-ring.instance-id",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_interface_names",
              "required": false,
              "desc": "List of network interface names to look up when finding the instance IP address.",
              "fieldValue": null,
              "fieldDefaultValue": [],
              "fieldFlag": "store-gateway.sharding-ring.instance-interface-names",
              "fieldType": "list of strings"
            },
            {
              "kind": "field",
              "name": "instance_port",
              "required": false,
              "desc": "Port to advertise in the ring (defaults to -server.grpc-listen-port).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "store-gateway.sharding-ring.instance-port",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_addr",
              "required": false,
              "desc": "IP address to advertise in the ring. Default is auto-detected.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "store-gateway.sharding-ring.instance-addr",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_availability_zone",
              "required": false,
              "desc": "The availability zone where this instance is running. Required if zone-awareness is enabled.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "store-gateway.sharding-ring.instance-availability-zone",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "unregister_on_shutdown",
              "required": false,
              "desc": "Unregister from the ring upon clean shutdown.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "store-gateway.sharding-ring.unregister-on-shutdown",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "tenant_federation",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "enabled",
          "required": false,
          "desc": "If enabled on all services, queries can be federated across multiple tenants. The tenant IDs involved need to be specified separated by a '|' character in the 'X-Scope-OrgID' header.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "tenant-federation.enabled",
          "fieldType": "boolean"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "activity_tracker",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "filepath",
          "required": false,
          "desc": "File where ongoing activities are stored. If empty, activity tracking is disabled.",
          "fieldValue": null,
          "fieldDefaultValue": "./metrics-activity.log",
          "fieldFlag": "activity-tracker.filepath",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "max_entries",
          "required": false,
          "desc": "Max number of concurrent activities that can be tracked. Used to size the file in advance. Additional activities are ignored.",
          "fieldValue": null,
          "fieldDefaultValue": 1024,
          "fieldFlag": "activity-tracker.max-entries",
          "fieldType": "int",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "ruler",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "external_url",
          "required": false,
          "desc": "URL of alerts return path.",
          "fieldValue": null,
          "fieldDefaultValue": {},
          "fieldFlag": "ruler.external.url",
          "fieldType": "url"
        },
        {
          "kind": "block",
          "name": "ruler_client",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_recv_msg_size",
              "required": false,
              "desc": "gRPC client max receive message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "ruler.client.grpc-max-recv-msg-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_send_msg_size",
              "required": false,
              "desc": "gRPC client max send message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "ruler.client.grpc-max-send-msg-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "grpc_compression",
              "required": false,
              "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.client.grpc-compression",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit",
              "required": false,
              "desc": "Rate limit for gRPC client; 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ruler.client.grpc-client-rate-limit",
              "fieldType": "float",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit_burst",
              "required": false,
              "desc": "Rate limit burst for gRPC client.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ruler.client.grpc-client-rate-limit-burst",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "backoff_on_ratelimits",
              "required": false,
              "desc": "Enable backoff and retry when we hit ratelimits.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler.client.backoff-on-ratelimits",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "backoff_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "min_period",
                  "required": false,
                  "desc": "Minimum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "ruler.client.backoff-min-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_period",
                  "required": false,
                  "desc": "Maximum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "ruler.client.backoff-max-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of times to backoff and retry before failing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "ruler.client.backoff-retries",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler.client.tls-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.client.tls-cert-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.client.tls-key-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.client.tls-ca-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.client.tls-server-name",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler.client.tls-insecure-skip-verify",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cipher_suites",
              "required": false,
              "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.client.tls-cipher-suites",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_min_version",
              "required": false,
              "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.client.tls-min-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "evaluation_interval",
          "required": false,
          "desc": "How frequently to evaluate rules",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ruler.evaluation-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "poll_interval",
          "required": false,
          "desc": "How frequently to poll for rule changes",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ruler.poll-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "rule_path",
          "required": false,
          "desc": "Directory to store temporary rule files loaded by the Prometheus rule managers. This directory is not required to be persisted between restarts.",
          "fieldValue": null,
          "fieldDefaultValue": "./data-ruler/",
          "fieldFlag": "ruler.rule-path",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "alertmanager_url",
          "required": false,
          "desc": "Comma-separated list of URL(s) of the Alertmanager(s) to send notifications to. Each URL is treated as a separate group. Multiple Alertmanagers in HA per group can be supported by using DNS service discovery format, comprehensive of the scheme. Basic auth is supported as part of the URL.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "ruler.alertmanager-url",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "alertmanager_refresh_interval",
          "required": false,
          "desc": "How long to wait between refreshing DNS resolutions of Alertmanager hosts.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ruler.alertmanager-refresh-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "notification_queue_capacity",
          "required": false,
          "desc": "Capacity of the queue for notifications to be sent to the Alertmanager.",
          "fieldValue": null,
          "fieldDefaultValue": 10000,
          "fieldFlag": "ruler.notification-queue-capacity",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "notification_timeout",
          "required": false,
          "desc": "HTTP timeout duration when sending notifications to the Alertmanager.",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "ruler.notification-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "alertmanager_client",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS for gRPC client connecting to alertmanager.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "ruler.alertmanager-client.tls-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.tls-cert-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.tls-key-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.tls-ca-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.tls-server-name",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler.alertmanager-client.tls-insecure-skip-verify",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cipher_suites",
              "required": false,
              "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.tls-cipher-suites",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_min_version",
              "required": false,
              "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.tls-min-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "basic_auth_username",
              "required": false,
              "desc": "HTTP Basic authentication username. It overrides the username set in the URL (if any).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.basic-auth-username",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "basic_auth_password",
              "required": false,
              "desc": "HTTP Basic authentication password. It overrides the password set in the URL (if any).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.basic-auth-password",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "for_outage_tolerance",
          "required": false,
          "desc": "Max time to tolerate outage for restoring \"for\" state of alert.",
          "fieldValue": null,
          "fieldDefaultValue": 3600000000000,
          "fieldFlag": "ruler.for-outage-tolerance",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "for_grace_period",
          "required": false,
          "desc": "This grace period controls which alerts the ruler restores after a restart. Alerts with \"for\" duration lower than this grace period are not restored after a ruler restart. This means that if the alerts have been firing before the ruler restarted, they will now go to pending state and then to firing again after their \"for\" duration expires. Alerts with \"for\" duration greater than or equal to this grace period that have been pending before the ruler restart will remain in pending state for at least this grace period. Alerts with \"for\" duration greater than or equal to this grace period that have been firing before the ruler restart will continue to be firing after the restart.",
          "fieldValue": null,
          "fieldDefaultValue": 120000000000,
          "fieldFlag": "ruler.for-grace-period",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "resend_delay",
          "required": false,
          "desc": "Minimum amount of time to wait before resending an alert to Alertmanager.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ruler.resend-delay",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "ring",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "memberlist",
                  "fieldFlag": "ruler.ring.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "rulers/",
                  "fieldFlag": "ruler.ring.prefix",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "ruler.ring.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.consul.acl-token",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "ruler.ring.consul.client-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ruler.ring.consul.consistent-reads",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "ruler.ring.consul.watch-rate-limit",
                      "fieldType": "float",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "ruler.ring.consul.watch-burst-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "cas_retry_delay",
                      "required": false,
                      "desc": "Maximum duration to wait before retrying a Compare And Swap (CAS) operation.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1000000000,
                      "fieldFlag": "ruler.ring.consul.cas-retry-delay",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "ruler.ring.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "ruler.ring.etcd.dial-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "ruler.ring.etcd.max-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ruler.ring.etcd.tls-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.tls-cert-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.tls-key-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.tls-ca-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.tls-server-name",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ruler.ring.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cipher_suites",
                      "required": false,
                      "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.tls-cipher-suites",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_min_version",
                      "required": false,
                      "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.tls-min-version",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.multi.primary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.multi.secondary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ruler.ring.multi.mirror-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "ruler.ring.multi.mirror-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to the ring. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "ruler.ring.heartbeat-period",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "heartbeat_timeout",
              "required": false,
              "desc": "The heartbeat timeout after which rulers are considered unhealthy within the ring. 0 = never (timeout disabled).",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "ruler.ring.heartbeat-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_id",
              "required": false,
              "desc": "Instance ID to register in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "\u003chostname\u003e",
              "fieldFlag": "ruler.ring.instance-id",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_interface_names",
              "required": false,
              "desc": "List of network interface names to look up when finding the instance IP address.",
              "fieldValue": null,
              "fieldDefaultValue": [],
              "fieldFlag": "ruler.ring.instance-interface-names",
              "fieldType": "list of strings"
            },
            {
              "kind": "field",
              "name": "instance_port",
              "required": false,
              "desc": "Port to advertise in the ring (defaults to -server.grpc-listen-port).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ruler.ring.instance-port",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_addr",
              "required": false,
              "desc": "IP address to advertise in the ring. Default is auto-detected.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.ring.instance-addr",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "num_tokens",
              "required": false,
              "desc": "Number of tokens for each ruler.",
              "fieldValue": null,
              "fieldDefaultValue": 128,
              "fieldFlag": "ruler.ring.num-tokens",
              "fieldType": "int",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "enable_api",
          "required": false,
          "desc": "Enable the ruler config API.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "ruler.enable-api",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "enabled_tenants",
          "required": false,
          "desc": "Comma separated list of tenants whose rules this ruler can evaluate. If specified, only these tenants will be handled by ruler, otherwise this ruler can process rules from all tenants. Subject to sharding.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "ruler.enabled-tenants",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "disabled_tenants",
          "required": false,
          "desc": "Comma separated list of tenants whose rules this ruler cannot evaluate. If specified, a ruler that would normally pick the specified tenant(s) for processing will ignore them instead. Subject to sharding.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "ruler.disabled-tenants",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "query_stats_enabled",
          "required": false,
          "desc": "Report the wall time for ruler queries to complete as a per-tenant metric and as an info level log message.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "ruler.query-stats-enabled",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "query_frontend",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "address",
              "required": false,
              "desc": "GRPC listen address of the query-frontend(s). Must be a DNS address (prefixed with dns:///) to enable client side load balancing.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.query-frontend.address",
              "fieldType": "string"
            },
            {
              "kind": "block",
              "name": "grpc_client_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "max_recv_msg_size",
                  "required": false,
                  "desc": "gRPC client max receive message size (bytes).",
                  "fieldValue": null,
                  "fieldDefaultValue": 104857600,
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.grpc-max-recv-msg-size",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_send_msg_size",
                  "required": false,
                  "desc": "gRPC client max send message size (bytes).",
                  "fieldValue": null,
                  "fieldDefaultValue": 104857600,
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.grpc-max-send-msg-size",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "grpc_compression",
                  "required": false,
                  "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.grpc-compression",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "rate_limit",
                  "required": false,
                  "desc": "Rate limit for gRPC client; 0 means disabled.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.grpc-client-rate-limit",
                  "fieldType": "float",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "rate_limit_burst",
                  "required": false,
                  "desc": "Rate limit burst for gRPC client.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.grpc-client-rate-limit-burst",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "backoff_on_ratelimits",
                  "required": false,
                  "desc": "Enable backoff and retry when we hit ratelimits.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.backoff-on-ratelimits",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "backoff_config",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "min_period",
                      "required": false,
                      "desc": "Minimum delay when backing off.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "ruler.query-frontend.grpc-client-config.backoff-min-period",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_period",
                      "required": false,
                      "desc": "Maximum delay when backing off.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "ruler.query-frontend.grpc-client-config.backoff-max-period",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "Number of times to backoff and retry before failing.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "ruler.query-frontend.grpc-client-config.backoff-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.query-frontend.grpc-client-config.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "auth_token",
              "required": false,
              "desc": "Enterprise authorization token to be used on remote rule evaluation.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.query-frontend.auth-token",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "tenant_federation",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enabled",
              "required": false,
              "desc": "Enable running rule groups against multiple tenants. The tenant IDs involved need to be in the rule group's 'source_tenants' field. If this flag is set to 'false' when there are already created federated rule groups, then these rules groups will be skipped during evaluations.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler.tenant-federation.enabled",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "remote_write",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "wal_dir",
              "required": false,
              "desc": "Directory to store WAL (for Ruler Remote Write).",
              "fieldValue": null,
              "fieldDefaultValue": "wal",
              "fieldFlag": "ruler.remote-write.wal-dir",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "enabled",
              "required": false,
              "desc": "Enable remote write rules for the Ruler.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler.remote-write.enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "wal_truncate_frequency",
              "required": false,
              "desc": "Frequency for truncating WAL",
              "fieldValue": null,
              "fieldDefaultValue": 3600000000000,
              "fieldFlag": "ruler.remote-write.wal-truncate-frequency",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "min_wal_time",
              "required": false,
              "desc": "Minimum time to stay in WAL",
              "fieldValue": null,
              "fieldDefaultValue": 300000000000,
              "fieldFlag": "ruler.remote-write.min-wal-time",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "max_wal_time",
              "required": false,
              "desc": "Maximum time to stay in WAL",
              "fieldValue": null,
              "fieldDefaultValue": 14400000000000,
              "fieldFlag": "ruler.remote-write.max-wal-time",
              "fieldType": "duration"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "ruler_storage",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "backend",
          "required": false,
          "desc": "Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem, local.",
          "fieldValue": null,
          "fieldDefaultValue": "filesystem",
          "fieldFlag": "ruler-storage.backend",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "s3",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "endpoint",
              "required": false,
              "desc": "The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.s3.endpoint",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region",
              "required": false,
              "desc": "S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.s3.region",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "S3 bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.s3.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "secret_access_key",
              "required": false,
              "desc": "S3 secret access key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.s3.secret-access-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "access_key_id",
              "required": false,
              "desc": "S3 access key ID",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.s3.access-key-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "insecure",
              "required": false,
              "desc": "If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler-storage.s3.insecure",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "signature_version",
              "required": false,
              "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
              "fieldValue": null,
              "fieldDefaultValue": "v4",
              "fieldFlag": "ruler-storage.s3.signature-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "sse",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "type",
                  "required": false,
                  "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler-storage.s3.sse.type",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_key_id",
                  "required": false,
                  "desc": "KMS Key ID used to encrypt objects in S3",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler-storage.s3.sse.kms-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_encryption_context",
                  "required": false,
                  "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler-storage.s3.sse.kms-encryption-context",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "http",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "idle_conn_timeout",
                  "required": false,
                  "desc": "The time an idle connection will remain idle before closing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 90000000000,
                  "fieldFlag": "ruler-storage.s3.http.idle-conn-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "response_header_timeout",
                  "required": false,
                  "desc": "The amount of time the client will wait for a servers response headers.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "ruler-storage.s3.http.response-header-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "insecure_skip_verify",
                  "required": false,
                  "desc": "If the client connects to S3 via HTTPS and this option is enabled, the client will accept any certificate and hostname.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "ruler-storage.s3.http.insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_handshake_timeout",
                  "required": false,
                  "desc": "Maximum time to wait for a TLS handshake. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "ruler-storage.s3.tls-handshake-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "expect_continue_timeout",
                  "required": false,
                  "desc": "The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1000000000,
                  "fieldFlag": "ruler-storage.s3.expect-continue-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "ruler-storage.s3.max-idle-connections",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "ruler-storage.s3.max-idle-connections-per-host",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of connections per host. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "ruler-storage.s3.max-connections-per-host",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "gcs",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "GCS bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.gcs.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "service_account",
              "required": false,
              "desc": "JSON either from a Google Developers Console client_credentials.json file, or a Google Developers service account key. Needs to be valid JSON, not a filesystem path. If empty, fallback to Google default logic:\n1. A JSON file whose path is specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable. For workload identity federation, refer to https://cloud.google.com/iam/docs/how-to#using-workload-identity-federation on how to generate the JSON configuration file for on-prem/non-Google cloud platforms.\n2. A JSON file in a location known to the gcloud command-line tool: $HOME/.config/gcloud/application_default_credentials.json.\n3. On Google Compute Engine it fetches credentials from the metadata server.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.gcs.service-account",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "azure",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "account_name",
              "required": false,
              "desc": "Azure storage account name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.azure.account-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "account_key",
              "required": false,
              "desc": "Azure storage account key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.azure.account-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Azure storage container name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.azure.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "endpoint_suffix",
              "required": false,
              "desc": "Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN. If set to empty string, default endpoint suffix is used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.azure.endpoint-suffix",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Number of retries for recoverable errors",
              "fieldValue": null,
              "fieldDefaultValue": 20,
              "fieldFlag": "ruler-storage.azure.max-retries",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "user_assigned_id",
              "required": false,
              "desc": "User assigned identity. If empty, then System assigned identity is used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.azure.user-assigned-id",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "swift",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "auth_version",
              "required": false,
              "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ruler-storage.swift.auth-version",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "auth_url",
              "required": false,
              "desc": "OpenStack Swift authentication URL",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.auth-url",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "username",
              "required": false,
              "desc": "OpenStack Swift username.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.username",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.user-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.user-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_id",
              "required": false,
              "desc": "OpenStack Swift user ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.user-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "password",
              "required": false,
              "desc": "OpenStack Swift API key.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.password",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_id",
              "required": false,
              "desc": "OpenStack Swift project ID (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.project-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_name",
              "required": false,
              "desc": "OpenStack Swift project name (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.project-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_id",
              "required": false,
              "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.project-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_name",
              "required": false,
              "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.project-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region_name",
              "required": false,
              "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.region-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Name of the OpenStack Swift container to put chunks in.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Max retries on requests error.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "ruler-storage.swift.max-retries",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "connect_timeout",
              "required": false,
              "desc": "Time after which a connection attempt is aborted.",
              "fieldValue": null,
              "fieldDefaultValue": 10000000000,
              "fieldFlag": "ruler-storage.swift.connect-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "request_timeout",
              "required": false,
              "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "ruler-storage.swift.request-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "filesystem",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "dir",
              "required": false,
              "desc": "Local filesystem storage directory.",
              "fieldValue": null,
              "fieldDefaultValue": "ruler",
              "fieldFlag": "ruler-storage.filesystem.dir",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "storage_prefix",
          "required": false,
          "desc": "Prefix for all objects stored in the backend storage. For simplicity, it may only contain digits and English alphabet letters.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "ruler-storage.storage-prefix",
          "fieldType": "string",
          "fieldCategory": "experimental"
        },
        {
          "kind": "block",
          "name": "local",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "directory",
              "required": false,
              "desc": "Directory to scan for rules",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.local.directory",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "alertmanager",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "data_dir",
          "required": false,
          "desc": "Directory to store Alertmanager state and temporarily configuration files. The content of this directory is not required to be persisted between restarts unless Alertmanager replication has been disabled.",
          "fieldValue": null,
          "fieldDefaultValue": "./data-alertmanager/",
          "fieldFlag": "alertmanager.storage.path",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "retention",
          "required": false,
          "desc": "How long should we store stateful data (notification logs and silences). For notification log entries, refers to how long should we keep entries before they expire and are deleted. For silences, refers to how long should tenants view silences after they expire and are deleted.",
          "fieldValue": null,
          "fieldDefaultValue": 432000000000000,
          "fieldFlag": "alertmanager.storage.retention",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "external_url",
          "required": false,
          "desc": "The URL under which Alertmanager is externally reachable (eg. could be different than -http.alertmanager-http-prefix in case Alertmanager is served via a reverse proxy). This setting is used both to configure the internal requests router and to generate links in alert templates. If the external URL has a path portion, it will be used to prefix all HTTP endpoints served by Alertmanager, both the UI and API.",
          "fieldValue": null,
          "fieldDefaultValue": {
            "Scheme": "http",
            "Opaque": "",
            "User": null,
            "Host": "localhost:8080",
            "Path": "/alertmanager",
            "RawPath": "",
            "OmitHost": false,
            "ForceQuery": false,
            "RawQuery": "",
            "Fragment": "",
            "RawFragment": ""
          },
          "fieldFlag": "alertmanager.web.external-url",
          "fieldType": "url"
        },
        {
          "kind": "field",
          "name": "poll_interval",
          "required": false,
          "desc": "How frequently to poll Alertmanager configs.",
          "fieldValue": null,
          "fieldDefaultValue": 15000000000,
          "fieldFlag": "alertmanager.configs.poll-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "max_recv_msg_size",
          "required": false,
          "desc": "Maximum size (bytes) of an accepted HTTP request body.",
          "fieldValue": null,
          "fieldDefaultValue": 104857600,
          "fieldFlag": "alertmanager.max-recv-msg-size",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "sharding_ring",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "memberlist",
                  "fieldFlag": "alertmanager.sharding-ring.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "alertmanagers/",
                  "fieldFlag": "alertmanager.sharding-ring.prefix",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "alertmanager.sharding-ring.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.consul.acl-token",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "alertmanager.sharding-ring.consul.client-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "alertmanager.sharding-ring.consul.consistent-reads",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "alertmanager.sharding-ring.consul.watch-rate-limit",
                      "fieldType": "float",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "alertmanager.sharding-ring.consul.watch-burst-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "cas_retry_delay",
                      "required": false,
                      "desc": "Maximum duration to wait before retrying a Compare And Swap (CAS) operation.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1000000000,
                      "fieldFlag": "alertmanager.sharding-ring.consul.cas-retry-delay",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "alertmanager.sharding-ring.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "alertmanager.sharding-ring.etcd.dial-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "alertmanager.sharding-ring.etcd.max-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-cert-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-key-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-ca-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-server-name",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cipher_suites",
                      "required": false,
                      "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-cipher-suites",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_min_version",
                      "required": false,
                      "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-min-version",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.multi.primary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.multi.secondary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "alertmanager.sharding-ring.multi.mirror-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "alertmanager.sharding-ring.multi.mirror-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to the ring. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "alertmanager.sharding-ring.heartbeat-period",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "heartbeat_timeout",
              "required": false,
              "desc": "The heartbeat timeout after which alertmanagers are considered unhealthy within the ring. 0 = never (timeout disabled).",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "alertmanager.sharding-ring.heartbeat-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "replication_factor",
              "required": false,
              "desc": "The replication factor to use when sharding the alertmanager.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "alertmanager.sharding-ring.replication-factor",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "zone_awareness_enabled",
              "required": false,
              "desc": "True to enable zone-awareness and replicate alerts across different availability zones.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "alertmanager.sharding-ring.zone-awareness-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_id",
              "required": false,
              "desc": "Instance ID to register in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "\u003chostname\u003e",
              "fieldFlag": "alertmanager.sharding-ring.instance-id",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_interface_names",
              "required": false,
              "desc": "List of network interface names to look up when finding the instance IP address.",
              "fieldValue": null,
              "fieldDefaultValue": [],
              "fieldFlag": "alertmanager.sharding-ring.instance-interface-names",
              "fieldType": "list of strings",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_port",
              "required": false,
              "desc": "Port to advertise in the ring (defaults to -server.grpc-listen-port).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "alertmanager.sharding-ring.instance-port",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_addr",
              "required": false,
              "desc": "IP address to advertise in the ring. Default is auto-detected.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.sharding-ring.instance-addr",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_availability_zone",
              "required": false,
              "desc": "The availability zone where this instance is running. Required if zone-awareness is enabled.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.sharding-ring.instance-availability-zone",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "fallback_config_file",
          "required": false,
          "desc": "Filename of fallback config to use if none specified for instance.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "alertmanager.configs.fallback",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "peer_timeout",
          "required": false,
          "desc": "Time to wait between peers to send notifications.",
          "fieldValue": null,
          "fieldDefaultValue": 15000000000,
          "fieldFlag": "alertmanager.peer-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "enable_api",
          "required": false,
          "desc": "Enable the alertmanager config API.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "alertmanager.enable-api",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "max_concurrent_get_requests_per_tenant",
          "required": false,
          "desc": "Maximum number of concurrent GET requests allowed per tenant. The zero value (and negative values) result in a limit of GOMAXPROCS or 8, whichever is larger. Status code 503 is served for GET requests that would exceed the concurrency limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-concurrent-get-requests-per-tenant",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "alertmanager_client",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "remote_timeout",
              "required": false,
              "desc": "Timeout for downstream alertmanagers.",
              "fieldValue": null,
              "fieldDefaultValue": 2000000000,
              "fieldFlag": "alertmanager.alertmanager-client.remote-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_recv_msg_size",
              "required": false,
              "desc": "gRPC client max receive message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "alertmanager.alertmanager-client.grpc-max-recv-msg-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_send_msg_size",
              "required": false,
              "desc": "gRPC client max send message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "alertmanager.alertmanager-client.grpc-max-send-msg-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "grpc_compression",
              "required": false,
              "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.alertmanager-client.grpc-compression",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit",
              "required": false,
              "desc": "Rate limit for gRPC client; 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "alertmanager.alertmanager-client.grpc-client-rate-limit",
              "fieldType": "float",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit_burst",
              "required": false,
              "desc": "Rate limit burst for gRPC client.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "alertmanager.alertmanager-client.grpc-client-rate-limit-burst",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "backoff_on_ratelimits",
              "required": false,
              "desc": "Enable backoff and retry when we hit ratelimits.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "alertmanager.alertmanager-client.backoff-on-ratelimits",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "backoff_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "min_period",
                  "required": false,
                  "desc": "Minimum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "alertmanager.alertmanager-client.backoff-min-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_period",
                  "required": false,
                  "desc": "Maximum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "alertmanager.alertmanager-client.backoff-max-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of times to backoff and retry before failing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "alertmanager.alertmanager-client.backoff-retries",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "alertmanager.alertmanager-client.tls-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.alertmanager-client.tls-cert-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.alertmanager-client.tls-key-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.alertmanager-client.tls-ca-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.alertmanager-client.tls-server-name",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "alertmanager.alertmanager-client.tls-insecure-skip-verify",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cipher_suites",
              "required": false,
              "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.alertmanager-client.tls-cipher-suites",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_min_version",
              "required": false,
              "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.alertmanager-client.tls-min-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "persist_interval",
          "required": false,
          "desc": "The interval between persisting the current alertmanager state (notification log and silences) to object storage. This is only used when sharding is enabled. This state is read when all replicas for a shard can not be contacted. In this scenario, having persisted the state more frequently will result in potentially fewer lost silences, and fewer duplicate notifications.",
          "fieldValue": null,
          "fieldDefaultValue": 900000000000,
          "fieldFlag": "alertmanager.persist-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "alertmanager_storage",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "backend",
          "required": false,
          "desc": "Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem, local.",
          "fieldValue": null,
          "fieldDefaultValue": "filesystem",
          "fieldFlag": "alertmanager-storage.backend",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "s3",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "endpoint",
              "required": false,
              "desc": "The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.s3.endpoint",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region",
              "required": false,
              "desc": "S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.s3.region",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "S3 bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.s3.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "secret_access_key",
              "required": false,
              "desc": "S3 secret access key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.s3.secret-access-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "access_key_id",
              "required": false,
              "desc": "S3 access key ID",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.s3.access-key-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "insecure",
              "required": false,
              "desc": "If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "alertmanager-storage.s3.insecure",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "signature_version",
              "required": false,
              "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
              "fieldValue": null,
              "fieldDefaultValue": "v4",
              "fieldFlag": "alertmanager-storage.s3.signature-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "sse",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "type",
                  "required": false,
                  "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager-storage.s3.sse.type",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_key_id",
                  "required": false,
                  "desc": "KMS Key ID used to encrypt objects in S3",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager-storage.s3.sse.kms-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_encryption_context",
                  "required": false,
                  "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager-storage.s3.sse.kms-encryption-context",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "http",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "idle_conn_timeout",
                  "required": false,
                  "desc": "The time an idle connection will remain idle before closing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 90000000000,
                  "fieldFlag": "alertmanager-storage.s3.http.idle-conn-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "response_header_timeout",
                  "required": false,
                  "desc": "The amount of time the client will wait for a servers response headers.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "alertmanager-storage.s3.http.response-header-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "insecure_skip_verify",
                  "required": false,
                  "desc": "If the client connects to S3 via HTTPS and this option is enabled, the client will accept any certificate and hostname.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "alertmanager-storage.s3.http.insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_handshake_timeout",
                  "required": false,
                  "desc": "Maximum time to wait for a TLS handshake. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "alertmanager-storage.s3.tls-handshake-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "expect_continue_timeout",
                  "required": false,
                  "desc": "The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1000000000,
                  "fieldFlag": "alertmanager-storage.s3.expect-continue-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "alertmanager-storage.s3.max-idle-connections",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "alertmanager-storage.s3.max-idle-connections-per-host",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of connections per host. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "alertmanager-storage.s3.max-connections-per-host",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "gcs",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "GCS bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.gcs.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "service_account",
              "required": false,
              "desc": "JSON either from a Google Developers Console client_credentials.json file, or a Google Developers service account key. Needs to be valid JSON, not a filesystem path. If empty, fallback to Google default logic:\n1. A JSON file whose path is specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable. For workload identity federation, refer to https://cloud.google.com/iam/docs/how-to#using-workload-identity-federation on how to generate the JSON configuration file for on-prem/non-Google cloud platforms.\n2. A JSON file in a location known to the gcloud command-line tool: $HOME/.config/gcloud/application_default_credentials.json.\n3. On Google Compute Engine it fetches credentials from the metadata server.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.gcs.service-account",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "azure",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "account_name",
              "required": false,
              "desc": "Azure storage account name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.azure.account-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "account_key",
              "required": false,
              "desc": "Azure storage account key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.azure.account-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Azure storage container name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.azure.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "endpoint_suffix",
              "required": false,
              "desc": "Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN. If set to empty string, default endpoint suffix is used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.azure.endpoint-suffix",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Number of retries for recoverable errors",
              "fieldValue": null,
              "fieldDefaultValue": 20,
              "fieldFlag": "alertmanager-storage.azure.max-retries",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "user_assigned_id",
              "required": false,
              "desc": "User assigned identity. If empty, then System assigned identity is used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.azure.user-assigned-id",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "swift",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "auth_version",
              "required": false,
              "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "alertmanager-storage.swift.auth-version",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "auth_url",
              "required": false,
              "desc": "OpenStack Swift authentication URL",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.auth-url",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "username",
              "required": false,
              "desc": "OpenStack Swift username.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.username",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.user-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.user-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_id",
              "required": false,
              "desc": "OpenStack Swift user ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.user-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "password",
              "required": false,
              "desc": "OpenStack Swift API key.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.password",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_id",
              "required": false,
              "desc": "OpenStack Swift project ID (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.project-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_name",
              "required": false,
              "desc": "OpenStack Swift project name (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.project-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_id",
              "required": false,
              "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.project-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_name",
              "required": false,
              "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.project-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region_name",
              "required": false,
              "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.region-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Name of the OpenStack Swift container to put chunks in.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Max retries on requests error.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "alertmanager-storage.swift.max-retries",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "connect_timeout",
              "required": false,
              "desc": "Time after which a connection attempt is aborted.",
              "fieldValue": null,
              "fieldDefaultValue": 10000000000,
              "fieldFlag": "alertmanager-storage.swift.connect-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "request_timeout",
              "required": false,
              "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "alertmanager-storage.swift.request-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "filesystem",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "dir",
              "required": false,
              "desc": "Local filesystem storage directory.",
              "fieldValue": null,
              "fieldDefaultValue": "alertmanager",
              "fieldFlag": "alertmanager-storage.filesystem.dir",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "storage_prefix",
          "required": false,
          "desc": "Prefix for all objects stored in the backend storage. For simplicity, it may only contain digits and English alphabet letters.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "alertmanager-storage.storage-prefix",
          "fieldType": "string",
          "fieldCategory": "experimental"
        },
        {
          "kind": "block",
          "name": "local",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "path",
              "required": false,
              "desc": "Path at which alertmanager configurations are stored.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.local.path",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "runtime_config",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "period",
          "required": false,
          "desc": "How often to check runtime config files.",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "runtime-config.reload-period",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "file",
          "required": false,
          "desc": "Comma separated list of yaml files with the configuration that can be updated at runtime. Runtime config files will be merged from left to right.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "runtime-config.file",
          "fieldType": "string"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "memberlist",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "node_name",
          "required": false,
          "desc": "Name of the node in memberlist cluster. Defaults to hostname.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.nodename",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "randomize_node_name",
          "required": false,
          "desc": "Add random suffix to the node name.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "memberlist.randomize-node-name",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "stream_timeout",
          "required": false,
          "desc": "The timeout for establishing a connection with a remote node, and for read/write operations.",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "memberlist.stream-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "retransmit_factor",
          "required": false,
          "desc": "Multiplication factor used when sending out messages (factor * log(N+1)).",
          "fieldValue": null,
          "fieldDefaultValue": 4,
          "fieldFlag": "memberlist.retransmit-factor",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "pull_push_interval",
          "required": false,
          "desc": "How often to use pull/push sync.",
          "fieldValue": null,
          "fieldDefaultValue": 30000000000,
          "fieldFlag": "memberlist.pullpush-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "gossip_interval",
          "required": false,
          "desc": "How often to gossip.",
          "fieldValue": null,
          "fieldDefaultValue": 200000000,
          "fieldFlag": "memberlist.gossip-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "gossip_nodes",
          "required": false,
          "desc": "How many nodes to gossip to.",
          "fieldValue": null,
          "fieldDefaultValue": 3,
          "fieldFlag": "memberlist.gossip-nodes",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "gossip_to_dead_nodes_time",
          "required": false,
          "desc": "How long to keep gossiping to dead nodes, to give them chance to refute their death.",
          "fieldValue": null,
          "fieldDefaultValue": 30000000000,
          "fieldFlag": "memberlist.gossip-to-dead-nodes-time",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "dead_node_reclaim_time",
          "required": false,
          "desc": "How soon can dead node's name be reclaimed with new address. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "memberlist.dead-node-reclaim-time",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "compression_enabled",
          "required": false,
          "desc": "Enable message compression. This can be used to reduce bandwidth usage at the cost of slightly more CPU utilization.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "memberlist.compression-enabled",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "advertise_addr",
          "required": false,
          "desc": "Gossip address to advertise to other members in the cluster. Used for NAT traversal.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.advertise-addr",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "advertise_port",
          "required": false,
          "desc": "Gossip port to advertise to other members in the cluster. Used for NAT traversal.",
          "fieldValue": null,
          "fieldDefaultValue": 7946,
          "fieldFlag": "memberlist.advertise-port",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "cluster_label",
          "required": false,
          "desc": "The cluster label is an optional string to include in outbound packets and gossip streams. Other members in the memberlist cluster will discard any message whose label doesn't match the configured one, unless the 'cluster-label-verification-disabled' configuration option is set to true.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.cluster-label",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "cluster_label_verification_disabled",
          "required": false,
          "desc": "When true, memberlist doesn't verify that inbound packets and gossip streams have the cluster label matching the configured one. This verification should be disabled while rolling out the change to the configured cluster label in a live memberlist cluster.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "memberlist.cluster-label-verification-disabled",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "join_members",
          "required": false,
          "desc": "Other cluster members to join. Can be specified multiple times. It can be an IP, hostname or an entry specified in the DNS Service Discovery format.",
          "fieldValue": null,
          "fieldDefaultValue": [],
          "fieldFlag": "memberlist.join",
          "fieldType": "list of strings"
        },
        {
          "kind": "field",
          "name": "min_join_backoff",
          "required": false,
          "desc": "Min backoff duration to join other cluster members.",
          "fieldValue": null,
          "fieldDefaultValue": 1000000000,
          "fieldFlag": "memberlist.min-join-backoff",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "max_join_backoff",
          "required": false,
          "desc": "Max backoff duration to join other cluster members.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "memberlist.max-join-backoff",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "max_join_retries",
          "required": false,
          "desc": "Max number of retries to join other cluster members.",
          "fieldValue": null,
          "fieldDefaultValue": 10,
          "fieldFlag": "memberlist.max-join-retries",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "abort_if_cluster_join_fails",
          "required": false,
          "desc": "If this node fails to join memberlist cluster, abort.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "memberlist.abort-if-join-fails",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "rejoin_interval",
          "required": false,
          "desc": "If not 0, how often to rejoin the cluster. Occasional rejoin can help to fix the cluster split issue, and is harmless otherwise. For example when using only few components as a seed nodes (via -memberlist.join), then it's recommended to use rejoin. If -memberlist.join points to dynamic service that resolves to all gossiping nodes (eg. Kubernetes headless service), then rejoin is not needed.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "memberlist.rejoin-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "left_ingesters_timeout",
          "required": false,
          "desc": "How long to keep LEFT ingesters in the ring.",
          "fieldValue": null,
          "fieldDefaultValue": 300000000000,
          "fieldFlag": "memberlist.left-ingesters-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "leave_timeout",
          "required": false,
          "desc": "Timeout for leaving memberlist cluster.",
          "fieldValue": null,
          "fieldDefaultValue": 20000000000,
          "fieldFlag": "memberlist.leave-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "message_history_buffer_bytes",
          "required": false,
          "desc": "How much space to use for keeping received and sent messages in memory for troubleshooting (two buffers). 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "memberlist.message-history-buffer-bytes",
          "fieldType": "int",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "bind_addr",
          "required": false,
          "desc": "IP address to listen on for gossip messages. Multiple addresses may be specified. Defaults to 0.0.0.0",
          "fieldValue": null,
          "fieldDefaultValue": [],
          "fieldFlag": "memberlist.bind-addr",
          "fieldType": "list of strings"
        },
        {
          "kind": "field",
          "name": "bind_port",
          "required": false,
          "desc": "Port to listen on for gossip messages.",
          "fieldValue": null,
          "fieldDefaultValue": 7946,
          "fieldFlag": "memberlist.bind-port",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "packet_dial_timeout",
          "required": false,
          "desc": "Timeout used when connecting to other nodes to send packet.",
          "fieldValue": null,
          "fieldDefaultValue": 2000000000,
          "fieldFlag": "memberlist.packet-dial-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "packet_write_timeout",
          "required": false,
          "desc": "Timeout for writing 'packet' data.",
          "fieldValue": null,
          "fieldDefaultValue": 5000000000,
          "fieldFlag": "memberlist.packet-write-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "tls_enabled",
          "required": false,
          "desc": "Enable TLS on the memberlist transport layer.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "memberlist.tls-enabled",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "tls_cert_path",
          "required": false,
          "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.tls-cert-path",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "tls_key_path",
          "required": false,
          "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.tls-key-path",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "tls_ca_path",
          "required": false,
          "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.tls-ca-path",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "tls_server_name",
          "required": false,
          "desc": "Override the expected name on the server certificate.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.tls-server-name",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "tls_insecure_skip_verify",
          "required": false,
          "desc": "Skip validating server certificate.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "memberlist.tls-insecure-skip-verify",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "tls_cipher_suites",
          "required": false,
          "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.tls-cipher-suites",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "tls_min_version",
          "required": false,
          "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.tls-min-version",
          "fieldType": "string",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "query_scheduler",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "max_outstanding_requests_per_tenant",
          "required": false,
          "desc": "Maximum number of outstanding requests per tenant per query-scheduler. In-flight requests above this limit will fail with HTTP response status code 429.",
          "fieldValue": null,
          "fieldDefaultValue": 100,
          "fieldFlag": "query-scheduler.max-outstanding-requests-per-tenant",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "querier_forget_delay",
          "required": false,
          "desc": "If a querier disconnects without sending notification about graceful shutdown, the query-scheduler will keep the querier in the tenant's shard until the forget delay has passed. This feature is useful to reduce the blast radius when shuffle-sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "query-scheduler.querier-forget-delay",
          "fieldType": "duration",
          "fieldCategory": "experimental"
        },
        {
          "kind": "block",
          "name": "grpc_client_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_recv_msg_size",
              "required": false,
              "desc": "gRPC client max receive message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "query-scheduler.grpc-client-config.grpc-max-recv-msg-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_send_msg_size",
              "required": false,
              "desc": "gRPC client max send message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "query-scheduler.grpc-client-config.grpc-max-send-msg-size",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "grpc_compression",
              "required": false,
              "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.grpc-client-config.grpc-compression",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit",
              "required": false,
              "desc": "Rate limit for gRPC client; 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "query-scheduler.grpc-client-config.grpc-client-rate-limit",
              "fieldType": "float",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit_burst",
              "required": false,
              "desc": "Rate limit burst for gRPC client.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "query-scheduler.grpc-client-config.grpc-client-rate-limit-burst",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "backoff_on_ratelimits",
              "required": false,
              "desc": "Enable backoff and retry when we hit ratelimits.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "query-scheduler.grpc-client-config.backoff-on-ratelimits",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "backoff_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "min_period",
                  "required": false,
                  "desc": "Minimum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "query-scheduler.grpc-client-config.backoff-min-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_period",
                  "required": false,
                  "desc": "Maximum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "query-scheduler.grpc-client-config.backoff-max-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of times to backoff and retry before failing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "query-scheduler.grpc-client-config.backoff-retries",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "query-scheduler.grpc-client-config.tls-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.grpc-client-config.tls-cert-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.grpc-client-config.tls-key-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.grpc-client-config.tls-ca-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.grpc-client-config.tls-server-name",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "query-scheduler.grpc-client-config.tls-insecure-skip-verify",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cipher_suites",
              "required": false,
              "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.grpc-client-config.tls-cipher-suites",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_min_version",
              "required": false,
              "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.grpc-client-config.tls-min-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "service_discovery_mode",
          "required": false,
          "desc": "Service discovery mode that query-frontends and queriers use to find query-scheduler instances. When query-scheduler ring-based service discovery is enabled, this option needs be set on query-schedulers, query-frontends and queriers. Supported values are: dns, ring.",
          "fieldValue": null,
          "fieldDefaultValue": "dns",
          "fieldFlag": "query-scheduler.service-discovery-mode",
          "fieldType": "string",
          "fieldCategory": "experimental"
        },
        {
          "kind": "block",
          "name": "ring",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "memberlist",
                  "fieldFlag": "query-scheduler.ring.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "collectors/",
                  "fieldFlag": "query-scheduler.ring.prefix",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "query-scheduler.ring.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "query-scheduler.ring.consul.acl-token",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "query-scheduler.ring.consul.client-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "query-scheduler.ring.consul.consistent-reads",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "query-scheduler.ring.consul.watch-rate-limit",
                      "fieldType": "float",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "query-scheduler.ring.consul.watch-burst-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "cas_retry_delay",
                      "required": false,
                      "desc": "Maximum duration to wait before retrying a Compare And Swap (CAS) operation.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1000000000,
                      "fieldFlag": "query-scheduler.ring.consul.cas-retry-delay",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "query-scheduler.ring.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "query-scheduler.ring.etcd.dial-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "query-scheduler.ring.etcd.max-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "query-scheduler.ring.etcd.tls-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "query-scheduler.ring.etcd.tls-cert-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "query-scheduler.ring.etcd.tls-key-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "query-scheduler.ring.etcd.tls-ca-path",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "query-scheduler.ring.etcd.tls-server-name",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "query-scheduler.ring.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cipher_suites",
                      "required": false,
                      "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "query-scheduler.ring.etcd.tls-cipher-suites",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_min_version",
                      "required": false,
                      "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "query-scheduler.ring.etcd.tls-min-version",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "query-scheduler.ring.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "query-scheduler.ring.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "query-scheduler.ring.multi.primary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "query-scheduler.ring.multi.secondary",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "query-scheduler.ring.multi.mirror-enabled",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "query-scheduler.ring.multi.mirror-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to the ring. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "query-scheduler.ring.heartbeat-period",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "heartbeat_timeout",
              "required": false,
              "desc": "The heartbeat timeout after which query-schedulers are considered unhealthy within the ring. When query-scheduler ring-based service discovery is enabled, this option needs be set on query-schedulers, query-frontends and queriers.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "query-scheduler.ring.heartbeat-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_id",
              "required": false,
              "desc": "Instance ID to register in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "\u003chostname\u003e",
              "fieldFlag": "query-scheduler.ring.instance-id",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_interface_names",
              "required": false,
              "desc": "List of network interface names to look up when finding the instance IP address.",
              "fieldValue": null,
              "fieldDefaultValue": [],
              "fieldFlag": "query-scheduler.ring.instance-interface-names",
              "fieldType": "list of strings"
            },
            {
              "kind": "field",
              "name": "instance_port",
              "required": false,
              "desc": "Port to advertise in the ring (defaults to -server.grpc-listen-port).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "query-scheduler.ring.instance-port",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "instance_addr",
              "required": false,
              "desc": "IP address to advertise in the ring. Default is auto-detected.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.ring.instance-addr",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "max_used_instances",
          "required": false,
          "desc": "The maximum number of query-scheduler instances to use, regardless how many replicas are running. This option can be set only when -query-scheduler.service-discovery-mode is set to 'ring'. 0 to use all available query-scheduler instances.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "query-scheduler.max-used-instances",
          "fieldType": "int",
          "fieldCategory": "experimental"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "usage_stats",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "enabled",
          "required": false,
          "desc": "Enable anonymous usage reporting.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "usage-stats.enabled",
          "fieldType": "boolean",
          "fieldCategory": "experimental"
        },
        {
          "kind": "field",
          "name": "installation_mode",
          "required": false,
          "desc": "Installation mode. Supported values: custom, helm, jsonnet.",
          "fieldValue": null,
          "fieldDefaultValue": "custom",
          "fieldFlag": "usage-stats.installation-mode",
          "fieldType": "string",
          "fieldCategory": "experimental"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "common",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "storage",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "backend",
              "required": false,
              "desc": "Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem.",
              "fieldValue": null,
              "fieldDefaultValue": "filesystem",
              "fieldFlag": "common.storage.backend",
              "fieldType": "string"
            },
            {
              "kind": "block",
              "name": "s3",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "endpoint",
                  "required": false,
                  "desc": "The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.s3.endpoint",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "region",
                  "required": false,
                  "desc": "S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.s3.region",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "bucket_name",
                  "required": false,
                  "desc": "S3 bucket name",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.s3.bucket-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "secret_access_key",
                  "required": false,
                  "desc": "S3 secret access key",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.s3.secret-access-key",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "access_key_id",
                  "required": false,
                  "desc": "S3 access key ID",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.s3.access-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "insecure",
                  "required": false,
                  "desc": "If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "common.storage.s3.insecure",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "signature_version",
                  "required": false,
                  "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
                  "fieldValue": null,
                  "fieldDefaultValue": "v4",
                  "fieldFlag": "common.storage.s3.signature-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "sse",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "type",
                      "required": false,
                      "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "common.storage.s3.sse.type",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "kms_key_id",
                      "required": false,
                      "desc": "KMS Key ID used to encrypt objects in S3",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "common.storage.s3.sse.kms-key-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "kms_encryption_context",
                      "required": false,
                      "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "common.storage.s3.sse.kms-encryption-context",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "http",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "idle_conn_timeout",
                      "required": false,
                      "desc": "The time an idle connection will remain idle before closing.",
                      "fieldValue": null,
                      "fieldDefaultValue": 90000000000,
                      "fieldFlag": "common.storage.s3.http.idle-conn-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "response_header_timeout",
                      "required": false,
                      "desc": "The amount of time the client will wait for a servers response headers.",
                      "fieldValue": null,
                      "fieldDefaultValue": 120000000000,
                      "fieldFlag": "common.storage.s3.http.response-header-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "insecure_skip_verify",
                      "required": false,
                      "desc": "If the client connects to S3 via HTTPS and this option is enabled, the client will accept any certificate and hostname.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "common.storage.s3.http.insecure-skip-verify",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_handshake_timeout",
                      "required": false,
                      "desc": "Maximum time to wait for a TLS handshake. 0 means no limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "common.storage.s3.tls-handshake-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "expect_continue_timeout",
                      "required": false,
                      "desc": "The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1000000000,
                      "fieldFlag": "common.storage.s3.expect-continue-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections",
                      "required": false,
                      "desc": "Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "common.storage.s3.max-idle-connections",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections_per_host",
                      "required": false,
                      "desc": "Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "common.storage.s3.max-idle-connections-per-host",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_connections_per_host",
                      "required": false,
                      "desc": "Maximum number of connections per host. 0 means no limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "common.storage.s3.max-connections-per-host",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "gcs",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "bucket_name",
                  "required": false,
                  "desc": "GCS bucket name",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.gcs.bucket-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "service_account",
                  "required": false,
                  "desc": "JSON either from a Google Developers Console client_credentials.json file, or a Google Developers service account key. Needs to be valid JSON, not a filesystem path. If empty, fallback to Google default logic:\n1. A JSON file whose path is specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable. For workload identity federation, refer to https://cloud.google.com/iam/docs/how-to#using-workload-identity-federation on how to generate the JSON configuration file for on-prem/non-Google cloud platforms.\n2. A JSON file in a location known to the gcloud command-line tool: $HOME/.config/gcloud/application_default_credentials.json.\n3. On Google Compute Engine it fetches credentials from the metadata server.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.gcs.service-account",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "azure",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "account_name",
                  "required": false,
                  "desc": "Azure storage account name",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.azure.account-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "account_key",
                  "required": false,
                  "desc": "Azure storage account key",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.azure.account-key",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "container_name",
                  "required": false,
                  "desc": "Azure storage container name",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.azure.container-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "endpoint_suffix",
                  "required": false,
                  "desc": "Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN. If set to empty string, default endpoint suffix is used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.azure.endpoint-suffix",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of retries for recoverable errors",
                  "fieldValue": null,
                  "fieldDefaultValue": 20,
                  "fieldFlag": "common.storage.azure.max-retries",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "user_assigned_id",
                  "required": false,
                  "desc": "User assigned identity. If empty, then System assigned identity is used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.azure.user-assigned-id",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "swift",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "auth_version",
                  "required": false,
                  "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "common.storage.swift.auth-version",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "auth_url",
                  "required": false,
                  "desc": "OpenStack Swift authentication URL",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.auth-url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "username",
                  "required": false,
                  "desc": "OpenStack Swift username.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.username",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "user_domain_name",
                  "required": false,
                  "desc": "OpenStack Swift user's domain name.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.user-domain-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "user_domain_id",
                  "required": false,
                  "desc": "OpenStack Swift user's domain ID.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.user-domain-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "user_id",
                  "required": false,
                  "desc": "OpenStack Swift user ID.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.user-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "password",
                  "required": false,
                  "desc": "OpenStack Swift API key.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.password",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "domain_id",
                  "required": false,
                  "desc": "OpenStack Swift user's domain ID.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.domain-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "domain_name",
                  "required": false,
                  "desc": "OpenStack Swift user's domain name.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.domain-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "project_id",
                  "required": false,
                  "desc": "OpenStack Swift project ID (v2,v3 auth only).",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.project-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "project_name",
                  "required": false,
                  "desc": "OpenStack Swift project name (v2,v3 auth only).",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.project-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "project_domain_id",
                  "required": false,
                  "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.project-domain-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "project_domain_name",
                  "required": false,
                  "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.project-domain-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "region_name",
                  "required": false,
                  "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.region-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "container_name",
                  "required": false,
                  "desc": "Name of the OpenStack Swift container to put chunks in.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.swift.container-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Max retries on requests error.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3,
                  "fieldFlag": "common.storage.swift.max-retries",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "connect_timeout",
                  "required": false,
                  "desc": "Time after which a connection attempt is aborted.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "common.storage.swift.connect-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "request_timeout",
                  "required": false,
                  "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "common.storage.swift.request-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "filesystem",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "dir",
                  "required": false,
                  "desc": "Local filesystem storage directory.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "common.storage.filesystem.dir",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "admin_api",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "user_header_name",
          "required": false,
          "desc": "Designated header to parse when searching for the grafana user ID of the user accessing the API.",
          "fieldValue": null,
          "fieldDefaultValue": "X-WEBAUTH-USER",
          "fieldFlag": "admin.api.user-header-name",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "leader_election",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enabled",
              "required": false,
              "desc": "This flag enables leader election for the admin api.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "admin-api.leader-election.enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "ring",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "block",
                  "name": "kvstore",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "store",
                      "required": false,
                      "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                      "fieldValue": null,
                      "fieldDefaultValue": "consul",
                      "fieldFlag": "admin-api.leader-election.ring.store",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "prefix",
                      "required": false,
                      "desc": "The prefix for the keys in the store. Should end with a /.",
                      "fieldValue": null,
                      "fieldDefaultValue": "leader-election/",
                      "fieldFlag": "admin-api.leader-election.ring.prefix",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "block",
                      "name": "consul",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "host",
                          "required": false,
                          "desc": "Hostname and port of Consul.",
                          "fieldValue": null,
                          "fieldDefaultValue": "localhost:8500",
                          "fieldFlag": "admin-api.leader-election.ring.consul.hostname",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "acl_token",
                          "required": false,
                          "desc": "ACL Token used to interact with Consul.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.consul.acl-token",
                          "fieldType": "string",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "http_client_timeout",
                          "required": false,
                          "desc": "HTTP timeout when talking to Consul",
                          "fieldValue": null,
                          "fieldDefaultValue": 20000000000,
                          "fieldFlag": "admin-api.leader-election.ring.consul.client-timeout",
                          "fieldType": "duration",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "consistent_reads",
                          "required": false,
                          "desc": "Enable consistent reads to Consul.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "admin-api.leader-election.ring.consul.consistent-reads",
                          "fieldType": "boolean",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "watch_rate_limit",
                          "required": false,
                          "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                          "fieldValue": null,
                          "fieldDefaultValue": 1,
                          "fieldFlag": "admin-api.leader-election.ring.consul.watch-rate-limit",
                          "fieldType": "float",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "watch_burst_size",
                          "required": false,
                          "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                          "fieldValue": null,
                          "fieldDefaultValue": 1,
                          "fieldFlag": "admin-api.leader-election.ring.consul.watch-burst-size",
                          "fieldType": "int",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "cas_retry_delay",
                          "required": false,
                          "desc": "Maximum duration to wait before retrying a Compare And Swap (CAS) operation.",
                          "fieldValue": null,
                          "fieldDefaultValue": 1000000000,
                          "fieldFlag": "admin-api.leader-election.ring.consul.cas-retry-delay",
                          "fieldType": "duration",
                          "fieldCategory": "advanced"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    },
                    {
                      "kind": "block",
                      "name": "etcd",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "endpoints",
                          "required": false,
                          "desc": "The etcd endpoints to connect to.",
                          "fieldValue": null,
                          "fieldDefaultValue": [],
                          "fieldFlag": "admin-api.leader-election.ring.etcd.endpoints",
                          "fieldType": "list of strings"
                        },
                        {
                          "kind": "field",
                          "name": "dial_timeout",
                          "required": false,
                          "desc": "The dial timeout for the etcd connection.",
                          "fieldValue": null,
                          "fieldDefaultValue": 10000000000,
                          "fieldFlag": "admin-api.leader-election.ring.etcd.dial-timeout",
                          "fieldType": "duration",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "max_retries",
                          "required": false,
                          "desc": "The maximum number of retries to do for failed ops.",
                          "fieldValue": null,
                          "fieldDefaultValue": 10,
                          "fieldFlag": "admin-api.leader-election.ring.etcd.max-retries",
                          "fieldType": "int",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "tls_enabled",
                          "required": false,
                          "desc": "Enable TLS.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-enabled",
                          "fieldType": "boolean",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "tls_cert_path",
                          "required": false,
                          "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-cert-path",
                          "fieldType": "string",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "tls_key_path",
                          "required": false,
                          "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-key-path",
                          "fieldType": "string",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "tls_ca_path",
                          "required": false,
                          "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-ca-path",
                          "fieldType": "string",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "tls_server_name",
                          "required": false,
                          "desc": "Override the expected name on the server certificate.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-server-name",
                          "fieldType": "string",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "tls_insecure_skip_verify",
                          "required": false,
                          "desc": "Skip validating server certificate.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-insecure-skip-verify",
                          "fieldType": "boolean",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "tls_cipher_suites",
                          "required": false,
                          "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-cipher-suites",
                          "fieldType": "string",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "tls_min_version",
                          "required": false,
                          "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-min-version",
                          "fieldType": "string",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "username",
                          "required": false,
                          "desc": "Etcd username.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.username",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "password",
                          "required": false,
                          "desc": "Etcd password.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.password",
                          "fieldType": "string"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    },
                    {
                      "kind": "block",
                      "name": "multi",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "primary",
                          "required": false,
                          "desc": "Primary backend storage used by multi-client.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.multi.primary",
                          "fieldType": "string",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "secondary",
                          "required": false,
                          "desc": "Secondary backend storage used by multi-client.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.multi.secondary",
                          "fieldType": "string",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "mirror_enabled",
                          "required": false,
                          "desc": "Mirror writes to secondary store.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "admin-api.leader-election.ring.multi.mirror-enabled",
                          "fieldType": "boolean",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "mirror_timeout",
                          "required": false,
                          "desc": "Timeout for storing value to secondary store.",
                          "fieldValue": null,
                          "fieldDefaultValue": 2000000000,
                          "fieldFlag": "admin-api.leader-election.ring.multi.mirror-timeout",
                          "fieldType": "duration",
                          "fieldCategory": "advanced"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "heartbeat_period",
                  "required": false,
                  "desc": "Period at which to heartbeat to the ring.",
                  "fieldValue": null,
                  "fieldDefaultValue": 15000000000,
                  "fieldFlag": "admin-api.leader-election.ring.heartbeat-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "heartbeat_timeout",
                  "required": false,
                  "desc": "The heartbeat timeout after which admin-api instances are considered unhealthy within the ring.",
                  "fieldValue": null,
                  "fieldDefaultValue": 60000000000,
                  "fieldFlag": "admin-api.leader-election.ring.heartbeat-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tokens_observe_period",
                  "required": false,
                  "desc": "Period to wait after generating tokens to resolve collisions. Required when using a gossip ring KV store.",
                  "fieldValue": null,
                  "fieldDefaultValue": 60000000000,
                  "fieldFlag": "admin-api.leader-election.ring.tokens-observe-period",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "instance_id",
                  "required": false,
                  "desc": "Instance ID to register in the ring.",
                  "fieldValue": null,
                  "fieldDefaultValue": "\u003chostname\u003e",
                  "fieldFlag": "admin-api.leader-election.ring.instance-id",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "instance_interface_names",
                  "required": false,
                  "desc": "Name of network interface to read address from.",
                  "fieldValue": null,
                  "fieldDefaultValue": [],
                  "fieldFlag": "admin-api.leader-election.ring.instance-interface-names",
                  "fieldType": "list of strings"
                },
                {
                  "kind": "field",
                  "name": "instance_port",
                  "required": false,
                  "desc": "Port to advertize in the ring (defaults to server.grpc-listen-port).",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "admin-api.leader-election.ring.instance-port",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "instance_addr",
                  "required": false,
                  "desc": "IP address to advertize in the ring.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.ring.instance-addr",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "client_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "max_recv_msg_size",
                  "required": false,
                  "desc": "gRPC client max receive message size (bytes).",
                  "fieldValue": null,
                  "fieldDefaultValue": 104857600,
                  "fieldFlag": "admin-api.leader-election.client.grpc-max-recv-msg-size",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_send_msg_size",
                  "required": false,
                  "desc": "gRPC client max send message size (bytes).",
                  "fieldValue": null,
                  "fieldDefaultValue": 104857600,
                  "fieldFlag": "admin-api.leader-election.client.grpc-max-send-msg-size",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "grpc_compression",
                  "required": false,
                  "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.client.grpc-compression",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "rate_limit",
                  "required": false,
                  "desc": "Rate limit for gRPC client; 0 means disabled.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "admin-api.leader-election.client.grpc-client-rate-limit",
                  "fieldType": "float",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "rate_limit_burst",
                  "required": false,
                  "desc": "Rate limit burst for gRPC client.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "admin-api.leader-election.client.grpc-client-rate-limit-burst",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "backoff_on_ratelimits",
                  "required": false,
                  "desc": "Enable backoff and retry when we hit ratelimits.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "admin-api.leader-election.client.backoff-on-ratelimits",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "backoff_config",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "min_period",
                      "required": false,
                      "desc": "Minimum delay when backing off.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "admin-api.leader-election.client.backoff-min-period",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_period",
                      "required": false,
                      "desc": "Maximum delay when backing off.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "admin-api.leader-election.client.backoff-max-period",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "Number of times to backoff and retry before failing.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "admin-api.leader-election.client.backoff-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "admin-api.leader-election.client.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.client.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.client.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.client.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.client.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "admin-api.leader-election.client.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.client.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.client.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "limits",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enabled",
              "required": false,
              "desc": "Enable API based limits per-tenant.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "admin-api.limits.enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "refresh_period",
              "required": false,
              "desc": "Period with which to refresh per-tenant limits.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "admin-api.limits.refresh-period",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "admin_client",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "storage",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enable_cache",
              "required": false,
              "desc": "Enable caching on the versioned client",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "admin.client.cache.enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "backend",
              "required": false,
              "desc": "Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem.",
              "fieldValue": null,
              "fieldDefaultValue": "filesystem",
              "fieldFlag": "admin.client.backend",
              "fieldType": "string"
            },
            {
              "kind": "block",
              "name": "s3",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "endpoint",
                  "required": false,
                  "desc": "The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.s3.endpoint",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "region",
                  "required": false,
                  "desc": "S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.s3.region",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "bucket_name",
                  "required": false,
                  "desc": "S3 bucket name",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.s3.bucket-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "secret_access_key",
                  "required": false,
                  "desc": "S3 secret access key",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.s3.secret-access-key",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "access_key_id",
                  "required": false,
                  "desc": "S3 access key ID",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.s3.access-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "insecure",
                  "required": false,
                  "desc": "If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "admin.client.s3.insecure",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "signature_version",
                  "required": false,
                  "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
                  "fieldValue": null,
                  "fieldDefaultValue": "v4",
                  "fieldFlag": "admin.client.s3.signature-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "sse",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "type",
                      "required": false,
                      "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "admin.client.s3.sse.type",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "kms_key_id",
                      "required": false,
                      "desc": "KMS Key ID used to encrypt objects in S3",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "admin.client.s3.sse.kms-key-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "kms_encryption_context",
                      "required": false,
                      "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "admin.client.s3.sse.kms-encryption-context",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "http",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "idle_conn_timeout",
                      "required": false,
                      "desc": "The time an idle connection will remain idle before closing.",
                      "fieldValue": null,
                      "fieldDefaultValue": 90000000000,
                      "fieldFlag": "admin.client.s3.http.idle-conn-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "response_header_timeout",
                      "required": false,
                      "desc": "The amount of time the client will wait for a servers response headers.",
                      "fieldValue": null,
                      "fieldDefaultValue": 120000000000,
                      "fieldFlag": "admin.client.s3.http.response-header-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "insecure_skip_verify",
                      "required": false,
                      "desc": "If the client connects to S3 via HTTPS and this option is enabled, the client will accept any certificate and hostname.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "admin.client.s3.http.insecure-skip-verify",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "tls_handshake_timeout",
                      "required": false,
                      "desc": "Maximum time to wait for a TLS handshake. 0 means no limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "admin.client.s3.tls-handshake-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "expect_continue_timeout",
                      "required": false,
                      "desc": "The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1000000000,
                      "fieldFlag": "admin.client.s3.expect-continue-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections",
                      "required": false,
                      "desc": "Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "admin.client.s3.max-idle-connections",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections_per_host",
                      "required": false,
                      "desc": "Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "admin.client.s3.max-idle-connections-per-host",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_connections_per_host",
                      "required": false,
                      "desc": "Maximum number of connections per host. 0 means no limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "admin.client.s3.max-connections-per-host",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "gcs",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "bucket_name",
                  "required": false,
                  "desc": "GCS bucket name",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.gcs.bucket-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "service_account",
                  "required": false,
                  "desc": "JSON either from a Google Developers Console client_credentials.json file, or a Google Developers service account key. Needs to be valid JSON, not a filesystem path. If empty, fallback to Google default logic:\n1. A JSON file whose path is specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable. For workload identity federation, refer to https://cloud.google.com/iam/docs/how-to#using-workload-identity-federation on how to generate the JSON configuration file for on-prem/non-Google cloud platforms.\n2. A JSON file in a location known to the gcloud command-line tool: $HOME/.config/gcloud/application_default_credentials.json.\n3. On Google Compute Engine it fetches credentials from the metadata server.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.gcs.service-account",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "azure",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "account_name",
                  "required": false,
                  "desc": "Azure storage account name",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.azure.account-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "account_key",
                  "required": false,
                  "desc": "Azure storage account key",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.azure.account-key",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "container_name",
                  "required": false,
                  "desc": "Azure storage container name",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.azure.container-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "endpoint_suffix",
                  "required": false,
                  "desc": "Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN. If set to empty string, default endpoint suffix is used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.azure.endpoint-suffix",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of retries for recoverable errors",
                  "fieldValue": null,
                  "fieldDefaultValue": 20,
                  "fieldFlag": "admin.client.azure.max-retries",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "user_assigned_id",
                  "required": false,
                  "desc": "User assigned identity. If empty, then System assigned identity is used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.azure.user-assigned-id",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "swift",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "auth_version",
                  "required": false,
                  "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "admin.client.swift.auth-version",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "auth_url",
                  "required": false,
                  "desc": "OpenStack Swift authentication URL",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.auth-url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "username",
                  "required": false,
                  "desc": "OpenStack Swift username.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.username",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "user_domain_name",
                  "required": false,
                  "desc": "OpenStack Swift user's domain name.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.user-domain-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "user_domain_id",
                  "required": false,
                  "desc": "OpenStack Swift user's domain ID.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.user-domain-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "user_id",
                  "required": false,
                  "desc": "OpenStack Swift user ID.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.user-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "password",
                  "required": false,
                  "desc": "OpenStack Swift API key.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.password",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "domain_id",
                  "required": false,
                  "desc": "OpenStack Swift user's domain ID.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.domain-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "domain_name",
                  "required": false,
                  "desc": "OpenStack Swift user's domain name.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.domain-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "project_id",
                  "required": false,
                  "desc": "OpenStack Swift project ID (v2,v3 auth only).",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.project-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "project_name",
                  "required": false,
                  "desc": "OpenStack Swift project name (v2,v3 auth only).",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.project-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "project_domain_id",
                  "required": false,
                  "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.project-domain-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "project_domain_name",
                  "required": false,
                  "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.project-domain-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "region_name",
                  "required": false,
                  "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.region-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "container_name",
                  "required": false,
                  "desc": "Name of the OpenStack Swift container to put chunks in.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.swift.container-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Max retries on requests error.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3,
                  "fieldFlag": "admin.client.swift.max-retries",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "connect_timeout",
                  "required": false,
                  "desc": "Time after which a connection attempt is aborted.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "admin.client.swift.connect-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "request_timeout",
                  "required": false,
                  "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "admin.client.swift.request-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "filesystem",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "dir",
                  "required": false,
                  "desc": "Local filesystem storage directory.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.filesystem.dir",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "storage_prefix",
              "required": false,
              "desc": "Prefix for all objects stored in the backend storage. For simplicity, it may only contain digits and English alphabet letters.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "admin.client.storage-prefix",
              "fieldType": "string",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "type",
              "required": false,
              "desc": "Set a backend to use, (gcs, s3, azure). Deprecated, please use '-admin.client.backend' instead.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "admin.client.backend-type",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "disable_default_admin_policy",
          "required": false,
          "desc": "If set to true, the built-in __admin__ access policy will not be active.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "admin.client.disable-default-admin-policy",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "aggregations_api",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "backend",
          "required": false,
          "desc": "Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem.",
          "fieldValue": null,
          "fieldDefaultValue": "filesystem",
          "fieldFlag": "aggregations.backend",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "s3",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "endpoint",
              "required": false,
              "desc": "The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.s3.endpoint",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region",
              "required": false,
              "desc": "S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.s3.region",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "S3 bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.s3.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "secret_access_key",
              "required": false,
              "desc": "S3 secret access key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.s3.secret-access-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "access_key_id",
              "required": false,
              "desc": "S3 access key ID",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.s3.access-key-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "insecure",
              "required": false,
              "desc": "If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "aggregations.s3.insecure",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "signature_version",
              "required": false,
              "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
              "fieldValue": null,
              "fieldDefaultValue": "v4",
              "fieldFlag": "aggregations.s3.signature-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "sse",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "type",
                  "required": false,
                  "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "aggregations.s3.sse.type",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_key_id",
                  "required": false,
                  "desc": "KMS Key ID used to encrypt objects in S3",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "aggregations.s3.sse.kms-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_encryption_context",
                  "required": false,
                  "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "aggregations.s3.sse.kms-encryption-context",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "http",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "idle_conn_timeout",
                  "required": false,
                  "desc": "The time an idle connection will remain idle before closing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 90000000000,
                  "fieldFlag": "aggregations.s3.http.idle-conn-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "response_header_timeout",
                  "required": false,
                  "desc": "The amount of time the client will wait for a servers response headers.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "aggregations.s3.http.response-header-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "insecure_skip_verify",
                  "required": false,
                  "desc": "If the client connects to S3 via HTTPS and this option is enabled, the client will accept any certificate and hostname.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "aggregations.s3.http.insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_handshake_timeout",
                  "required": false,
                  "desc": "Maximum time to wait for a TLS handshake. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "aggregations.s3.tls-handshake-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "expect_continue_timeout",
                  "required": false,
                  "desc": "The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1000000000,
                  "fieldFlag": "aggregations.s3.expect-continue-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "aggregations.s3.max-idle-connections",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "aggregations.s3.max-idle-connections-per-host",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "max_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of connections per host. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "aggregations.s3.max-connections-per-host",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "gcs",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "GCS bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.gcs.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "service_account",
              "required": false,
              "desc": "JSON either from a Google Developers Console client_credentials.json file, or a Google Developers service account key. Needs to be valid JSON, not a filesystem path. If empty, fallback to Google default logic:\n1. A JSON file whose path is specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable. For workload identity federation, refer to https://cloud.google.com/iam/docs/how-to#using-workload-identity-federation on how to generate the JSON configuration file for on-prem/non-Google cloud platforms.\n2. A JSON file in a location known to the gcloud command-line tool: $HOME/.config/gcloud/application_default_credentials.json.\n3. On Google Compute Engine it fetches credentials from the metadata server.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.gcs.service-account",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "azure",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "account_name",
              "required": false,
              "desc": "Azure storage account name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.azure.account-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "account_key",
              "required": false,
              "desc": "Azure storage account key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.azure.account-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Azure storage container name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.azure.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "endpoint_suffix",
              "required": false,
              "desc": "Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN. If set to empty string, default endpoint suffix is used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.azure.endpoint-suffix",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Number of retries for recoverable errors",
              "fieldValue": null,
              "fieldDefaultValue": 20,
              "fieldFlag": "aggregations.azure.max-retries",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "user_assigned_id",
              "required": false,
              "desc": "User assigned identity. If empty, then System assigned identity is used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.azure.user-assigned-id",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "swift",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "auth_version",
              "required": false,
              "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "aggregations.swift.auth-version",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "auth_url",
              "required": false,
              "desc": "OpenStack Swift authentication URL",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.auth-url",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "username",
              "required": false,
              "desc": "OpenStack Swift username.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.username",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.user-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.user-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_id",
              "required": false,
              "desc": "OpenStack Swift user ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.user-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "password",
              "required": false,
              "desc": "OpenStack Swift API key.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.password",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_id",
              "required": false,
              "desc": "OpenStack Swift project ID (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.project-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_name",
              "required": false,
              "desc": "OpenStack Swift project name (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.project-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_id",
              "required": false,
              "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.project-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_name",
              "required": false,
              "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.project-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region_name",
              "required": false,
              "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.region-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Name of the OpenStack Swift container to put chunks in.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.swift.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Max retries on requests error.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "aggregations.swift.max-retries",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "connect_timeout",
              "required": false,
              "desc": "Time after which a connection attempt is aborted.",
              "fieldValue": null,
              "fieldDefaultValue": 10000000000,
              "fieldFlag": "aggregations.swift.connect-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "request_timeout",
              "required": false,
              "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "aggregations.swift.request-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "filesystem",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "dir",
              "required": false,
              "desc": "Local filesystem storage directory.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "aggregations.filesystem.dir",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "storage_prefix",
          "required": false,
          "desc": "Prefix for all objects stored in the backend storage. For simplicity, it may only contain digits and English alphabet letters.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "aggregations.storage-prefix",
          "fieldType": "string",
          "fieldCategory": "experimental"
        },
        {
          "kind": "field",
          "name": "rules_key",
          "required": false,
          "desc": "File name of aggregation rules in object store bucket.",
          "fieldValue": null,
          "fieldDefaultValue": "rules.json",
          "fieldFlag": "aggregations.rules-key",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "recommendations_key",
          "required": false,
          "desc": "File name of recommended aggregation rules in object store bucket.",
          "fieldValue": null,
          "fieldDefaultValue": "rules_recommended.json",
          "fieldFlag": "aggregations.recommendations-key",
          "fieldType": "string"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "auth",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "type",
          "required": false,
          "desc": "method for authenticating incoming HTTP requests, (trust, enterprise).",
          "fieldValue": null,
          "fieldDefaultValue": "enterprise",
          "fieldFlag": "auth.type",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "required_for_metrics",
          "required": false,
          "desc": "requires admin level auth for the /metrics endpoint.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "auth.required-for-metrics",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "override",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "token",
              "required": false,
              "desc": "Override admin token. If set, this string will always be accepted as a token with admin level scope.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "auth.override.token",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "token_file",
              "required": false,
              "desc": "If set, this file will be read at startup and the string from that file will be used as a admin scoped token.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "auth.override.token-file",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "admin",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "cache_ttl",
              "required": false,
              "desc": "how long auth responses should be cached",
              "fieldValue": null,
              "fieldDefaultValue": 600000000000,
              "fieldFlag": "auth.cache.ttl",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "cache_refresh",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enabled",
                  "required": false,
                  "desc": "Whether asynchronous background refreshes are enabled.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "auth.cache.refresh.enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "concurrency",
                  "required": false,
                  "desc": "Number of workers for background asynchronous refresh.",
                  "fieldValue": null,
                  "fieldDefaultValue": 2,
                  "fieldFlag": "auth.cache.refresh.concurrency",
                  "fieldType": "int",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "buffer",
                  "required": false,
                  "desc": "Maximum number of pending background refreshes.",
                  "fieldValue": null,
                  "fieldDefaultValue": 256,
                  "fieldFlag": "auth.cache.refresh.buffer",
                  "fieldType": "int",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "refresh_ttl",
                  "required": false,
                  "desc": "Remaining time to live of an item when background refreshes may begin to occur.",
                  "fieldValue": null,
                  "fieldDefaultValue": 180000000000,
                  "fieldFlag": "auth.cache.refresh.refresh-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "retry_interval",
                  "required": false,
                  "desc": "Minimum time distance between retries if a refresh attempt fails, 0 means that every sub-sequent get operation will result in a retry.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "auth.cache.refresh.retry-interval",
                  "fieldType": "duration",
                  "fieldCategory": "experimental"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "oidc",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "issuer_url",
                  "required": false,
                  "desc": "JWT token issuer URL (example \"https://accounts.google.com\")",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "auth.admin.oidc.issuer-url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "access_policy_claim",
                  "required": false,
                  "desc": "claim in the JWT token containing the access policy",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "auth.admin.oidc.access-policy-claim",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "access_policy_regex",
                  "required": false,
                  "desc": "regex to extract the access policy from the JWT token. The first submatch of the provided regex expression will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "auth.admin.oidc.access-policy-regex",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "audience",
                  "required": false,
                  "desc": "optional audience to check in JWT token",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "auth.admin.oidc.audience",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "default_access_policy",
                  "required": false,
                  "desc": "name of the access policy to use when the token doesn't contain an access policy",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "auth.admin.oidc.default-access-policy",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "adfs_compatibility",
                  "required": false,
                  "desc": "enable ADFS compatibility",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "auth.admin.oidc.adfs-compatibility",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "bootstrap",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "policy_name",
          "required": false,
          "desc": "Name of built in access policy.",
          "fieldValue": null,
          "fieldDefaultValue": "admin-policy",
          "fieldFlag": "bootstrap.policy-name",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "token_file",
          "required": false,
          "desc": "Write token to this instead of the standard out.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "bootstrap.token-file",
          "fieldType": "string"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "field",
      "name": "cluster_name",
      "required": false,
      "desc": "Unique ID of this GEM cluster. If undefined the name in the license is used.",
      "fieldValue": null,
      "fieldDefaultValue": "",
      "fieldFlag": "cluster-name",
      "fieldType": "string"
    },
    {
      "kind": "block",
      "name": "datadog",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "read_api",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "timeouts",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "block",
                  "name": "v1",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "query",
                      "required": false,
                      "desc": "Sets api/v1/query timeout, by default 30 seconds",
                      "fieldValue": null,
                      "fieldDefaultValue": 30000000000,
                      "fieldFlag": "datadog.api.v1-query-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "experimental"
                    },
                    {
                      "kind": "field",
                      "name": "metrics",
                      "required": false,
                      "desc": "Sets api/v1/metrics timeout, by default 5 seconds",
                      "fieldValue": null,
                      "fieldDefaultValue": 5000000000,
                      "fieldFlag": "datadog.api.v1-metrics-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "experimental"
                    },
                    {
                      "kind": "field",
                      "name": "hosts",
                      "required": false,
                      "desc": "Sets api/v1/hosts timeout, by default 5 seconds",
                      "fieldValue": null,
                      "fieldDefaultValue": 5000000000,
                      "fieldFlag": "datadog.api.v1-hosts-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "experimental"
                    },
                    {
                      "kind": "field",
                      "name": "tag_keys",
                      "required": false,
                      "desc": "Sets api/v1/tag_keys timeout, by default 5 seconds",
                      "fieldValue": null,
                      "fieldDefaultValue": 5000000000,
                      "fieldFlag": "datadog.api.v1-tag-keys-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "experimental"
                    },
                    {
                      "kind": "field",
                      "name": "tags",
                      "required": false,
                      "desc": "Sets api/v1/tags timeout, by default 10 seconds",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "datadog.api.v1-tags-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "experimental"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "v2",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "metrics_all_tags",
                      "required": false,
                      "desc": "Sets api/v1/metrics/{metric}/all-tags timeout, by default 5 seconds",
                      "fieldValue": null,
                      "fieldDefaultValue": 5000000000,
                      "fieldFlag": "datadog.api.v2-metrics-all-tags-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "experimental"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "write_api",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "timeouts",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "block",
                  "name": "v1",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "series",
                      "required": false,
                      "desc": "Sets api/v1/series timeout, by default 5 seconds",
                      "fieldValue": null,
                      "fieldDefaultValue": 5000000000,
                      "fieldFlag": "datadog.api.v1-series-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "experimental"
                    },
                    {
                      "kind": "field",
                      "name": "check_run",
                      "required": false,
                      "desc": "Sets api/v1/check_run timeout, by default 5 seconds",
                      "fieldValue": null,
                      "fieldDefaultValue": 5000000000,
                      "fieldFlag": "datadog.api.v1-check-run-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "experimental"
                    },
                    {
                      "kind": "field",
                      "name": "sketches",
                      "required": false,
                      "desc": "Sets api/v1/sketches and api/beta/sketches timeout, by default 5 seconds",
                      "fieldValue": null,
                      "fieldDefaultValue": 5000000000,
                      "fieldFlag": "datadog.api.v1-sketches-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "experimental"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "intake",
                  "required": false,
                  "desc": "Sets /intake timeout, by default 5 seconds",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "datadog.api.intake-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "experimental"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "remote_read",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "endpoint",
              "required": false,
              "desc": "URL for queries from upstream Prometheus API.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "datadog.query-endpoint",
              "fieldType": "string",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "timeout",
              "required": false,
              "desc": "Timeout for queries to upstream Prometheus API.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "datadog.query-timeout",
              "fieldType": "duration",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "keep_alive",
              "required": false,
              "desc": "KeepAlive for queries to upstream Prometheus API.",
              "fieldValue": null,
              "fieldDefaultValue": 30000000000,
              "fieldFlag": "datadog.query-keep-alive",
              "fieldType": "duration",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "max_idle_conns",
              "required": false,
              "desc": "Max idle conns for queries to upstream Prometheus API.",
              "fieldValue": null,
              "fieldDefaultValue": 10,
              "fieldFlag": "datadog.query-max-idle-conns",
              "fieldType": "int",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "max_conns",
              "required": false,
              "desc": "Max conns per host for queries to upstream Prometheus API.",
              "fieldValue": null,
              "fieldDefaultValue": 100,
              "fieldFlag": "datadog.query-max-conns",
              "fieldType": "int",
              "fieldCategory": "experimental"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "remote_write",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "endpoint",
              "required": false,
              "desc": "URL for writes to upstream Prometheus remote write API (including the /push suffix if needed).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "datadog.write-endpoint",
              "fieldType": "string",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "timeout",
              "required": false,
              "desc": "Timeout for writes to upstream Prometheus remote write API.",
              "fieldValue": null,
              "fieldDefaultValue": 1000000000,
              "fieldFlag": "datadog.write-timeout",
              "fieldType": "duration",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "keep_alive",
              "required": false,
              "desc": "KeepAlive for write to upstream Prometheus remote write API.",
              "fieldValue": null,
              "fieldDefaultValue": 30000000000,
              "fieldFlag": "datadog.write-keep-alive",
              "fieldType": "duration",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "max_idle_conns",
              "required": false,
              "desc": "Max idle conns per host for writes to upstream Prometheus remote write API.",
              "fieldValue": null,
              "fieldDefaultValue": 10,
              "fieldFlag": "datadog.write-max-idle-conns",
              "fieldType": "int",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "max_conns",
              "required": false,
              "desc": "Max open conns per host for writes to upstream Prometheus remote write API.",
              "fieldValue": null,
              "fieldDefaultValue": 100,
              "fieldFlag": "datadog.write-max-conns",
              "fieldType": "int",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "skip_label_validation",
              "required": false,
              "desc": "If set to true sends requests with headers to skip label validation.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "datadog.skip-label-validation",
              "fieldType": "boolean",
              "fieldCategory": "experimental"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "memcached_client",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "host",
              "required": false,
              "desc": "Hostname for memcached service to use. If empty and if addresses is unset, no memcached will be used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "datadog.memcached.hostname",
              "fieldType": "string",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "service",
              "required": false,
              "desc": "SRV service used to discover memcache servers.",
              "fieldValue": null,
              "fieldDefaultValue": "memcached",
              "fieldFlag": "datadog.memcached.service",
              "fieldType": "string",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "addresses",
              "required": false,
              "desc": "Comma separated addresses list in DNS Service Discovery format: https://grafana.com/docs/mimir/latest/operators-guide/configuring/about-dns-service-discovery/",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "datadog.memcached.addresses",
              "fieldType": "string",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "timeout",
              "required": false,
              "desc": "Maximum time to wait before giving up on memcached requests.",
              "fieldValue": null,
              "fieldDefaultValue": 100000000,
              "fieldFlag": "datadog.memcached.timeout",
              "fieldType": "duration",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "max_idle_conns",
              "required": false,
              "desc": "Maximum number of idle connections in pool.",
              "fieldValue": null,
              "fieldDefaultValue": 16,
              "fieldFlag": "datadog.memcached.max-idle-conns",
              "fieldType": "int",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "max_item_size",
              "required": false,
              "desc": "The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "datadog.memcached.max-item-size",
              "fieldType": "int",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "update_interval",
              "required": false,
              "desc": "Period with which to poll DNS for memcache servers.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "datadog.memcached.update-interval",
              "fieldType": "duration",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "consistent_hash",
              "required": false,
              "desc": "Use consistent hashing to distribute to memcache servers.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "datadog.memcached.consistent-hash",
              "fieldType": "boolean",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "circuit_breaker_consecutive_failures",
              "required": false,
              "desc": "Trip circuit-breaker after this number of consecutive dial failures (if zero then circuit-breaker is disabled).",
              "fieldValue": null,
              "fieldDefaultValue": 10,
              "fieldFlag": "datadog.memcached.circuit-breaker-consecutive-failures",
              "fieldType": "int",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "circuit_breaker_timeout",
              "required": false,
              "desc": "Duration circuit-breaker remains open after tripping (if zero then 60 seconds is used).",
              "fieldValue": null,
              "fieldDefaultValue": 10000000000,
              "fieldFlag": "datadog.memcached.circuit-breaker-timeout",
              "fieldType": "duration",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "circuit_breaker_interval",
              "required": false,
              "desc": "Reset circuit-breaker counts after this long (if zero then never reset).",
              "fieldValue": null,
              "fieldDefaultValue": 10000000000,
              "fieldFlag": "datadog.memcached.circuit-breaker-interval",
              "fieldType": "duration",
              "fieldCategory": "experimental"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "host_tags",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "expiration",
              "required": false,
              "desc": "Expiration for cached values. Zero means no expiration. Seconds precision will be used. Should be less than one month.",
              "fieldValue": null,
              "fieldDefaultValue": 600000000000,
              "fieldFlag": "datadog.ht-cache-expiration",
              "fieldType": "duration",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "cache_invalidation_retry_delay",
              "required": false,
              "desc": "RetryDelay to retry cache invalidation if update fails after storing. Zero means disabled. Arbitrary precision.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "datadog.ht-cache-invalidation-retry-delay",
              "fieldType": "duration",
              "fieldCategory": "experimental"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "federation",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "proxy_targets",
          "required": false,
          "desc": "",
          "fieldValue": null,
          "fieldDefaultValue": null,
          "fieldType": "slice",
          "fieldElement": {
            "kind": "block",
            "name": "proxy_targets",
            "required": false,
            "desc": "",
            "blockEntries": [
              {
                "kind": "field",
                "name": "name",
                "required": false,
                "desc": "Name contains the name of the proxy target, it will be used for the __cluster__ label.",
                "fieldValue": null,
                "fieldDefaultValue": "",
                "fieldType": "string"
              },
              {
                "kind": "field",
                "name": "url",
                "required": false,
                "desc": "URL is the URL to the Prometheus API endpoints.",
                "fieldValue": null,
                "fieldDefaultValue": "",
                "fieldType": "string"
              },
              {
                "kind": "block",
                "name": "basic_auth",
                "required": false,
                "desc": "",
                "blockEntries": [
                  {
                    "kind": "field",
                    "name": "username",
                    "required": false,
                    "desc": "Basic Auth username",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string"
                  },
                  {
                    "kind": "field",
                    "name": "password",
                    "required": false,
                    "desc": "Basic Auth password",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string"
                  }
                ],
                "fieldValue": null,
                "fieldDefaultValue": null
              },
              {
                "kind": "block",
                "name": "bearer_token",
                "required": false,
                "desc": "",
                "blockEntries": [
                  {
                    "kind": "field",
                    "name": "user",
                    "required": false,
                    "desc": "Bearer token user to forward to proxy targets.",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string"
                  },
                  {
                    "kind": "field",
                    "name": "token",
                    "required": false,
                    "desc": "Bearer token to forward to proxy targets.",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string"
                  }
                ],
                "fieldValue": null,
                "fieldDefaultValue": null
              },
              {
                "kind": "block",
                "name": "tls",
                "required": false,
                "desc": "",
                "blockEntries": [
                  {
                    "kind": "field",
                    "name": "tls_cert_path",
                    "required": false,
                    "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string",
                    "fieldCategory": "advanced"
                  },
                  {
                    "kind": "field",
                    "name": "tls_key_path",
                    "required": false,
                    "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string",
                    "fieldCategory": "advanced"
                  },
                  {
                    "kind": "field",
                    "name": "tls_ca_path",
                    "required": false,
                    "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string",
                    "fieldCategory": "advanced"
                  },
                  {
                    "kind": "field",
                    "name": "tls_server_name",
                    "required": false,
                    "desc": "Override the expected name on the server certificate.",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string",
                    "fieldCategory": "advanced"
                  },
                  {
                    "kind": "field",
                    "name": "tls_insecure_skip_verify",
                    "required": false,
                    "desc": "Skip validating server certificate.",
                    "fieldValue": null,
                    "fieldDefaultValue": false,
                    "fieldType": "boolean",
                    "fieldCategory": "advanced"
                  }
                ],
                "fieldValue": null,
                "fieldDefaultValue": null
              }
            ],
            "fieldValue": null,
            "fieldDefaultValue": null
          }
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "gateway",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "proxy",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "default",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.default.url",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.default.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.default.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.default.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.default.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.default.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.default.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.default.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.default.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.default.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.default.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "admin_api",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.admin-api.url",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.admin-api.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.admin-api.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.admin-api.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.admin-api.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.admin-api.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.admin-api.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.admin-api.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.admin-api.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.admin-api.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.admin-api.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.admin-api.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.admin-api.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.admin-api.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "aggregation",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.aggregator.url",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.aggregator.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.aggregator.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.aggregator.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.aggregator.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.aggregator.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.aggregator.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.aggregator.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.aggregator.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.aggregator.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.aggregator.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.aggregator.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.aggregator.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.aggregator.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "alertmanager",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.alertmanager.url",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.alertmanager.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.alertmanager.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.alertmanager.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.alertmanager.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.alertmanager.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.alertmanager.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.alertmanager.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.alertmanager.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.alertmanager.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.alertmanager.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.alertmanager.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.alertmanager.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.alertmanager.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "compactor",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.compactor.url",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.compactor.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.compactor.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.compactor.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.compactor.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.compactor.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.compactor.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.compactor.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.compactor.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.compactor.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.compactor.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.compactor.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.compactor.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.compactor.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "distributor",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.distributor.url",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.distributor.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.distributor.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.distributor.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.distributor.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.distributor.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.distributor.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.distributor.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.distributor.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.distributor.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.distributor.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.distributor.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.distributor.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.distributor.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "graphite_querier",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-querier.url",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.graphite-querier.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.graphite-querier.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.graphite-querier.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-querier.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-querier.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-querier.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-querier.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.graphite-querier.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-querier.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-querier.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.graphite-querier.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.graphite-querier.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.graphite-querier.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "graphite_write_proxy",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.url",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.graphite-write-proxy.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "datadog_read_proxy",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.url",
                  "fieldType": "string",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.datadog-read-proxy.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "datadog_write_proxy",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.url",
                  "fieldType": "string",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.datadog-write-proxy.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "ingester",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ingester.url",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.ingester.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.ingester.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.ingester.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ingester.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ingester.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ingester.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ingester.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.ingester.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ingester.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ingester.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.ingester.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.ingester.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.ingester.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "query_frontend",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.query-frontend.url",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.query-frontend.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.query-frontend.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.query-frontend.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.query-frontend.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.query-frontend.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.query-frontend.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.query-frontend.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.query-frontend.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.query-frontend.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.query-frontend.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.query-frontend.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.query-frontend.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.query-frontend.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "ruler",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ruler.url",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.ruler.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.ruler.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.ruler.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ruler.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ruler.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ruler.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ruler.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.ruler.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ruler.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ruler.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.ruler.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.ruler.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.ruler.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "store_gateway",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.store-gateway.url",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.store-gateway.enable-keepalive",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.store-gateway.tls-enabled",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "dial_timeout",
                  "required": false,
                  "desc": "Timeout when dialing backend. For proxying over GRPC, this will be used only during the initial dial at startup. For proxying over HTTP this is the connection timeout. Set to 0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "gateway.proxy.store-gateway.dial-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.store-gateway.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.store-gateway.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.store-gateway.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.store-gateway.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.store-gateway.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.store-gateway.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.store-gateway.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.store-gateway.write-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.store-gateway.read-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "import_timeout",
                  "required": false,
                  "desc": "Timeout for import requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800000000000,
                  "fieldFlag": "gateway.proxy.store-gateway.import-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "graphite",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "enabled",
          "required": false,
          "desc": "Whether the Graphite APIs are enabled.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "graphite.enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "block",
          "name": "querier",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "schemas",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "schema_ttl",
                  "required": false,
                  "desc": "Defines for how long schemas shall be cached.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "graphite.querier.schemas.schema-ttl",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "default_storage_schemas_file",
                  "required": false,
                  "desc": "Path to default storage-schemas.conf file.",
                  "fieldValue": null,
                  "fieldDefaultValue": "/etc/cortextank/storage-schemas.conf",
                  "fieldFlag": "graphite.querier.schemas.default-storage-schemas-file",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "default_storage_aggregations_file",
                  "required": false,
                  "desc": "Path to default storage-aggregation.conf file.",
                  "fieldValue": null,
                  "fieldDefaultValue": "/etc/cortextank/storage-aggregation.conf",
                  "fieldFlag": "graphite.querier.schemas.default-storage-aggregations-file",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "enable_user_overrides",
                  "required": false,
                  "desc": "Whether support for object store backed user overrides should be enabled.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "graphite.querier.schemas.enable-user-overrides",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "backend",
                  "required": false,
                  "desc": "Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem.",
                  "fieldValue": null,
                  "fieldDefaultValue": "filesystem",
                  "fieldFlag": "graphite.querier.schemas.backend",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "s3",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoint",
                      "required": false,
                      "desc": "The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.s3.endpoint",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "region",
                      "required": false,
                      "desc": "S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.s3.region",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "bucket_name",
                      "required": false,
                      "desc": "S3 bucket name",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.s3.bucket-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "secret_access_key",
                      "required": false,
                      "desc": "S3 secret access key",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.s3.secret-access-key",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "access_key_id",
                      "required": false,
                      "desc": "S3 access key ID",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.s3.access-key-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "insecure",
                      "required": false,
                      "desc": "If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "graphite.querier.schemas.s3.insecure",
                      "fieldType": "boolean",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "signature_version",
                      "required": false,
                      "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
                      "fieldValue": null,
                      "fieldDefaultValue": "v4",
                      "fieldFlag": "graphite.querier.schemas.s3.signature-version",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "block",
                      "name": "sse",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "type",
                          "required": false,
                          "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "graphite.querier.schemas.s3.sse.type",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "kms_key_id",
                          "required": false,
                          "desc": "KMS Key ID used to encrypt objects in S3",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "graphite.querier.schemas.s3.sse.kms-key-id",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "kms_encryption_context",
                          "required": false,
                          "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "graphite.querier.schemas.s3.sse.kms-encryption-context",
                          "fieldType": "string"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    },
                    {
                      "kind": "block",
                      "name": "http",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "idle_conn_timeout",
                          "required": false,
                          "desc": "The time an idle connection will remain idle before closing.",
                          "fieldValue": null,
                          "fieldDefaultValue": 90000000000,
                          "fieldFlag": "graphite.querier.schemas.s3.http.idle-conn-timeout",
                          "fieldType": "duration",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "response_header_timeout",
                          "required": false,
                          "desc": "The amount of time the client will wait for a servers response headers.",
                          "fieldValue": null,
                          "fieldDefaultValue": 120000000000,
                          "fieldFlag": "graphite.querier.schemas.s3.http.response-header-timeout",
                          "fieldType": "duration",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "insecure_skip_verify",
                          "required": false,
                          "desc": "If the client connects to S3 via HTTPS and this option is enabled, the client will accept any certificate and hostname.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "graphite.querier.schemas.s3.http.insecure-skip-verify",
                          "fieldType": "boolean",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "tls_handshake_timeout",
                          "required": false,
                          "desc": "Maximum time to wait for a TLS handshake. 0 means no limit.",
                          "fieldValue": null,
                          "fieldDefaultValue": 10000000000,
                          "fieldFlag": "graphite.querier.schemas.s3.tls-handshake-timeout",
                          "fieldType": "duration",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "expect_continue_timeout",
                          "required": false,
                          "desc": "The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.",
                          "fieldValue": null,
                          "fieldDefaultValue": 1000000000,
                          "fieldFlag": "graphite.querier.schemas.s3.expect-continue-timeout",
                          "fieldType": "duration",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "max_idle_connections",
                          "required": false,
                          "desc": "Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.",
                          "fieldValue": null,
                          "fieldDefaultValue": 100,
                          "fieldFlag": "graphite.querier.schemas.s3.max-idle-connections",
                          "fieldType": "int",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "max_idle_connections_per_host",
                          "required": false,
                          "desc": "Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.",
                          "fieldValue": null,
                          "fieldDefaultValue": 100,
                          "fieldFlag": "graphite.querier.schemas.s3.max-idle-connections-per-host",
                          "fieldType": "int",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "max_connections_per_host",
                          "required": false,
                          "desc": "Maximum number of connections per host. 0 means no limit.",
                          "fieldValue": null,
                          "fieldDefaultValue": 0,
                          "fieldFlag": "graphite.querier.schemas.s3.max-connections-per-host",
                          "fieldType": "int",
                          "fieldCategory": "advanced"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "gcs",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "bucket_name",
                      "required": false,
                      "desc": "GCS bucket name",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.gcs.bucket-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "service_account",
                      "required": false,
                      "desc": "JSON either from a Google Developers Console client_credentials.json file, or a Google Developers service account key. Needs to be valid JSON, not a filesystem path. If empty, fallback to Google default logic:\n1. A JSON file whose path is specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable. For workload identity federation, refer to https://cloud.google.com/iam/docs/how-to#using-workload-identity-federation on how to generate the JSON configuration file for on-prem/non-Google cloud platforms.\n2. A JSON file in a location known to the gcloud command-line tool: $HOME/.config/gcloud/application_default_credentials.json.\n3. On Google Compute Engine it fetches credentials from the metadata server.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.gcs.service-account",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "azure",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "account_name",
                      "required": false,
                      "desc": "Azure storage account name",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.azure.account-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "account_key",
                      "required": false,
                      "desc": "Azure storage account key",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.azure.account-key",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "container_name",
                      "required": false,
                      "desc": "Azure storage container name",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.azure.container-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "endpoint_suffix",
                      "required": false,
                      "desc": "Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN. If set to empty string, default endpoint suffix is used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.azure.endpoint-suffix",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "Number of retries for recoverable errors",
                      "fieldValue": null,
                      "fieldDefaultValue": 20,
                      "fieldFlag": "graphite.querier.schemas.azure.max-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "user_assigned_id",
                      "required": false,
                      "desc": "User assigned identity. If empty, then System assigned identity is used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.azure.user-assigned-id",
                      "fieldType": "string",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "swift",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "auth_version",
                      "required": false,
                      "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.schemas.swift.auth-version",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "auth_url",
                      "required": false,
                      "desc": "OpenStack Swift authentication URL",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.auth-url",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "OpenStack Swift username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "user_domain_name",
                      "required": false,
                      "desc": "OpenStack Swift user's domain name.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.user-domain-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "user_domain_id",
                      "required": false,
                      "desc": "OpenStack Swift user's domain ID.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.user-domain-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "user_id",
                      "required": false,
                      "desc": "OpenStack Swift user ID.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.user-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "OpenStack Swift API key.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.password",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "domain_id",
                      "required": false,
                      "desc": "OpenStack Swift user's domain ID.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.domain-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "domain_name",
                      "required": false,
                      "desc": "OpenStack Swift user's domain name.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.domain-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "project_id",
                      "required": false,
                      "desc": "OpenStack Swift project ID (v2,v3 auth only).",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.project-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "project_name",
                      "required": false,
                      "desc": "OpenStack Swift project name (v2,v3 auth only).",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.project-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "project_domain_id",
                      "required": false,
                      "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.project-domain-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "project_domain_name",
                      "required": false,
                      "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.project-domain-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "region_name",
                      "required": false,
                      "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.region-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "container_name",
                      "required": false,
                      "desc": "Name of the OpenStack Swift container to put chunks in.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.container-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "Max retries on requests error.",
                      "fieldValue": null,
                      "fieldDefaultValue": 3,
                      "fieldFlag": "graphite.querier.schemas.swift.max-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "connect_timeout",
                      "required": false,
                      "desc": "Time after which a connection attempt is aborted.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "graphite.querier.schemas.swift.connect-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "request_timeout",
                      "required": false,
                      "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
                      "fieldValue": null,
                      "fieldDefaultValue": 5000000000,
                      "fieldFlag": "graphite.querier.schemas.swift.request-timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "filesystem",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "dir",
                      "required": false,
                      "desc": "Local filesystem storage directory.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.filesystem.dir",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "storage_prefix",
                  "required": false,
                  "desc": "Prefix for all objects stored in the backend storage. For simplicity, it may only contain digits and English alphabet letters.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "graphite.querier.schemas.storage-prefix",
                  "fieldType": "string",
                  "fieldCategory": "experimental"
                },
                {
                  "kind": "field",
                  "name": "enable_deduplicator",
                  "required": false,
                  "desc": "Whether support for deduplicating schema config updates should be enabled.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "graphite.querier.schemas.enable-deduplicator",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "block",
                  "name": "deduplicator",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "Maximum expected upload duration after which it's considered failed and can be uploaded again.",
                      "fieldValue": null,
                      "fieldDefaultValue": 15000000000,
                      "fieldFlag": "graphite.querier.schemas.deduplicator.timeout",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "ttl",
                      "required": false,
                      "desc": "TTL for deduplicator entry in the cache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 43200000000000,
                      "fieldFlag": "graphite.querier.schemas.deduplicator.ttl",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "retry_delay",
                      "required": false,
                      "desc": "Time that the deduplicator waits between retries.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "graphite.querier.schemas.deduplicator.retry-delay",
                      "fieldType": "duration",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "Max number of upload retries performed by the deduplicator before failing.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "graphite.querier.schemas.deduplicator.max-retries",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "block",
                      "name": "memcached_client",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "host",
                          "required": false,
                          "desc": "Hostname for memcached service to use. If empty and if addresses is unset, no memcached will be used.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "graphite.querier.schemas.deduplicator.memcached.hostname",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "service",
                          "required": false,
                          "desc": "SRV service used to discover memcache servers.",
                          "fieldValue": null,
                          "fieldDefaultValue": "memcached",
                          "fieldFlag": "graphite.querier.schemas.deduplicator.memcached.service",
                          "fieldType": "string",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "addresses",
                          "required": false,
                          "desc": "Comma separated addresses list in DNS Service Discovery format: https://grafana.com/docs/mimir/latest/operators-guide/configuring/about-dns-service-discovery/",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "graphite.querier.schemas.deduplicator.memcached.addresses",
                          "fieldType": "string",
                          "fieldCategory": "experimental"
                        },
                        {
                          "kind": "field",
                          "name": "timeout",
                          "required": false,
                          "desc": "Maximum time to wait before giving up on memcached requests.",
                          "fieldValue": null,
                          "fieldDefaultValue": 100000000,
                          "fieldFlag": "graphite.querier.schemas.deduplicator.memcached.timeout",
                          "fieldType": "duration",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "max_idle_conns",
                          "required": false,
                          "desc": "Maximum number of idle connections in pool.",
                          "fieldValue": null,
                          "fieldDefaultValue": 16,
                          "fieldFlag": "graphite.querier.schemas.deduplicator.memcached.max-idle-conns",
                          "fieldType": "int",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "max_item_size",
                          "required": false,
                          "desc": "The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                          "fieldValue": null,
                          "fieldDefaultValue": 0,
                          "fieldFlag": "graphite.querier.schemas.deduplicator.memcached.max-item-size",
                          "fieldType": "int",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "update_interval",
                          "required": false,
                          "desc": "Period with which to poll DNS for memcache servers.",
                          "fieldValue": null,
                          "fieldDefaultValue": 60000000000,
                          "fieldFlag": "graphite.querier.schemas.deduplicator.memcached.update-interval",
                          "fieldType": "duration",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "consistent_hash",
                          "required": false,
                          "desc": "Use consistent hashing to distribute to memcache servers.",
                          "fieldValue": null,
                          "fieldDefaultValue": true,
                          "fieldFlag": "graphite.querier.schemas.deduplicator.memcached.consistent-hash",
                          "fieldType": "boolean",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "circuit_breaker_consecutive_failures",
                          "required": false,
                          "desc": "Trip circuit-breaker after this number of consecutive dial failures (if zero then circuit-breaker is disabled).",
                          "fieldValue": null,
                          "fieldDefaultValue": 10,
                          "fieldFlag": "graphite.querier.schemas.deduplicator.memcached.circuit-breaker-consecutive-failures",
                          "fieldType": "int",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "circuit_breaker_timeout",
                          "required": false,
                          "desc": "Duration circuit-breaker remains open after tripping (if zero then 60 seconds is used).",
                          "fieldValue": null,
                          "fieldDefaultValue": 10000000000,
                          "fieldFlag": "graphite.querier.schemas.deduplicator.memcached.circuit-breaker-timeout",
                          "fieldType": "duration",
                          "fieldCategory": "advanced"
                        },
                        {
                          "kind": "field",
                          "name": "circuit_breaker_interval",
                          "required": false,
                          "desc": "Reset circuit-breaker counts after this long (if zero then never reset).",
                          "fieldValue": null,
                          "fieldDefaultValue": 10000000000,
                          "fieldFlag": "graphite.querier.schemas.deduplicator.memcached.circuit-breaker-interval",
                          "fieldType": "duration",
                          "fieldCategory": "advanced"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "cache_grace_period",
              "required": false,
              "desc": "Period before an item is cachable, to prevent caching very recent results.",
              "fieldValue": null,
              "fieldDefaultValue": 300000000000,
              "fieldFlag": "graphite.querier.cache-grace-period",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "cache_ttl",
              "required": false,
              "desc": "TTL for aggregation and metric name caches. Defaults to 10 minutes.",
              "fieldValue": null,
              "fieldDefaultValue": 600000000000,
              "fieldFlag": "graphite.querier.cache-ttl",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "metric_name_cache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "backend",
                  "required": false,
                  "desc": "Backend for metric names cache, if not empty. Supported values: [memcached].",
                  "fieldValue": null,
                  "fieldDefaultValue": "memcached",
                  "fieldFlag": "graphite.querier.metric-name-cache.backend",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "memcached",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "addresses",
                      "required": false,
                      "desc": "Comma-separated list of memcached addresses. Each address can be an IP address, hostname, or an entry specified in the DNS Service Discovery format.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.addresses",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "The socket read/write timeout.",
                      "fieldValue": null,
                      "fieldDefaultValue": 200000000,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections",
                      "required": false,
                      "desc": "The maximum number of idle connections that will be maintained per address.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.max-idle-connections",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent asynchronous operations can occur.",
                      "fieldValue": null,
                      "fieldDefaultValue": 50,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.max-async-concurrency",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_buffer_size",
                      "required": false,
                      "desc": "The maximum number of enqueued asynchronous operations allowed.",
                      "fieldValue": null,
                      "fieldDefaultValue": 25000,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.max-async-buffer-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent connections running get operations. If set to 0, concurrency is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.max-get-multi-concurrency",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_batch_size",
                      "required": false,
                      "desc": "The maximum number of keys a single underlying get operation should run. If more keys are specified, internally keys are split into multiple batches and fetched concurrently, honoring the max concurrency. If set to 0, the max batch size is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.max-get-multi-batch-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_item_size",
                      "required": false,
                      "desc": "The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1048576,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.max-item-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "aggregation_cache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "backend",
                  "required": false,
                  "desc": "Backend for aggregations cache, if not empty. Supported values: [memcached].",
                  "fieldValue": null,
                  "fieldDefaultValue": "memcached",
                  "fieldFlag": "graphite.querier.aggregation-cache.backend",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "memcached",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "addresses",
                      "required": false,
                      "desc": "Comma-separated list of memcached addresses. Each address can be an IP address, hostname, or an entry specified in the DNS Service Discovery format.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.addresses",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "The socket read/write timeout.",
                      "fieldValue": null,
                      "fieldDefaultValue": 200000000,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections",
                      "required": false,
                      "desc": "The maximum number of idle connections that will be maintained per address.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.max-idle-connections",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent asynchronous operations can occur.",
                      "fieldValue": null,
                      "fieldDefaultValue": 50,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.max-async-concurrency",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_buffer_size",
                      "required": false,
                      "desc": "The maximum number of enqueued asynchronous operations allowed.",
                      "fieldValue": null,
                      "fieldDefaultValue": 25000,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.max-async-buffer-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent connections running get operations. If set to 0, concurrency is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.max-get-multi-concurrency",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_batch_size",
                      "required": false,
                      "desc": "The maximum number of keys a single underlying get operation should run. If more keys are specified, internally keys are split into multiple batches and fetched concurrently, honoring the max concurrency. If set to 0, the max batch size is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.max-get-multi-batch-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    },
                    {
                      "kind": "field",
                      "name": "max_item_size",
                      "required": false,
                      "desc": "The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1048576,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.max-item-size",
                      "fieldType": "int",
                      "fieldCategory": "advanced"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "query_handling_concurrency",
              "required": false,
              "desc": "Number of go routines to concurrently fetch and process data.",
              "fieldValue": null,
              "fieldDefaultValue": 32,
              "fieldFlag": "graphite.querier.query-handling-concurrency",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_concurrent_sub_queries_per_request",
              "required": false,
              "desc": "Number of concurrent subqueries processed per request. A negative value means no limit.",
              "fieldValue": null,
              "fieldDefaultValue": -1,
              "fieldFlag": "graphite.querier.max-concurrent-sub-queries-per-request",
              "fieldType": "int",
              "fieldCategory": "experimental"
            },
            {
              "kind": "field",
              "name": "split_queries_by_interval",
              "required": false,
              "desc": "Split queries by this interval and execute in parallel, 0 disables query splitting.",
              "fieldValue": null,
              "fieldDefaultValue": 86400000000000,
              "fieldFlag": "graphite.querier.split-queries-by-interval",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "proxy_bad_requests",
              "required": false,
              "desc": "Proxy bad requests to graphite",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "graphite.querier.proxy-bad-requests",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "graphite_fallback",
              "required": false,
              "desc": "Graphite http listener fallback address",
              "fieldValue": null,
              "fieldDefaultValue": "http://graphite:80",
              "fieldFlag": "graphite.querier.graphite-fallback",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "metrics_find_cutoff",
              "required": false,
              "desc": "How far into the past we perform index lookups for find calls",
              "fieldValue": null,
              "fieldDefaultValue": "32d",
              "fieldFlag": "graphite.querier.metrics-find-cutoff",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_points_per_req_soft",
              "required": false,
              "desc": "Max number of data points a query may return, if number of data points exceeds this limit we aggregate them down to the limit.",
              "fieldValue": null,
              "fieldDefaultValue": 1000000,
              "fieldFlag": "graphite.querier.max-points-per-req-soft",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "max_points_per_req_hard",
              "required": false,
              "desc": "If query results in more data points than this limit we directly cancel it with an error message.",
              "fieldValue": null,
              "fieldDefaultValue": 20000000,
              "fieldFlag": "graphite.querier.max-points-per-req-hard",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "block",
              "name": "remote_read",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "query_address",
                  "required": false,
                  "desc": "Base URL for queries from upstream Prometheus API. The /api/v1 suffix will be appended to this address. Defaults to http://localhost:80/prometheus.",
                  "fieldValue": null,
                  "fieldDefaultValue": "http://localhost:80/prometheus",
                  "fieldFlag": "graphite.querier.query-address",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "query_timeout",
                  "required": false,
                  "desc": "Timeout for queries to upstream Prometheus API.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "graphite.querier.query-timeout",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "query_keep_alive",
                  "required": false,
                  "desc": "KeepAlive for queries to upstream Prometheus API.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "graphite.querier.query-keep-alive",
                  "fieldType": "duration",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "query_max_idle_conns",
                  "required": false,
                  "desc": "Max idle conns for queries to upstream Prometheus API.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "graphite.querier.query-max-idle-conns",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "query_max_conns",
                  "required": false,
                  "desc": "Max conns per host for queries to upstream Prometheus API.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "graphite.querier.query-max-conns",
                  "fieldType": "int",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "query_client_name",
                  "required": false,
                  "desc": "Client name to use when identifying requests in Prometheus API.",
                  "fieldValue": null,
                  "fieldDefaultValue": "graphite-querier",
                  "fieldFlag": "graphite.querier.query-client-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "querier_pool_service_address",
              "required": false,
              "desc": "If set, remote queries will be sent to the machines corresponding to this DNS service address.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "graphite.querier.querier-pool-service-address",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "querier_pool_worker_concurrency",
              "required": false,
              "desc": "Number of go routines to concurrently send requests to a single remote querier.",
              "fieldValue": null,
              "fieldDefaultValue": 32,
              "fieldFlag": "graphite.querier.querier-pool-worker-concurrency",
              "fieldType": "int",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "querier_pool_rollout_fraction",
              "required": false,
              "desc": "When a querier-pool-service-address is set, sets the proportion of queries that will be sent to the remote pool. (Between 0.0 and 1.0).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "graphite.querier.querier-pool-rollout-fraction",
              "fieldType": "float"
            },
            {
              "kind": "field",
              "name": "querier_carbonAPI_rollout_fraction",
              "required": false,
              "desc": "Sets the proportion of queries that should attempt to process Graphite web functions with CarbonAPI. (Between 0.0 and 1.0).",
              "fieldValue": null,
              "fieldDefaultValue": 1,
              "fieldFlag": "graphite.querier.querier-carbonapi-rollout-fraction",
              "fieldType": "float"
            },
            {
              "kind": "field",
              "name": "querier_carbonAPI_mirrored_fraction",
              "required": false,
              "desc": "Sets the proportion of CarbonAPI-executed queries that should also execute MetricTank in order to compare results. (Between 0.0 and 1.0).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "graphite.querier.querier-carbonapi-mirrored-fraction",
              "fieldType": "float"
            },
            {
              "kind": "field",
              "name": "remote_subquery_timeout",
              "required": false,
              "desc": "Period to wait before expiring a subquery asked over GRPC.",
              "fieldValue": null,
              "fieldDefaultValue": 30000000000,
              "fieldFlag": "graphite.querier.remote-subquery-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit_qps",
              "required": false,
              "desc": "The maximum number of read requests per second (globally for this querier, not per-tenant) to allow before rate limiting.  This is a hard limit.  The burst rate will be 2x this amount.",
              "fieldValue": null,
              "fieldDefaultValue": 96,
              "fieldFlag": "graphite.querier.rate-limit-qps",
              "fieldType": "float",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tenant_rate_limit_qps",
              "required": false,
              "desc": "The maximum number of read requests per second per-tenant to allow before rate limiting.  This is a hard limit.  The burst rate will be 2x this amount.",
              "fieldValue": null,
              "fieldDefaultValue": 48,
              "fieldFlag": "graphite.querier.tenant-rate-limit-qps",
              "fieldType": "float",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "heavy_rate_limit_qps",
              "required": false,
              "desc": "The maximum number of read requests per second per-tenant to allow before rate limiting for hot paths (like find/).",
              "fieldValue": null,
              "fieldDefaultValue": 10,
              "fieldFlag": "graphite.querier.heavy-rate-limit-qps",
              "fieldType": "float",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rate_limit_enabled",
              "required": false,
              "desc": "If set, request rates will actually be limited, and the querier will return http 429 when the limit is exceeded.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "graphite.querier.rate-limit-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "filter_empty_labels_locally_rollout_fraction",
              "required": false,
              "desc": "Sets the proportion of subqueries for which the querier tries to omit empty label values matchers (i.e. non-existing labels) from prometheus fetch requests, and extra series received are filtered locally.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "graphite.querier.filter-empty-labels-locally-rollout-fraction",
              "fieldType": "float",
              "fieldCategory": "experimental"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "write_proxy",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "distributor_client",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "address",
                  "required": false,
                  "desc": "GRPC listen address of cortex distributor(s). Must be a DNS address (prefixed with dns:///) to enable client side load balancing.",
                  "fieldValue": null,
                  "fieldDefaultValue": "dns:///:9095",
                  "fieldFlag": "graphite.write-proxy.distributor-client.address",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "connect_timeout",
                  "required": false,
                  "desc": "GRPC connection timeout for cortex distributor(s)",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "graphite.write-proxy.distributor-client.connect-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Set to true if distributor connection requires TLS.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-cert-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-key-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-ca-path",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-server-name",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-insecure-skip-verify",
                  "fieldType": "boolean",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_cipher_suites",
                  "required": false,
                  "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-cipher-suites",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                },
                {
                  "kind": "field",
                  "name": "tls_min_version",
                  "required": false,
                  "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-min-version",
                  "fieldType": "string",
                  "fieldCategory": "advanced"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "remote_write",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "endpoint",
                  "required": false,
                  "desc": "URL for writes to upstream Prometheus remote write API (including the /push suffix if needed).",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "graphite.write-proxy.write-endpoint",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "timeout",
                  "required": false,
                  "desc": "Timeout for writes to upstream Prometheus remote write API.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1000000000,
                  "fieldFlag": "graphite.write-proxy.write-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "keep_alive",
                  "required": false,
                  "desc": "KeepAlive for write to upstream Prometheus remote write API.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "graphite.write-proxy.write-keep-alive",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_idle_conns",
                  "required": false,
                  "desc": "Max idle conns per host for writes to upstream Prometheus remote write API.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "graphite.write-proxy.write-max-idle-conns",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_conns",
                  "required": false,
                  "desc": "Max open conns per host for writes to upstream Prometheus remote write API.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "graphite.write-proxy.write-max-conns",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "skip_label_validation",
                  "required": false,
                  "desc": "If set to true sends requests with headers to skip label validation.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "graphite.write-proxy.skip-label-validation",
                  "fieldType": "boolean"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "remote_write_proxy_enabled",
          "required": false,
          "desc": "Enable usage of the remote write api on the write path of graphite, instead of importing distributors code and accessing the ingesters and the block store.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "graphite.write-proxy.remote-write-enabled",
          "fieldType": "boolean"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "instrumentation",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "enabled",
          "required": false,
          "desc": "Enable self-monitoring metrics recorded under the system tenant.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "instrumentation.enabled",
          "fieldType": "boolean",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "flush_period",
          "required": false,
          "desc": "How often to flush self-monitoring metrics to distributor",
          "fieldValue": null,
          "fieldDefaultValue": 15000000000,
          "fieldFlag": "instrumentation.flush-period",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "write_timeout",
          "required": false,
          "desc": "Timeout writing self-monitoring metrics to distributor",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "instrumentation.write-timeout",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        },
        {
          "kind": "block",
          "name": "distributor_client",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "address",
              "required": false,
              "desc": "GRPC listen address of cortex distributor(s). Must be a DNS address (prefixed with dns:///) to enable client side load balancing.",
              "fieldValue": null,
              "fieldDefaultValue": "dns:///:9095",
              "fieldFlag": "instrumentation.distributor-client.address",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "connect_timeout",
              "required": false,
              "desc": "GRPC connection timeout for cortex distributor(s)",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "instrumentation.distributor-client.connect-timeout",
              "fieldType": "duration",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Set to true if distributor connection requires TLS.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "instrumentation.distributor-client.tls-enabled",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "instrumentation.distributor-client.tls-cert-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "instrumentation.distributor-client.tls-key-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "instrumentation.distributor-client.tls-ca-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "instrumentation.distributor-client.tls-server-name",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "instrumentation.distributor-client.tls-insecure-skip-verify",
              "fieldType": "boolean",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_cipher_suites",
              "required": false,
              "desc": "Override the default cipher suite list (separated by commas). Allowed values:\n\nSecure Ciphers:\n- TLS_RSA_WITH_AES_128_CBC_SHA\n- TLS_RSA_WITH_AES_256_CBC_SHA\n- TLS_RSA_WITH_AES_128_GCM_SHA256\n- TLS_RSA_WITH_AES_256_GCM_SHA384\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n- TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n\nInsecure Ciphers:\n- TLS_RSA_WITH_RC4_128_SHA\n- TLS_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_RSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_RC4_128_SHA\n- TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n- TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "instrumentation.distributor-client.tls-cipher-suites",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "tls_min_version",
              "required": false,
              "desc": "Override the default minimum TLS version. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "instrumentation.distributor-client.tls-min-version",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "node_collector",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "procfs_path",
              "required": false,
              "desc": "Mount point of the proc filesystem.",
              "fieldValue": null,
              "fieldDefaultValue": "/proc",
              "fieldFlag": "instrumentation.node-collector.procfs-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "rootfs_path",
              "required": false,
              "desc": "Mount point of the root filesystem.",
              "fieldValue": null,
              "fieldDefaultValue": "/",
              "fieldFlag": "instrumentation.node-collector.rootfs-path",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "filesystem_ignored_mount_points",
              "required": false,
              "desc": "Regex pattern of mount points to ignore for the filesystem collector",
              "fieldValue": null,
              "fieldDefaultValue": "^/(dev|proc|sys|var/lib/docker/.+)($|/)",
              "fieldFlag": "instrumentation.node-collector.filesystem-ignored-mount-points",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "filesystem_ignored_fs_types",
              "required": false,
              "desc": "Regex pattern of filesystem types to ignore for the filesystem collector",
              "fieldValue": null,
              "fieldDefaultValue": "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$",
              "fieldFlag": "instrumentation.node-collector.filesystem-ignored-fs-types",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "diskstats_ignored_devices",
              "required": false,
              "desc": "Regex pattern of devices to ignore for the disktstats collector",
              "fieldValue": null,
              "fieldDefaultValue": "^(ram|loop|fd|(h|s|v|xv)d[a-z]|nvme\\d+n\\d+p)\\d+$",
              "fieldFlag": "instrumentation.node-collector.diskstats-ignored-devices",
              "fieldType": "string",
              "fieldCategory": "advanced"
            },
            {
              "kind": "field",
              "name": "vmstat_fields",
              "required": false,
              "desc": "Regexp of fields to return for vmstat collector",
              "fieldValue": null,
              "fieldDefaultValue": "^(oom_kill|pgpg|pswp|pg.*fault).*",
              "fieldFlag": "instrumentation.node-collectorvmstat-fields",
              "fieldType": "string",
              "fieldCategory": "advanced"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "license",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "path",
          "required": false,
          "desc": "Filepath to license jwt file.",
          "fieldValue": null,
          "fieldDefaultValue": "./license.jwt",
          "fieldFlag": "license.path",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "sync_interval",
          "required": false,
          "desc": "Interval to check for new or existing licenses.",
          "fieldValue": null,
          "fieldDefaultValue": 3600000000000,
          "fieldFlag": "license.sync-interval",
          "fieldType": "duration",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "tokengen",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "access_policy",
          "required": false,
          "desc": "The name of the access policy to generate a token for. It defaults to the built-in admin policy.",
          "fieldValue": null,
          "fieldDefaultValue": "__admin__",
          "fieldFlag": "tokengen.access-policy",
          "fieldType": "string",
          "fieldCategory": "advanced"
        },
        {
          "kind": "field",
          "name": "token_file",
          "required": false,
          "desc": "If set, the generated token will be written to a file at the provided path in addition to being logged.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "tokengen.token-file",
          "fieldType": "string",
          "fieldCategory": "advanced"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    }
  ],
  "fieldValue": null,
  "fieldDefaultValue": null
}
