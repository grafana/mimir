{
  "kind": "block",
  "name": "",
  "required": false,
  "desc": "",
  "blockEntries": [
    {
      "kind": "field",
      "name": "target",
      "required": false,
      "desc": "Comma-separated list of modules to load. The alias 'all' can be used in the list to load a number of core modules and will enable single-binary mode. Use '-modules' command line flag to get a list of available modules, and to see which modules are included in 'all'.",
      "fieldValue": null,
      "fieldDefaultValue": "all",
      "fieldFlag": "target",
      "fieldType": "string"
    },
    {
      "kind": "field",
      "name": "auth_enabled",
      "required": false,
      "desc": "Set to false to disable auth.",
      "fieldValue": null,
      "fieldDefaultValue": true,
      "fieldFlag": "auth.enabled",
      "fieldType": "boolean"
    },
    {
      "kind": "field",
      "name": "http_prefix",
      "required": false,
      "desc": "HTTP path prefix for API.",
      "fieldValue": null,
      "fieldDefaultValue": "/api/prom",
      "fieldFlag": "http.prefix",
      "fieldType": "string"
    },
    {
      "kind": "block",
      "name": "api",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "response_compression_enabled",
          "required": false,
          "desc": "Use GZIP compression for API responses. Some endpoints serve large YAML or JSON blobs which can benefit from compression.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "api.response-compression-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "skip_label_name_validation_header_enabled",
          "required": false,
          "desc": "Allows to skip label name validation via header on the http write path. Use with caution as it breaks PromQL. Allowing this for external clients allows any client to send invalid label names. After enabling it, requests with X-Mimir-SkipLabelNameValidation HTTP header set to true will not have label names validated.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "api.skip-label-name-validation-header-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "alertmanager_http_prefix",
          "required": false,
          "desc": "HTTP URL path under which the Alertmanager ui and api will be served.",
          "fieldValue": null,
          "fieldDefaultValue": "/alertmanager",
          "fieldFlag": "http.alertmanager-http-prefix",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "prometheus_http_prefix",
          "required": false,
          "desc": "HTTP URL path under which the Prometheus api will be served.",
          "fieldValue": null,
          "fieldDefaultValue": "/prometheus",
          "fieldFlag": "http.prometheus-http-prefix",
          "fieldType": "string"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "server",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "http_listen_network",
          "required": false,
          "desc": "HTTP server listen network, default tcp",
          "fieldValue": null,
          "fieldDefaultValue": "tcp",
          "fieldFlag": "server.http-listen-network",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "http_listen_address",
          "required": false,
          "desc": "HTTP server listen address.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "server.http-listen-address",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "http_listen_port",
          "required": false,
          "desc": "HTTP server listen port.",
          "fieldValue": null,
          "fieldDefaultValue": 80,
          "fieldFlag": "server.http-listen-port",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "http_listen_conn_limit",
          "required": false,
          "desc": "Maximum number of simultaneous http connections, \u003c=0 to disable",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "server.http-conn-limit",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "grpc_listen_network",
          "required": false,
          "desc": "gRPC server listen network",
          "fieldValue": null,
          "fieldDefaultValue": "tcp",
          "fieldFlag": "server.grpc-listen-network",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "grpc_listen_address",
          "required": false,
          "desc": "gRPC server listen address.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "server.grpc-listen-address",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "grpc_listen_port",
          "required": false,
          "desc": "gRPC server listen port.",
          "fieldValue": null,
          "fieldDefaultValue": 9095,
          "fieldFlag": "server.grpc-listen-port",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "grpc_listen_conn_limit",
          "required": false,
          "desc": "Maximum number of simultaneous grpc connections, \u003c=0 to disable",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "server.grpc-conn-limit",
          "fieldType": "int"
        },
        {
          "kind": "block",
          "name": "http_tls_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "cert_file",
              "required": false,
              "desc": "HTTP server cert path.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.http-tls-cert-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "key_file",
              "required": false,
              "desc": "HTTP server key path.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.http-tls-key-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "client_auth_type",
              "required": false,
              "desc": "HTTP TLS Client Auth type.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.http-tls-client-auth",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "client_ca_file",
              "required": false,
              "desc": "HTTP TLS Client CA path.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.http-tls-ca-path",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "grpc_tls_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "cert_file",
              "required": false,
              "desc": "GRPC TLS server cert path.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.grpc-tls-cert-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "key_file",
              "required": false,
              "desc": "GRPC TLS server key path.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.grpc-tls-key-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "client_auth_type",
              "required": false,
              "desc": "GRPC TLS Client Auth type.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.grpc-tls-client-auth",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "client_ca_file",
              "required": false,
              "desc": "GRPC TLS Client CA path.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "server.grpc-tls-ca-path",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "register_instrumentation",
          "required": false,
          "desc": "Register the intrumentation handlers (/metrics etc).",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "server.register-instrumentation",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "graceful_shutdown_timeout",
          "required": false,
          "desc": "Timeout for graceful shutdowns",
          "fieldValue": null,
          "fieldDefaultValue": 30000000000,
          "fieldFlag": "server.graceful-shutdown-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "http_server_read_timeout",
          "required": false,
          "desc": "Read timeout for HTTP server",
          "fieldValue": null,
          "fieldDefaultValue": 30000000000,
          "fieldFlag": "server.http-read-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "http_server_write_timeout",
          "required": false,
          "desc": "Write timeout for HTTP server",
          "fieldValue": null,
          "fieldDefaultValue": 30000000000,
          "fieldFlag": "server.http-write-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "http_server_idle_timeout",
          "required": false,
          "desc": "Idle timeout for HTTP server",
          "fieldValue": null,
          "fieldDefaultValue": 120000000000,
          "fieldFlag": "server.http-idle-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "grpc_server_max_recv_msg_size",
          "required": false,
          "desc": "Limit on the size of a gRPC message this server can receive (bytes).",
          "fieldValue": null,
          "fieldDefaultValue": 4194304,
          "fieldFlag": "server.grpc-max-recv-msg-size-bytes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "grpc_server_max_send_msg_size",
          "required": false,
          "desc": "Limit on the size of a gRPC message this server can send (bytes).",
          "fieldValue": null,
          "fieldDefaultValue": 4194304,
          "fieldFlag": "server.grpc-max-send-msg-size-bytes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "grpc_server_max_concurrent_streams",
          "required": false,
          "desc": "Limit on the number of concurrent streams for gRPC calls (0 = unlimited)",
          "fieldValue": null,
          "fieldDefaultValue": 100,
          "fieldFlag": "server.grpc-max-concurrent-streams",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "grpc_server_max_connection_idle",
          "required": false,
          "desc": "The duration after which an idle connection should be closed. Default: infinity",
          "fieldValue": null,
          "fieldDefaultValue": 9223372036854775807,
          "fieldFlag": "server.grpc.keepalive.max-connection-idle",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "grpc_server_max_connection_age",
          "required": false,
          "desc": "The duration for the maximum amount of time a connection may exist before it will be closed. Default: infinity",
          "fieldValue": null,
          "fieldDefaultValue": 9223372036854775807,
          "fieldFlag": "server.grpc.keepalive.max-connection-age",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "grpc_server_max_connection_age_grace",
          "required": false,
          "desc": "An additive period after max-connection-age after which the connection will be forcibly closed. Default: infinity",
          "fieldValue": null,
          "fieldDefaultValue": 9223372036854775807,
          "fieldFlag": "server.grpc.keepalive.max-connection-age-grace",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "grpc_server_keepalive_time",
          "required": false,
          "desc": "Duration after which a keepalive probe is sent in case of no activity over the connection., Default: 2h",
          "fieldValue": null,
          "fieldDefaultValue": 7200000000000,
          "fieldFlag": "server.grpc.keepalive.time",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "grpc_server_keepalive_timeout",
          "required": false,
          "desc": "After having pinged for keepalive check, the duration after which an idle connection should be closed, Default: 20s",
          "fieldValue": null,
          "fieldDefaultValue": 20000000000,
          "fieldFlag": "server.grpc.keepalive.timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "grpc_server_min_time_between_pings",
          "required": false,
          "desc": "Minimum amount of time a client should wait before sending a keepalive ping. If client sends keepalive ping more often, server will send GOAWAY and close the connection.",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "server.grpc.keepalive.min-time-between-pings",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "grpc_server_ping_without_stream_allowed",
          "required": false,
          "desc": "If true, server allows keepalive pings even when there are no active streams(RPCs). If false, and client sends ping when there are no active streams, server will send GOAWAY and close the connection.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "server.grpc.keepalive.ping-without-stream-allowed",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "log_format",
          "required": false,
          "desc": "Output log messages in the given format. Valid formats: [logfmt, json]",
          "fieldValue": null,
          "fieldDefaultValue": "logfmt",
          "fieldFlag": "log.format",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "log_level",
          "required": false,
          "desc": "Only log messages with the given severity or above. Valid levels: [debug, info, warn, error]",
          "fieldValue": null,
          "fieldDefaultValue": "info",
          "fieldFlag": "log.level",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "log_source_ips_enabled",
          "required": false,
          "desc": "Optionally log the source IPs.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "server.log-source-ips-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "log_source_ips_header",
          "required": false,
          "desc": "Header field storing the source IPs. Only used if server.log-source-ips-enabled is true. If not set the default Forwarded, X-Real-IP and X-Forwarded-For headers are used",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "server.log-source-ips-header",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "log_source_ips_regex",
          "required": false,
          "desc": "Regex for matching the source IPs. Only used if server.log-source-ips-enabled is true. If not set the default Forwarded, X-Real-IP and X-Forwarded-For headers are used",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "server.log-source-ips-regex",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "http_path_prefix",
          "required": false,
          "desc": "Base path to serve all API routes from (e.g. /v1/)",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "server.path-prefix",
          "fieldType": "string"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "distributor",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "pool",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "client_cleanup_period",
              "required": false,
              "desc": "How frequently to clean up clients for ingesters that have gone away.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "distributor.client-cleanup-period",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "health_check_ingesters",
              "required": false,
              "desc": "Run a health check on each ingester client during periodic cleanup.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "distributor.health-check-ingesters",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "ha_tracker",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enable_ha_tracker",
              "required": false,
              "desc": "Enable the distributors HA tracker so that it can accept samples from Prometheus HA replicas gracefully (requires labels).",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "distributor.ha-tracker.enable",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "ha_tracker_update_timeout",
              "required": false,
              "desc": "Update the timestamp in the KV store for a given cluster/replica only after this amount of time has passed since the current stored timestamp.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "distributor.ha-tracker.update-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "ha_tracker_update_timeout_jitter_max",
              "required": false,
              "desc": "Maximum jitter applied to the update timeout, in order to spread the HA heartbeats over time.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "distributor.ha-tracker.update-timeout-jitter-max",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "ha_tracker_failover_timeout",
              "required": false,
              "desc": "If we don't receive any samples from the accepted replica for a cluster in this amount of time we will failover to the next replica we receive a sample from. This value must be greater than the update timeout",
              "fieldValue": null,
              "fieldDefaultValue": 30000000000,
              "fieldFlag": "distributor.ha-tracker.failover-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "consul",
                  "fieldFlag": "distributor.ha-tracker.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "ha-tracker/",
                  "fieldFlag": "distributor.ha-tracker.prefix",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "distributor.ha-tracker.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.consul.acl-token",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "distributor.ha-tracker.consul.client-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ha-tracker.consul.consistent-reads",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "distributor.ha-tracker.consul.watch-rate-limit",
                      "fieldType": "float"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "distributor.ha-tracker.consul.watch-burst-size",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "distributor.ha-tracker.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "distributor.ha-tracker.etcd.dial-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "distributor.ha-tracker.etcd.max-retries",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-cert-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-key-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-ca-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-server-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ha-tracker.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.multi.primary",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ha-tracker.multi.secondary",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ha-tracker.multi.mirror-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "distributor.ha-tracker.multi.mirror-timeout",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "max_recv_msg_size",
          "required": false,
          "desc": "remote_write API max receive message size (bytes).",
          "fieldValue": null,
          "fieldDefaultValue": 104857600,
          "fieldFlag": "distributor.max-recv-msg-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "remote_timeout",
          "required": false,
          "desc": "Timeout for downstream ingesters.",
          "fieldValue": null,
          "fieldDefaultValue": 2000000000,
          "fieldFlag": "distributor.remote-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "extra_queue_delay",
          "required": false,
          "desc": "Time to wait before sending more than the minimum successful query requests.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "distributor.extra-query-delay",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "sharding_strategy",
          "required": false,
          "desc": "The sharding strategy to use. Supported values are: default, shuffle-sharding.",
          "fieldValue": null,
          "fieldDefaultValue": "default",
          "fieldFlag": "distributor.sharding-strategy",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "shard_by_all_labels",
          "required": false,
          "desc": "Distribute samples based on all labels, as opposed to solely by user and metric name.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "distributor.shard-by-all-labels",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "extend_writes",
          "required": false,
          "desc": "Try writing to an additional ingester in the presence of an ingester not in the ACTIVE state. It is useful to disable this along with -ingester.unregister-on-shutdown=false in order to not spread samples to extra ingesters during rolling restarts with consistent naming.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "distributor.extend-writes",
          "fieldType": "boolean"
        },
        {
          "kind": "block",
          "name": "ring",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "consul",
                  "fieldFlag": "distributor.ring.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "collectors/",
                  "fieldFlag": "distributor.ring.prefix",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "distributor.ring.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.consul.acl-token",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "distributor.ring.consul.client-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ring.consul.consistent-reads",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "distributor.ring.consul.watch-rate-limit",
                      "fieldType": "float"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "distributor.ring.consul.watch-burst-size",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "distributor.ring.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "distributor.ring.etcd.dial-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "distributor.ring.etcd.max-retries",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ring.etcd.tls-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.tls-cert-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.tls-key-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.tls-ca-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.tls-server-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ring.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.multi.primary",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "distributor.ring.multi.secondary",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "distributor.ring.multi.mirror-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "distributor.ring.multi.mirror-timeout",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to the ring. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "distributor.ring.heartbeat-period",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "heartbeat_timeout",
              "required": false,
              "desc": "The heartbeat timeout after which distributors are considered unhealthy within the ring. 0 = never (timeout disabled).",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "distributor.ring.heartbeat-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "instance_id",
              "required": false,
              "desc": "Instance ID to register in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": null,
              "fieldFlag": "distributor.ring.instance-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "instance_interface_names",
              "required": false,
              "desc": "Name of network interface to read address from.",
              "fieldValue": null,
              "fieldDefaultValue": [
                "eth0",
                "en0"
              ],
              "fieldFlag": "distributor.ring.instance-interface-names",
              "fieldType": "list of strings"
            },
            {
              "kind": "field",
              "name": "instance_port",
              "required": false,
              "desc": "Port to advertise in the ring (defaults to server.grpc-listen-port).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "distributor.ring.instance-port",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "instance_addr",
              "required": false,
              "desc": "IP address to advertise in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "distributor.ring.instance-addr",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "instance_limits",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_ingestion_rate",
              "required": false,
              "desc": "Max ingestion rate (samples/sec) that this distributor will accept. This limit is per-distributor, not per-tenant. Additional push requests will be rejected. Current ingestion rate is computed as exponentially weighted moving average, updated every second. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "distributor.instance-limits.max-ingestion-rate",
              "fieldType": "float"
            },
            {
              "kind": "field",
              "name": "max_inflight_push_requests",
              "required": false,
              "desc": "Max inflight push requests that this distributor can handle. This limit is per-distributor, not per-tenant. Additional requests will be rejected. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "distributor.instance-limits.max-inflight-push-requests",
              "fieldType": "int"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "querier",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "iterators",
          "required": false,
          "desc": "Use iterators to execute query, as opposed to fully materialising the series in memory.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "querier.iterators",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "batch_iterators",
          "required": false,
          "desc": "Use batch iterators to execute query, as opposed to fully materialising the series in memory.  Takes precedent over the -querier.iterators flag.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "querier.batch-iterators",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "query_ingesters_within",
          "required": false,
          "desc": "Maximum lookback beyond which queries are not sent to ingester. 0 means all queries are sent to ingester.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "querier.query-ingesters-within",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "query_store_for_labels_enabled",
          "required": false,
          "desc": "Query long-term store for series, label values and label names APIs. Works only with blocks engine.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "querier.query-store-for-labels-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "query_label_names_with_matchers_enabled",
          "required": false,
          "desc": "True to enable queriers to use an optimized implementation which passes down to ingesters the label matchers when running the label names API. Can be enabled once all ingesters run a version \u003e= the one where this option has been introduced.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "querier.query-label-names-with-matchers-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "query_store_after",
          "required": false,
          "desc": "The time after which a metric should be queried from storage and not just ingesters. 0 means all queries are sent to store. When running the blocks storage, if this option is enabled, the time range of the query sent to the store will be manipulated to ensure the query end is not more recent than 'now - query-store-after'.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "querier.query-store-after",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_query_into_future",
          "required": false,
          "desc": "Maximum duration into the future you can query. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 600000000000,
          "fieldFlag": "querier.max-query-into-future",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "store_gateway_addresses",
          "required": false,
          "desc": "Comma separated list of store-gateway addresses in DNS Service Discovery format. This option should be set when using the blocks storage and the store-gateway sharding is disabled (when enabled, the store-gateway instances form a ring and addresses are picked from the ring).",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "querier.store-gateway-addresses",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "store_gateway_client",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS for gRPC client connecting to store-gateway.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "querier.store-gateway-client.tls-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.store-gateway-client.tls-cert-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.store-gateway-client.tls-key-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.store-gateway-client.tls-ca-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.store-gateway-client.tls-server-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "querier.store-gateway-client.tls-insecure-skip-verify",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "second_store_engine",
          "required": false,
          "desc": "Second store engine to use for querying. Empty = disabled.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "querier.second-store-engine",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "use_second_store_before_time",
          "required": false,
          "desc": "If specified, second store is only used for queries before this timestamp. Default value 0 means secondary store is always queried.",
          "fieldValue": null,
          "fieldDefaultValue": {},
          "fieldFlag": "querier.use-second-store-before-time",
          "fieldType": "time"
        },
        {
          "kind": "field",
          "name": "shuffle_sharding_ingesters_lookback_period",
          "required": false,
          "desc": "When distributor's sharding strategy is shuffle-sharding and this setting is \u003e 0, queriers fetch in-memory series from the minimum set of required ingesters, selecting only ingesters which may have received series since 'now - lookback period'. The lookback period should be greater or equal than the configured 'query store after' and 'query ingesters within'. If this setting is 0, queriers always query all ingesters (ingesters shuffle sharding on read path is disabled).",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "querier.shuffle-sharding-ingesters-lookback-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_concurrent",
          "required": false,
          "desc": "The maximum number of concurrent queries. This config option should be set on query-frontend too when query sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": 20,
          "fieldFlag": "querier.max-concurrent",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "timeout",
          "required": false,
          "desc": "The timeout for a query. This config option should be set on query-frontend too when query sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": 120000000000,
          "fieldFlag": "querier.timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_samples",
          "required": false,
          "desc": "Maximum number of samples a single query can load into memory. This config option should be set on query-frontend too when query sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": 50000000,
          "fieldFlag": "querier.max-samples",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "at_modifier_enabled",
          "required": false,
          "desc": "Enable the @ modifier in PromQL. This config option should be set on query-frontend too when query sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "querier.at-modifier-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "default_evaluation_interval",
          "required": false,
          "desc": "The default evaluation interval or step size for subqueries. This config option should be set on query-frontend too when query sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "querier.default-evaluation-interval",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "active_query_tracker_dir",
          "required": false,
          "desc": "Active query tracker monitors active queries, and writes them to the file in given directory. If any queries are discovered in this file during startup, it will log them to the log file. Setting to empty value disables active query tracker, which also disables -querier.max-concurrent option. This config option should be set on query-frontend too when query sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": "./active-query-tracker",
          "fieldFlag": "querier.active-query-tracker-dir",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "lookback_delta",
          "required": false,
          "desc": "Time since the last sample after which a time series is considered stale and ignored by expression evaluations. This config option should be set on query-frontend too when query sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": 300000000000,
          "fieldFlag": "querier.lookback-delta",
          "fieldType": "duration"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "ingester_client",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "grpc_client_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_recv_msg_size",
              "required": false,
              "desc": "gRPC client max receive message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "ingester.client.grpc-max-recv-msg-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "max_send_msg_size",
              "required": false,
              "desc": "gRPC client max send message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 16777216,
              "fieldFlag": "ingester.client.grpc-max-send-msg-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "grpc_compression",
              "required": false,
              "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.client.grpc-compression",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "rate_limit",
              "required": false,
              "desc": "Rate limit for gRPC client; 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.client.grpc-client-rate-limit",
              "fieldType": "float"
            },
            {
              "kind": "field",
              "name": "rate_limit_burst",
              "required": false,
              "desc": "Rate limit burst for gRPC client.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.client.grpc-client-rate-limit-burst",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "backoff_on_ratelimits",
              "required": false,
              "desc": "Enable backoff and retry when we hit ratelimits.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ingester.client.backoff-on-ratelimits",
              "fieldType": "boolean"
            },
            {
              "kind": "block",
              "name": "backoff_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "min_period",
                  "required": false,
                  "desc": "Minimum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "ingester.client.backoff-min-period",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_period",
                  "required": false,
                  "desc": "Maximum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "ingester.client.backoff-max-period",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of times to backoff and retry before failing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "ingester.client.backoff-retries",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ingester.client.tls-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.client.tls-cert-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.client.tls-key-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.client.tls-ca-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.client.tls-server-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ingester.client.tls-insecure-skip-verify",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "ingester",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "walconfig",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "wal_enabled",
              "required": false,
              "desc": "Enable writing of ingested data into WAL.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ingester.wal-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "checkpoint_enabled",
              "required": false,
              "desc": "Enable checkpointing of in-memory chunks. It should always be true when using normally. Set it to false iff you are doing some small tests as there is no mechanism to delete the old WAL yet if checkpoint is disabled.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "ingester.checkpoint-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "recover_from_wal",
              "required": false,
              "desc": "Recover data from existing WAL irrespective of WAL enabled/disabled.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ingester.recover-from-wal",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "wal_dir",
              "required": false,
              "desc": "Directory to store the WAL and/or recover from WAL.",
              "fieldValue": null,
              "fieldDefaultValue": "wal",
              "fieldFlag": "ingester.wal-dir",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "checkpoint_duration",
              "required": false,
              "desc": "Interval at which checkpoints should be created.",
              "fieldValue": null,
              "fieldDefaultValue": 1800000000000,
              "fieldFlag": "ingester.checkpoint-duration",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "flush_on_shutdown_with_wal_enabled",
              "required": false,
              "desc": "When WAL is enabled, should chunks be flushed to long-term storage on shutdown. Useful eg. for migration to blocks engine.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ingester.flush-on-shutdown-with-wal-enabled",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "lifecycler",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "ring",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "block",
                  "name": "kvstore",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "store",
                      "required": false,
                      "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                      "fieldValue": null,
                      "fieldDefaultValue": "consul",
                      "fieldFlag": "ring.store",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "prefix",
                      "required": false,
                      "desc": "The prefix for the keys in the store. Should end with a /.",
                      "fieldValue": null,
                      "fieldDefaultValue": "collectors/",
                      "fieldFlag": "ring.prefix",
                      "fieldType": "string"
                    },
                    {
                      "kind": "block",
                      "name": "consul",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "host",
                          "required": false,
                          "desc": "Hostname and port of Consul.",
                          "fieldValue": null,
                          "fieldDefaultValue": "localhost:8500",
                          "fieldFlag": "consul.hostname",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "acl_token",
                          "required": false,
                          "desc": "ACL Token used to interact with Consul.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "consul.acl-token",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "http_client_timeout",
                          "required": false,
                          "desc": "HTTP timeout when talking to Consul",
                          "fieldValue": null,
                          "fieldDefaultValue": 20000000000,
                          "fieldFlag": "consul.client-timeout",
                          "fieldType": "duration"
                        },
                        {
                          "kind": "field",
                          "name": "consistent_reads",
                          "required": false,
                          "desc": "Enable consistent reads to Consul.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "consul.consistent-reads",
                          "fieldType": "boolean"
                        },
                        {
                          "kind": "field",
                          "name": "watch_rate_limit",
                          "required": false,
                          "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                          "fieldValue": null,
                          "fieldDefaultValue": 1,
                          "fieldFlag": "consul.watch-rate-limit",
                          "fieldType": "float"
                        },
                        {
                          "kind": "field",
                          "name": "watch_burst_size",
                          "required": false,
                          "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                          "fieldValue": null,
                          "fieldDefaultValue": 1,
                          "fieldFlag": "consul.watch-burst-size",
                          "fieldType": "int"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    },
                    {
                      "kind": "block",
                      "name": "etcd",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "endpoints",
                          "required": false,
                          "desc": "The etcd endpoints to connect to.",
                          "fieldValue": null,
                          "fieldDefaultValue": [],
                          "fieldFlag": "etcd.endpoints",
                          "fieldType": "list of strings"
                        },
                        {
                          "kind": "field",
                          "name": "dial_timeout",
                          "required": false,
                          "desc": "The dial timeout for the etcd connection.",
                          "fieldValue": null,
                          "fieldDefaultValue": 10000000000,
                          "fieldFlag": "etcd.dial-timeout",
                          "fieldType": "duration"
                        },
                        {
                          "kind": "field",
                          "name": "max_retries",
                          "required": false,
                          "desc": "The maximum number of retries to do for failed ops.",
                          "fieldValue": null,
                          "fieldDefaultValue": 10,
                          "fieldFlag": "etcd.max-retries",
                          "fieldType": "int"
                        },
                        {
                          "kind": "field",
                          "name": "tls_enabled",
                          "required": false,
                          "desc": "Enable TLS.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "etcd.tls-enabled",
                          "fieldType": "boolean"
                        },
                        {
                          "kind": "field",
                          "name": "tls_cert_path",
                          "required": false,
                          "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "etcd.tls-cert-path",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "tls_key_path",
                          "required": false,
                          "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "etcd.tls-key-path",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "tls_ca_path",
                          "required": false,
                          "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "etcd.tls-ca-path",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "tls_server_name",
                          "required": false,
                          "desc": "Override the expected name on the server certificate.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "etcd.tls-server-name",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "tls_insecure_skip_verify",
                          "required": false,
                          "desc": "Skip validating server certificate.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "etcd.tls-insecure-skip-verify",
                          "fieldType": "boolean"
                        },
                        {
                          "kind": "field",
                          "name": "username",
                          "required": false,
                          "desc": "Etcd username.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "etcd.username",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "password",
                          "required": false,
                          "desc": "Etcd password.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "etcd.password",
                          "fieldType": "string"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    },
                    {
                      "kind": "block",
                      "name": "multi",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "primary",
                          "required": false,
                          "desc": "Primary backend storage used by multi-client.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "multi.primary",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "secondary",
                          "required": false,
                          "desc": "Secondary backend storage used by multi-client.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "multi.secondary",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "mirror_enabled",
                          "required": false,
                          "desc": "Mirror writes to secondary store.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "multi.mirror-enabled",
                          "fieldType": "boolean"
                        },
                        {
                          "kind": "field",
                          "name": "mirror_timeout",
                          "required": false,
                          "desc": "Timeout for storing value to secondary store.",
                          "fieldValue": null,
                          "fieldDefaultValue": 2000000000,
                          "fieldFlag": "multi.mirror-timeout",
                          "fieldType": "duration"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "heartbeat_timeout",
                  "required": false,
                  "desc": "The heartbeat timeout after which ingesters are skipped for reads/writes. 0 = never (timeout disabled).",
                  "fieldValue": null,
                  "fieldDefaultValue": 60000000000,
                  "fieldFlag": "ring.heartbeat-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "replication_factor",
                  "required": false,
                  "desc": "The number of ingesters to write to and read from.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3,
                  "fieldFlag": "distributor.replication-factor",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "zone_awareness_enabled",
                  "required": false,
                  "desc": "True to enable the zone-awareness and replicate ingested samples across different availability zones.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "distributor.zone-awareness-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "excluded_zones",
                  "required": false,
                  "desc": "Comma-separated list of zones to exclude from the ring. Instances in excluded zones will be filtered out from the ring.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "distributor.excluded-zones",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "num_tokens",
              "required": false,
              "desc": "Number of tokens for each ingester.",
              "fieldValue": null,
              "fieldDefaultValue": 128,
              "fieldFlag": "ingester.num-tokens",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to consul. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "ingester.heartbeat-period",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "observe_period",
              "required": false,
              "desc": "Observe tokens after generating to resolve collisions. Useful when using gossiping ring.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.observe-period",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "join_after",
              "required": false,
              "desc": "Period to wait for a claim from another member; will join automatically after this.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.join-after",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "min_ready_duration",
              "required": false,
              "desc": "Minimum duration to wait after the internal readiness checks have passed but before succeeding the readiness endpoint. This is used to slowdown deployment controllers (eg. Kubernetes) after an instance is ready and before they proceed with a rolling update, to give the rest of the cluster instances enough time to receive ring updates.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "ingester.min-ready-duration",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "interface_names",
              "required": false,
              "desc": "Name of network interface to read address from.",
              "fieldValue": null,
              "fieldDefaultValue": [
                "eth0",
                "en0"
              ],
              "fieldFlag": "ingester.lifecycler.interface",
              "fieldType": "list of strings"
            },
            {
              "kind": "field",
              "name": "final_sleep",
              "required": false,
              "desc": "Duration to sleep for before exiting, to ensure metrics are scraped.",
              "fieldValue": null,
              "fieldDefaultValue": 30000000000,
              "fieldFlag": "ingester.final-sleep",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "tokens_file_path",
              "required": false,
              "desc": "File path where tokens are stored. If empty, tokens are not stored at shutdown and restored at startup.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.tokens-file-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "availability_zone",
              "required": false,
              "desc": "The availability zone where this instance is running.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.availability-zone",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "unregister_on_shutdown",
              "required": false,
              "desc": "Unregister from the ring upon clean shutdown. It can be useful to disable for rolling restarts with consistent naming in conjunction with -distributor.extend-writes=false.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "ingester.unregister-on-shutdown",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "readiness_check_ring_health",
              "required": false,
              "desc": "When enabled the readiness probe succeeds only after all instances are ACTIVE and healthy in the ring, otherwise only the instance itself is checked. This option should be disabled if in your cluster multiple instances can be rolled out simultaneously, otherwise rolling updates may be slowed down.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "ingester.readiness-check-ring-health",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "address",
              "required": false,
              "desc": "IP address to advertise in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ingester.lifecycler.addr",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "max_transfer_retries",
          "required": false,
          "desc": "Number of times to try and transfer chunks before falling back to flushing. Negative value or zero disables hand-over. This feature is supported only by the chunks storage.",
          "fieldValue": null,
          "fieldDefaultValue": 10,
          "fieldFlag": "ingester.max-transfer-retries",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "flush_period",
          "required": false,
          "desc": "Period with which to attempt to flush chunks.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ingester.flush-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "retain_period",
          "required": false,
          "desc": "Period chunks will remain in memory after flushing.",
          "fieldValue": null,
          "fieldDefaultValue": 300000000000,
          "fieldFlag": "ingester.retain-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_chunk_idle_time",
          "required": false,
          "desc": "Maximum chunk idle time before flushing.",
          "fieldValue": null,
          "fieldDefaultValue": 300000000000,
          "fieldFlag": "ingester.max-chunk-idle",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_stale_chunk_idle_time",
          "required": false,
          "desc": "Maximum chunk idle time for chunks terminating in stale markers before flushing. 0 disables it and a stale series is not flushed until the max-chunk-idle timeout is reached.",
          "fieldValue": null,
          "fieldDefaultValue": 120000000000,
          "fieldFlag": "ingester.max-stale-chunk-idle",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "flush_op_timeout",
          "required": false,
          "desc": "Timeout for individual flush operations.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ingester.flush-op-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_chunk_age",
          "required": false,
          "desc": "Maximum chunk age before flushing.",
          "fieldValue": null,
          "fieldDefaultValue": 43200000000000,
          "fieldFlag": "ingester.max-chunk-age",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "chunk_age_jitter",
          "required": false,
          "desc": "Range of time to subtract from -ingester.max-chunk-age to spread out flushes",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ingester.chunk-age-jitter",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "concurrent_flushes",
          "required": false,
          "desc": "Number of concurrent goroutines flushing to dynamodb.",
          "fieldValue": null,
          "fieldDefaultValue": 50,
          "fieldFlag": "ingester.concurrent-flushes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "spread_flushes",
          "required": false,
          "desc": "If true, spread series flushes across the whole period of -ingester.max-chunk-age.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "ingester.spread-flushes",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "metadata_retain_period",
          "required": false,
          "desc": "Period at which metadata we have not seen will remain in memory before being deleted.",
          "fieldValue": null,
          "fieldDefaultValue": 600000000000,
          "fieldFlag": "ingester.metadata-retain-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "rate_update_period",
          "required": false,
          "desc": "Period with which to update the per-user ingestion rates.",
          "fieldValue": null,
          "fieldDefaultValue": 15000000000,
          "fieldFlag": "ingester.rate-update-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "active_series_metrics_enabled",
          "required": false,
          "desc": "Enable tracking of active series and export them as metrics.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "ingester.active-series-metrics-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "active_series_metrics_update_period",
          "required": false,
          "desc": "How often to update active series metrics.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ingester.active-series-metrics-update-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "active_series_metrics_idle_timeout",
          "required": false,
          "desc": "After what time a series is considered to be inactive.",
          "fieldValue": null,
          "fieldDefaultValue": 600000000000,
          "fieldFlag": "ingester.active-series-metrics-idle-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "active_series_custom_trackers",
          "required": false,
          "desc": "Additional custom trackers for active metrics. Active series matching a provided matcher (map value) will be exposed in the custom trackers metric labeled using the tracker name (map key).",
          "fieldValue": null,
          "fieldDefaultValue": {},
          "fieldFlag": "ingester.active-series-custom-trackers",
          "fieldType": "map of tracker name (string) to matcher (string)"
        },
        {
          "kind": "field",
          "name": "exemplars_update_period",
          "required": false,
          "desc": "Period with which to update per-user max exemplars.",
          "fieldValue": null,
          "fieldDefaultValue": 15000000000,
          "fieldFlag": "ingester.exemplars-update-period",
          "fieldType": "duration"
        },
        {
          "kind": "block",
          "name": "instance_limits",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_ingestion_rate",
              "required": false,
              "desc": "Max ingestion rate (samples/sec) that ingester will accept. This limit is per-ingester, not per-tenant. Additional push requests will be rejected. Current ingestion rate is computed as exponentially weighted moving average, updated every second. This limit only works when using blocks engine. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.instance-limits.max-ingestion-rate",
              "fieldType": "float"
            },
            {
              "kind": "field",
              "name": "max_tenants",
              "required": false,
              "desc": "Max users that this ingester can hold. Requests from additional users will be rejected. This limit only works when using blocks engine. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.instance-limits.max-tenants",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "max_series",
              "required": false,
              "desc": "Max series that this ingester can hold (across all tenants). Requests to create additional series will be rejected. This limit only works when using blocks engine. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ingester.instance-limits.max-series",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "max_inflight_push_requests",
              "required": false,
              "desc": "Max inflight push requests that this ingester can handle (across all tenants). Additional requests will be rejected. 0 = unlimited.",
              "fieldValue": null,
              "fieldDefaultValue": 30000,
              "fieldFlag": "ingester.instance-limits.max-inflight-push-requests",
              "fieldType": "int"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "ignore_series_limit_for_metric_names",
          "required": false,
          "desc": "Comma-separated list of metric names, for which -ingester.max-series-per-metric and -ingester.max-global-series-per-metric limits will be ignored. Does not affect max-series-per-user or max-global-series-per-metric limits.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "ingester.ignore-series-limit-for-metric-names",
          "fieldType": "string"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "flusher",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "wal_dir",
          "required": false,
          "desc": "Directory to read WAL from (chunks storage engine only).",
          "fieldValue": null,
          "fieldDefaultValue": "wal",
          "fieldFlag": "flusher.wal-dir",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "concurrent_flushes",
          "required": false,
          "desc": "Number of concurrent goroutines flushing to storage (chunks storage engine only).",
          "fieldValue": null,
          "fieldDefaultValue": 50,
          "fieldFlag": "flusher.concurrent-flushes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "flush_op_timeout",
          "required": false,
          "desc": "Timeout for individual flush operations (chunks storage engine only).",
          "fieldValue": null,
          "fieldDefaultValue": 120000000000,
          "fieldFlag": "flusher.flush-op-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "exit_after_flush",
          "required": false,
          "desc": "Stop after flush has finished. If false, process will keep running, doing nothing.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "flusher.exit-after-flush",
          "fieldType": "boolean"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "storage",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "engine",
          "required": false,
          "desc": "The storage engine to use: chunks (deprecated) or blocks.",
          "fieldValue": null,
          "fieldDefaultValue": "chunks",
          "fieldFlag": "store.engine",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "aws",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "dynamodb",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "dynamodb_url",
                  "required": false,
                  "desc": "DynamoDB endpoint URL with escaped Key and Secret encoded. If only region is specified as a host, proper endpoint will be deduced. Use inmemory:///\u003ctable-name\u003e to use a mock in-memory implementation.",
                  "fieldValue": null,
                  "fieldDefaultValue": {},
                  "fieldFlag": "dynamodb.url",
                  "fieldType": "url"
                },
                {
                  "kind": "field",
                  "name": "api_limit",
                  "required": false,
                  "desc": "DynamoDB table management requests per second limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 2,
                  "fieldFlag": "dynamodb.api-limit",
                  "fieldType": "float"
                },
                {
                  "kind": "field",
                  "name": "throttle_limit",
                  "required": false,
                  "desc": "DynamoDB rate cap to back off when throttled.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "dynamodb.throttle-limit",
                  "fieldType": "float"
                },
                {
                  "kind": "block",
                  "name": "metrics",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "url",
                      "required": false,
                      "desc": "Use metrics-based autoscaling, via this query URL",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "metrics.url",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "target_queue_length",
                      "required": false,
                      "desc": "Queue length above which we will scale up capacity",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000,
                      "fieldFlag": "metrics.target-queue-length",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "scale_up_factor",
                      "required": false,
                      "desc": "Scale up capacity by this multiple",
                      "fieldValue": null,
                      "fieldDefaultValue": 1.3,
                      "fieldFlag": "metrics.scale-up-factor",
                      "fieldType": "float"
                    },
                    {
                      "kind": "field",
                      "name": "ignore_throttle_below",
                      "required": false,
                      "desc": "Ignore throttling below this level (rate per second)",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "metrics.ignore-throttle-below",
                      "fieldType": "float"
                    },
                    {
                      "kind": "field",
                      "name": "queue_length_query",
                      "required": false,
                      "desc": "query to fetch ingester queue length",
                      "fieldValue": null,
                      "fieldDefaultValue": "sum(avg_over_time(cortex_ingester_flush_queue_length{job=\"cortex/ingester\"}[2m]))",
                      "fieldFlag": "metrics.queue-length-query",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "write_throttle_query",
                      "required": false,
                      "desc": "query to fetch throttle rates per table",
                      "fieldValue": null,
                      "fieldDefaultValue": "sum(rate(cortex_dynamo_throttled_total{operation=\"DynamoDB.BatchWriteItem\"}[1m])) by (table) \u003e 0",
                      "fieldFlag": "metrics.write-throttle-query",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "write_usage_query",
                      "required": false,
                      "desc": "query to fetch write capacity usage per table",
                      "fieldValue": null,
                      "fieldDefaultValue": "sum(rate(cortex_dynamo_consumed_capacity_total{operation=\"DynamoDB.BatchWriteItem\"}[15m])) by (table) \u003e 0",
                      "fieldFlag": "metrics.usage-query",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "read_usage_query",
                      "required": false,
                      "desc": "query to fetch read capacity usage per table",
                      "fieldValue": null,
                      "fieldDefaultValue": "sum(rate(cortex_dynamo_consumed_capacity_total{operation=\"DynamoDB.QueryPages\"}[1h])) by (table) \u003e 0",
                      "fieldFlag": "metrics.read-usage-query",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "read_error_query",
                      "required": false,
                      "desc": "query to fetch read errors per table",
                      "fieldValue": null,
                      "fieldDefaultValue": "sum(increase(cortex_dynamo_failures_total{operation=\"DynamoDB.QueryPages\",error=\"ProvisionedThroughputExceededException\"}[1m])) by (table) \u003e 0",
                      "fieldFlag": "metrics.read-error-query",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "chunk_gang_size",
                  "required": false,
                  "desc": "Number of chunks to group together to parallelize fetches (zero to disable)",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "dynamodb.chunk-gang-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "chunk_get_max_parallelism",
                  "required": false,
                  "desc": "Max number of chunk-get operations to start in parallel",
                  "fieldValue": null,
                  "fieldDefaultValue": 32,
                  "fieldFlag": "dynamodb.chunk.get-max-parallelism",
                  "fieldType": "int"
                },
                {
                  "kind": "block",
                  "name": "backoff_config",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "min_period",
                      "required": false,
                      "desc": "Minimum backoff time",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "dynamodb.min-backoff",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_period",
                      "required": false,
                      "desc": "Maximum backoff time",
                      "fieldValue": null,
                      "fieldDefaultValue": 50000000000,
                      "fieldFlag": "dynamodb.max-backoff",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "Maximum number of times to retry an operation",
                      "fieldValue": null,
                      "fieldDefaultValue": 20,
                      "fieldFlag": "dynamodb.max-retries",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "s3",
              "required": false,
              "desc": "S3 endpoint URL with escaped Key and Secret encoded. If only region is specified as a host, proper endpoint will be deduced. Use inmemory:///\u003cbucket-name\u003e to use a mock in-memory implementation.",
              "fieldValue": null,
              "fieldDefaultValue": {},
              "fieldFlag": "s3.url",
              "fieldType": "url"
            },
            {
              "kind": "field",
              "name": "s3forcepathstyle",
              "required": false,
              "desc": "Set this to `true` to force the request to use path-style addressing.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "s3.force-path-style",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "bucketnames",
              "required": false,
              "desc": "Comma separated list of bucket names to evenly distribute chunks over. Overrides any buckets specified in s3.url flag",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "s3.buckets",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "endpoint",
              "required": false,
              "desc": "S3 Endpoint to connect to.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "s3.endpoint",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region",
              "required": false,
              "desc": "AWS region to use.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "s3.region",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "access_key_id",
              "required": false,
              "desc": "AWS Access Key ID",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "s3.access-key-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "secret_access_key",
              "required": false,
              "desc": "AWS Secret Access Key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "s3.secret-access-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "insecure",
              "required": false,
              "desc": "Disable https on s3 connection.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "s3.insecure",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "sse_encryption",
              "required": false,
              "desc": "Enable AWS Server Side Encryption [Deprecated: Use .sse instead. if s3.sse-encryption is enabled, it assumes .sse.type SSE-S3]",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "s3.sse-encryption",
              "fieldType": "boolean"
            },
            {
              "kind": "block",
              "name": "http_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "idle_conn_timeout",
                  "required": false,
                  "desc": "The maximum amount of time an idle connection will be held open.",
                  "fieldValue": null,
                  "fieldDefaultValue": 90000000000,
                  "fieldFlag": "s3.http.idle-conn-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "response_header_timeout",
                  "required": false,
                  "desc": "If non-zero, specifies the amount of time to wait for a server's response headers after fully writing the request.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "s3.http.response-header-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "insecure_skip_verify",
                  "required": false,
                  "desc": "Set to false to skip verifying the certificate chain and hostname.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "s3.http.insecure-skip-verify",
                  "fieldType": "boolean"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "signature_version",
              "required": false,
              "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
              "fieldValue": null,
              "fieldDefaultValue": "v4",
              "fieldFlag": "s3.signature-version",
              "fieldType": "string"
            },
            {
              "kind": "block",
              "name": "sse",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "type",
                  "required": false,
                  "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "s3.sse.type",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_key_id",
                  "required": false,
                  "desc": "KMS Key ID used to encrypt objects in S3",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "s3.sse.kms-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_encryption_context",
                  "required": false,
                  "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "s3.sse.kms-encryption-context",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "azure",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "environment",
              "required": false,
              "desc": "Azure Cloud environment. Supported values are: AzureGlobal, AzureChinaCloud, AzureGermanCloud, AzureUSGovernment.",
              "fieldValue": null,
              "fieldDefaultValue": "AzureGlobal",
              "fieldFlag": "azure.environment",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Name of the blob container used to store chunks. This container must be created prior to execution.",
              "fieldValue": null,
              "fieldDefaultValue": "cortex",
              "fieldFlag": "azure.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "account_name",
              "required": false,
              "desc": "The Microsoft Azure account name to be used",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "azure.account-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "account_key",
              "required": false,
              "desc": "The Microsoft Azure account key to use.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "azure.account-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "download_buffer_size",
              "required": false,
              "desc": "Preallocated buffer size for downloads.",
              "fieldValue": null,
              "fieldDefaultValue": 512000,
              "fieldFlag": "azure.download-buffer-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "upload_buffer_size",
              "required": false,
              "desc": "Preallocated buffer size for uploads.",
              "fieldValue": null,
              "fieldDefaultValue": 256000,
              "fieldFlag": "azure.upload-buffer-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "upload_buffer_count",
              "required": false,
              "desc": "Number of buffers used to used to upload a chunk.",
              "fieldValue": null,
              "fieldDefaultValue": 1,
              "fieldFlag": "azure.download-buffer-count",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "request_timeout",
              "required": false,
              "desc": "Timeout for requests made against azure blob storage.",
              "fieldValue": null,
              "fieldDefaultValue": 30000000000,
              "fieldFlag": "azure.request-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Number of retries for a request which times out.",
              "fieldValue": null,
              "fieldDefaultValue": 5,
              "fieldFlag": "azure.max-retries",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "min_retry_delay",
              "required": false,
              "desc": "Minimum time to wait before retrying a request.",
              "fieldValue": null,
              "fieldDefaultValue": 10000000,
              "fieldFlag": "azure.min-retry-delay",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "max_retry_delay",
              "required": false,
              "desc": "Maximum time to wait before retrying a request.",
              "fieldValue": null,
              "fieldDefaultValue": 500000000,
              "fieldFlag": "azure.max-retry-delay",
              "fieldType": "duration"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "bigtable",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "project",
              "required": false,
              "desc": "Bigtable project ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "bigtable.project",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "instance",
              "required": false,
              "desc": "Bigtable instance ID. Please refer to https://cloud.google.com/docs/authentication/production for more information about how to configure authentication.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "bigtable.instance",
              "fieldType": "string"
            },
            {
              "kind": "block",
              "name": "grpc_client_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "max_recv_msg_size",
                  "required": false,
                  "desc": "gRPC client max receive message size (bytes).",
                  "fieldValue": null,
                  "fieldDefaultValue": 104857600,
                  "fieldFlag": "bigtable.grpc-max-recv-msg-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_send_msg_size",
                  "required": false,
                  "desc": "gRPC client max send message size (bytes).",
                  "fieldValue": null,
                  "fieldDefaultValue": 16777216,
                  "fieldFlag": "bigtable.grpc-max-send-msg-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "grpc_compression",
                  "required": false,
                  "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "bigtable.grpc-compression",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "rate_limit",
                  "required": false,
                  "desc": "Rate limit for gRPC client; 0 means disabled.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "bigtable.grpc-client-rate-limit",
                  "fieldType": "float"
                },
                {
                  "kind": "field",
                  "name": "rate_limit_burst",
                  "required": false,
                  "desc": "Rate limit burst for gRPC client.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "bigtable.grpc-client-rate-limit-burst",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "backoff_on_ratelimits",
                  "required": false,
                  "desc": "Enable backoff and retry when we hit ratelimits.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "bigtable.backoff-on-ratelimits",
                  "fieldType": "boolean"
                },
                {
                  "kind": "block",
                  "name": "backoff_config",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "min_period",
                      "required": false,
                      "desc": "Minimum delay when backing off.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "bigtable.backoff-min-period",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_period",
                      "required": false,
                      "desc": "Maximum delay when backing off.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "bigtable.backoff-max-period",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "Number of times to backoff and retry before failing.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "bigtable.backoff-retries",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "bigtable.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "bigtable.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "bigtable.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "bigtable.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "bigtable.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "bigtable.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "table_cache_enabled",
              "required": false,
              "desc": "If enabled, once a tables info is fetched, it is cached.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "bigtable.table-cache.enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "table_cache_expiration",
              "required": false,
              "desc": "Duration to cache tables before checking again.",
              "fieldValue": null,
              "fieldDefaultValue": 1800000000000,
              "fieldFlag": "bigtable.table-cache.expiration",
              "fieldType": "duration"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "gcs",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "Name of GCS bucket. Please refer to https://cloud.google.com/docs/authentication/production for more information about how to configure authentication.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "gcs.bucketname",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "chunk_buffer_size",
              "required": false,
              "desc": "The size of the buffer that GCS client for each PUT request. 0 to disable buffering.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "gcs.chunk-buffer-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "request_timeout",
              "required": false,
              "desc": "The duration after which the requests to GCS should be timed out.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "gcs.request-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "enable_opencensus",
              "required": false,
              "desc": "Enabled OpenCensus (OC) instrumentation for all requests.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "gcs.enable-opencensus",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "cassandra",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "addresses",
              "required": false,
              "desc": "Comma-separated hostnames or IPs of Cassandra instances.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "cassandra.addresses",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "port",
              "required": false,
              "desc": "Port that Cassandra is running on",
              "fieldValue": null,
              "fieldDefaultValue": 9042,
              "fieldFlag": "cassandra.port",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "keyspace",
              "required": false,
              "desc": "Keyspace to use in Cassandra.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "cassandra.keyspace",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "consistency",
              "required": false,
              "desc": "Consistency level for Cassandra.",
              "fieldValue": null,
              "fieldDefaultValue": "QUORUM",
              "fieldFlag": "cassandra.consistency",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "replication_factor",
              "required": false,
              "desc": "Replication factor to use in Cassandra.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "cassandra.replication-factor",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "disable_initial_host_lookup",
              "required": false,
              "desc": "Instruct the cassandra driver to not attempt to get host info from the system.peers table.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "cassandra.disable-initial-host-lookup",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "SSL",
              "required": false,
              "desc": "Use SSL when connecting to cassandra instances.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "cassandra.ssl",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "host_verification",
              "required": false,
              "desc": "Require SSL certificate validation.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "cassandra.host-verification",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "host_selection_policy",
              "required": false,
              "desc": "Policy for selecting Cassandra host. Supported values are: round-robin, token-aware.",
              "fieldValue": null,
              "fieldDefaultValue": "round-robin",
              "fieldFlag": "cassandra.host-selection-policy",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "CA_path",
              "required": false,
              "desc": "Path to certificate file to verify the peer.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "cassandra.ca-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to certificate file used by TLS.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "cassandra.tls-cert-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to private key file used by TLS.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "cassandra.tls-key-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "auth",
              "required": false,
              "desc": "Enable password authentication when connecting to cassandra.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "cassandra.auth",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "username",
              "required": false,
              "desc": "Username to use when connecting to cassandra.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "cassandra.username",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "password",
              "required": false,
              "desc": "Password to use when connecting to cassandra.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "cassandra.password",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "password_file",
              "required": false,
              "desc": "File containing password to use when connecting to cassandra.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "cassandra.password-file",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "custom_authenticators",
              "required": false,
              "desc": "If set, when authenticating with cassandra a custom authenticator will be expected during the handshake. This flag can be set multiple times.",
              "fieldValue": null,
              "fieldDefaultValue": [],
              "fieldFlag": "cassandra.custom-authenticator",
              "fieldType": "list of strings"
            },
            {
              "kind": "field",
              "name": "timeout",
              "required": false,
              "desc": "Timeout when connecting to cassandra.",
              "fieldValue": null,
              "fieldDefaultValue": 2000000000,
              "fieldFlag": "cassandra.timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "connect_timeout",
              "required": false,
              "desc": "Initial connection timeout, used during initial dial to server.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "cassandra.connect-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "reconnect_interval",
              "required": false,
              "desc": "Interval to retry connecting to cassandra nodes marked as DOWN.",
              "fieldValue": null,
              "fieldDefaultValue": 1000000000,
              "fieldFlag": "cassandra.reconnent-interval",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Number of retries to perform on a request. Set to 0 to disable retries.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "cassandra.max-retries",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "retry_max_backoff",
              "required": false,
              "desc": "Maximum time to wait before retrying a failed request.",
              "fieldValue": null,
              "fieldDefaultValue": 10000000000,
              "fieldFlag": "cassandra.retry-max-backoff",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "retry_min_backoff",
              "required": false,
              "desc": "Minimum time to wait before retrying a failed request.",
              "fieldValue": null,
              "fieldDefaultValue": 100000000,
              "fieldFlag": "cassandra.retry-min-backoff",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "query_concurrency",
              "required": false,
              "desc": "Limit number of concurrent queries to Cassandra. Set to 0 to disable the limit.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "cassandra.query-concurrency",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "num_connections",
              "required": false,
              "desc": "Number of TCP connections per host.",
              "fieldValue": null,
              "fieldDefaultValue": 2,
              "fieldFlag": "cassandra.num-connections",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "convict_hosts_on_failure",
              "required": false,
              "desc": "Convict hosts of being down on failure.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "cassandra.convict-hosts-on-failure",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "table_options",
              "required": false,
              "desc": "Table options used to create index or chunk tables. This value is used as plain text in the table `WITH` like this, \"CREATE TABLE \u003cgenerated_by_cortex\u003e (...) WITH \u003ccassandra.table-options\u003e\". For details, see https://cortexmetrics.io/docs/production/cassandra. By default it will use the default table options of your Cassandra cluster.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "cassandra.table-options",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "boltdb",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "directory",
              "required": false,
              "desc": "Location of BoltDB index files.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "boltdb.dir",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "filesystem",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "directory",
              "required": false,
              "desc": "Directory to store chunks in.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "local.chunk-directory",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "swift",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "auth_version",
              "required": false,
              "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "swift.auth-version",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "auth_url",
              "required": false,
              "desc": "OpenStack Swift authentication URL",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.auth-url",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "username",
              "required": false,
              "desc": "OpenStack Swift username.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.username",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.user-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.user-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_id",
              "required": false,
              "desc": "OpenStack Swift user ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.user-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "password",
              "required": false,
              "desc": "OpenStack Swift API key.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.password",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_id",
              "required": false,
              "desc": "OpenStack Swift project ID (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.project-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_name",
              "required": false,
              "desc": "OpenStack Swift project name (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.project-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_id",
              "required": false,
              "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.project-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_name",
              "required": false,
              "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.project-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region_name",
              "required": false,
              "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.region-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Name of the OpenStack Swift container to put chunks in.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "swift.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Max retries on requests error.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "swift.max-retries",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "connect_timeout",
              "required": false,
              "desc": "Time after which a connection attempt is aborted.",
              "fieldValue": null,
              "fieldDefaultValue": 10000000000,
              "fieldFlag": "swift.connect-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "request_timeout",
              "required": false,
              "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "swift.request-timeout",
              "fieldType": "duration"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "index_cache_validity",
          "required": false,
          "desc": "Cache validity for active index entries. Should be no higher than -ingester.max-chunk-idle.",
          "fieldValue": null,
          "fieldDefaultValue": 300000000000,
          "fieldFlag": "store.index-cache-validity",
          "fieldType": "duration"
        },
        {
          "kind": "block",
          "name": "index_queries_cache_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enable_fifocache",
              "required": false,
              "desc": "Cache config for index entry reading. Enable in-memory cache.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "store.index-cache-read.cache.enable-fifocache",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "default_validity",
              "required": false,
              "desc": "Cache config for index entry reading. The default validity of entries for caches unless overridden.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "store.index-cache-read.default-validity",
              "fieldType": "duration"
            },
            {
              "kind": "block",
              "name": "background",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "writeback_goroutines",
                  "required": false,
                  "desc": "Cache config for index entry reading. At what concurrency to write back to cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "store.index-cache-read.background.write-back-concurrency",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "writeback_buffer",
                  "required": false,
                  "desc": "Cache config for index entry reading. How many key batches to buffer for background write-back.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000,
                  "fieldFlag": "store.index-cache-read.background.write-back-buffer",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "memcached",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "expiration",
                  "required": false,
                  "desc": "Cache config for index entry reading. How long keys stay in the memcache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-read.memcached.expiration",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "batch_size",
                  "required": false,
                  "desc": "Cache config for index entry reading. How many keys to fetch in each batch.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1024,
                  "fieldFlag": "store.index-cache-read.memcached.batchsize",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "parallelism",
                  "required": false,
                  "desc": "Cache config for index entry reading. Maximum active requests to memcache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "store.index-cache-read.memcached.parallelism",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "memcached_client",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "host",
                  "required": false,
                  "desc": "Cache config for index entry reading. Hostname for memcached service to use. If empty and if addresses is unset, no memcached will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.index-cache-read.memcached.hostname",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "service",
                  "required": false,
                  "desc": "Cache config for index entry reading. SRV service used to discover memcache servers.",
                  "fieldValue": null,
                  "fieldDefaultValue": "memcached",
                  "fieldFlag": "store.index-cache-read.memcached.service",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "addresses",
                  "required": false,
                  "desc": "Cache config for index entry reading. EXPERIMENTAL: Comma separated addresses list in DNS Service Discovery format: https://cortexmetrics.io/docs/configuration/arguments/#dns-service-discovery",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.index-cache-read.memcached.addresses",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "timeout",
                  "required": false,
                  "desc": "Cache config for index entry reading. Maximum time to wait before giving up on memcached requests.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "store.index-cache-read.memcached.timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_idle_conns",
                  "required": false,
                  "desc": "Cache config for index entry reading. Maximum number of idle connections in pool.",
                  "fieldValue": null,
                  "fieldDefaultValue": 16,
                  "fieldFlag": "store.index-cache-read.memcached.max-idle-conns",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_item_size",
                  "required": false,
                  "desc": "Cache config for index entry reading. The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-read.memcached.max-item-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "update_interval",
                  "required": false,
                  "desc": "Cache config for index entry reading. Period with which to poll DNS for memcache servers.",
                  "fieldValue": null,
                  "fieldDefaultValue": 60000000000,
                  "fieldFlag": "store.index-cache-read.memcached.update-interval",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "consistent_hash",
                  "required": false,
                  "desc": "Cache config for index entry reading. Use consistent hashing to distribute to memcache servers.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "store.index-cache-read.memcached.consistent-hash",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "circuit_breaker_consecutive_failures",
                  "required": false,
                  "desc": "Cache config for index entry reading. Trip circuit-breaker after this number of consecutive dial failures (if zero then circuit-breaker is disabled).",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "store.index-cache-read.memcached.circuit-breaker-consecutive-failures",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "circuit_breaker_timeout",
                  "required": false,
                  "desc": "Cache config for index entry reading. Duration circuit-breaker remains open after tripping (if zero then 60 seconds is used).",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "store.index-cache-read.memcached.circuit-breaker-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "circuit_breaker_interval",
                  "required": false,
                  "desc": "Cache config for index entry reading. Reset circuit-breaker counts after this long (if zero then never reset).",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "store.index-cache-read.memcached.circuit-breaker-interval",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "redis",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "endpoint",
                  "required": false,
                  "desc": "Cache config for index entry reading. Redis Server endpoint to use for caching. A comma-separated list of endpoints for Redis Cluster or Redis Sentinel. If empty, no redis will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.index-cache-read.redis.endpoint",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "master_name",
                  "required": false,
                  "desc": "Cache config for index entry reading. Redis Sentinel master name. An empty string for Redis Server or Redis Cluster.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.index-cache-read.redis.master-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "timeout",
                  "required": false,
                  "desc": "Cache config for index entry reading. Maximum time to wait before giving up on redis requests.",
                  "fieldValue": null,
                  "fieldDefaultValue": 500000000,
                  "fieldFlag": "store.index-cache-read.redis.timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "expiration",
                  "required": false,
                  "desc": "Cache config for index entry reading. How long keys stay in the redis.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-read.redis.expiration",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "db",
                  "required": false,
                  "desc": "Cache config for index entry reading. Database index.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-read.redis.db",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "pool_size",
                  "required": false,
                  "desc": "Cache config for index entry reading. Maximum number of connections in the pool.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-read.redis.pool-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "password",
                  "required": false,
                  "desc": "Cache config for index entry reading. Password to use when connecting to redis.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.index-cache-read.redis.password",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Cache config for index entry reading. Enable connecting to redis with TLS.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "store.index-cache-read.redis.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Cache config for index entry reading. Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "store.index-cache-read.redis.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "idle_timeout",
                  "required": false,
                  "desc": "Cache config for index entry reading. Close connections after remaining idle for this duration. If the value is zero, then idle connections are not closed.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-read.redis.idle-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_connection_age",
                  "required": false,
                  "desc": "Cache config for index entry reading. Close connections older than this duration. If the value is zero, then the pool does not close connections based on age.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-read.redis.max-connection-age",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "fifocache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "max_size_bytes",
                  "required": false,
                  "desc": "Cache config for index entry reading. Maximum memory size of the cache in bytes. A unit suffix (KB, MB, GB) may be applied.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.index-cache-read.fifocache.max-size-bytes",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "max_size_items",
                  "required": false,
                  "desc": "Cache config for index entry reading. Maximum number of entries in the cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-read.fifocache.max-size-items",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "validity",
                  "required": false,
                  "desc": "Cache config for index entry reading. The expiry duration for the cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-read.fifocache.duration",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "size",
                  "required": false,
                  "desc": "Deprecated (use max-size-items or max-size-bytes instead): Cache config for index entry reading. The number of entries to cache. ",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-read.fifocache.size",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "prefix",
              "required": false,
              "desc": "",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "delete_store",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "store",
              "required": false,
              "desc": "Store for keeping delete request",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "deletes.store",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "requests_table_name",
              "required": false,
              "desc": "Name of the table which stores delete requests",
              "fieldValue": null,
              "fieldDefaultValue": "delete_requests",
              "fieldFlag": "deletes.requests-table-name",
              "fieldType": "string"
            },
            {
              "kind": "block",
              "name": "table_provisioning",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enable_ondemand_throughput_mode",
                  "required": false,
                  "desc": "Enables on demand throughput provisioning for the storage provider (if supported). Applies only to tables which are not autoscaled. Supported by DynamoDB",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "deletes.table.enable-ondemand-throughput-mode",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "provisioned_write_throughput",
                  "required": false,
                  "desc": "Table default write throughput. Supported by DynamoDB",
                  "fieldValue": null,
                  "fieldDefaultValue": 1,
                  "fieldFlag": "deletes.table.write-throughput",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "provisioned_read_throughput",
                  "required": false,
                  "desc": "Table default read throughput. Supported by DynamoDB",
                  "fieldValue": null,
                  "fieldDefaultValue": 300,
                  "fieldFlag": "deletes.table.read-throughput",
                  "fieldType": "int"
                },
                {
                  "kind": "block",
                  "name": "write_scale",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "enabled",
                      "required": false,
                      "desc": "Should we enable autoscale for the table.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "deletes.table.write-throughput.scale.enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "role_arn",
                      "required": false,
                      "desc": "AWS AutoScaling role ARN",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "deletes.table.write-throughput.scale.role-arn",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "min_capacity",
                      "required": false,
                      "desc": "DynamoDB minimum provision capacity.",
                      "fieldValue": null,
                      "fieldDefaultValue": 3000,
                      "fieldFlag": "deletes.table.write-throughput.scale.min-capacity",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_capacity",
                      "required": false,
                      "desc": "DynamoDB maximum provision capacity.",
                      "fieldValue": null,
                      "fieldDefaultValue": 6000,
                      "fieldFlag": "deletes.table.write-throughput.scale.max-capacity",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "out_cooldown",
                      "required": false,
                      "desc": "DynamoDB minimum seconds between each autoscale up.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1800,
                      "fieldFlag": "deletes.table.write-throughput.scale.out-cooldown",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "in_cooldown",
                      "required": false,
                      "desc": "DynamoDB minimum seconds between each autoscale down.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1800,
                      "fieldFlag": "deletes.table.write-throughput.scale.in-cooldown",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "target",
                      "required": false,
                      "desc": "DynamoDB target ratio of consumed capacity to provisioned capacity.",
                      "fieldValue": null,
                      "fieldDefaultValue": 80,
                      "fieldFlag": "deletes.table.write-throughput.scale.target-value",
                      "fieldType": "float"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "read_scale",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "enabled",
                      "required": false,
                      "desc": "Should we enable autoscale for the table.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "deletes.table.read-throughput.scale.enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "role_arn",
                      "required": false,
                      "desc": "AWS AutoScaling role ARN",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "deletes.table.read-throughput.scale.role-arn",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "min_capacity",
                      "required": false,
                      "desc": "DynamoDB minimum provision capacity.",
                      "fieldValue": null,
                      "fieldDefaultValue": 3000,
                      "fieldFlag": "deletes.table.read-throughput.scale.min-capacity",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_capacity",
                      "required": false,
                      "desc": "DynamoDB maximum provision capacity.",
                      "fieldValue": null,
                      "fieldDefaultValue": 6000,
                      "fieldFlag": "deletes.table.read-throughput.scale.max-capacity",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "out_cooldown",
                      "required": false,
                      "desc": "DynamoDB minimum seconds between each autoscale up.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1800,
                      "fieldFlag": "deletes.table.read-throughput.scale.out-cooldown",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "in_cooldown",
                      "required": false,
                      "desc": "DynamoDB minimum seconds between each autoscale down.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1800,
                      "fieldFlag": "deletes.table.read-throughput.scale.in-cooldown",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "target",
                      "required": false,
                      "desc": "DynamoDB target ratio of consumed capacity to provisioned capacity.",
                      "fieldValue": null,
                      "fieldDefaultValue": 80,
                      "fieldFlag": "deletes.table.read-throughput.scale.target-value",
                      "fieldType": "float"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "tags",
                  "required": false,
                  "desc": "Tag (of the form key=value) to be added to the tables. Supported by DynamoDB",
                  "fieldValue": null,
                  "fieldDefaultValue": {},
                  "fieldFlag": "deletes.table.tags",
                  "fieldType": "map of string to string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "grpc_store",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "server_address",
              "required": false,
              "desc": "Hostname or IP of the gRPC store instance.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "grpc-store.server-address",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "chunk_store",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "chunk_cache_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enable_fifocache",
              "required": false,
              "desc": "Cache config for chunks. Enable in-memory cache.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "store.chunks-cache.cache.enable-fifocache",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "default_validity",
              "required": false,
              "desc": "Cache config for chunks. The default validity of entries for caches unless overridden.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "store.chunks-cache.default-validity",
              "fieldType": "duration"
            },
            {
              "kind": "block",
              "name": "background",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "writeback_goroutines",
                  "required": false,
                  "desc": "Cache config for chunks. At what concurrency to write back to cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "store.chunks-cache.background.write-back-concurrency",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "writeback_buffer",
                  "required": false,
                  "desc": "Cache config for chunks. How many key batches to buffer for background write-back.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000,
                  "fieldFlag": "store.chunks-cache.background.write-back-buffer",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "memcached",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "expiration",
                  "required": false,
                  "desc": "Cache config for chunks. How long keys stay in the memcache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.chunks-cache.memcached.expiration",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "batch_size",
                  "required": false,
                  "desc": "Cache config for chunks. How many keys to fetch in each batch.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1024,
                  "fieldFlag": "store.chunks-cache.memcached.batchsize",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "parallelism",
                  "required": false,
                  "desc": "Cache config for chunks. Maximum active requests to memcache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "store.chunks-cache.memcached.parallelism",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "memcached_client",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "host",
                  "required": false,
                  "desc": "Cache config for chunks. Hostname for memcached service to use. If empty and if addresses is unset, no memcached will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.chunks-cache.memcached.hostname",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "service",
                  "required": false,
                  "desc": "Cache config for chunks. SRV service used to discover memcache servers.",
                  "fieldValue": null,
                  "fieldDefaultValue": "memcached",
                  "fieldFlag": "store.chunks-cache.memcached.service",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "addresses",
                  "required": false,
                  "desc": "Cache config for chunks. EXPERIMENTAL: Comma separated addresses list in DNS Service Discovery format: https://cortexmetrics.io/docs/configuration/arguments/#dns-service-discovery",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.chunks-cache.memcached.addresses",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "timeout",
                  "required": false,
                  "desc": "Cache config for chunks. Maximum time to wait before giving up on memcached requests.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "store.chunks-cache.memcached.timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_idle_conns",
                  "required": false,
                  "desc": "Cache config for chunks. Maximum number of idle connections in pool.",
                  "fieldValue": null,
                  "fieldDefaultValue": 16,
                  "fieldFlag": "store.chunks-cache.memcached.max-idle-conns",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_item_size",
                  "required": false,
                  "desc": "Cache config for chunks. The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.chunks-cache.memcached.max-item-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "update_interval",
                  "required": false,
                  "desc": "Cache config for chunks. Period with which to poll DNS for memcache servers.",
                  "fieldValue": null,
                  "fieldDefaultValue": 60000000000,
                  "fieldFlag": "store.chunks-cache.memcached.update-interval",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "consistent_hash",
                  "required": false,
                  "desc": "Cache config for chunks. Use consistent hashing to distribute to memcache servers.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "store.chunks-cache.memcached.consistent-hash",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "circuit_breaker_consecutive_failures",
                  "required": false,
                  "desc": "Cache config for chunks. Trip circuit-breaker after this number of consecutive dial failures (if zero then circuit-breaker is disabled).",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "store.chunks-cache.memcached.circuit-breaker-consecutive-failures",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "circuit_breaker_timeout",
                  "required": false,
                  "desc": "Cache config for chunks. Duration circuit-breaker remains open after tripping (if zero then 60 seconds is used).",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "store.chunks-cache.memcached.circuit-breaker-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "circuit_breaker_interval",
                  "required": false,
                  "desc": "Cache config for chunks. Reset circuit-breaker counts after this long (if zero then never reset).",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "store.chunks-cache.memcached.circuit-breaker-interval",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "redis",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "endpoint",
                  "required": false,
                  "desc": "Cache config for chunks. Redis Server endpoint to use for caching. A comma-separated list of endpoints for Redis Cluster or Redis Sentinel. If empty, no redis will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.chunks-cache.redis.endpoint",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "master_name",
                  "required": false,
                  "desc": "Cache config for chunks. Redis Sentinel master name. An empty string for Redis Server or Redis Cluster.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.chunks-cache.redis.master-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "timeout",
                  "required": false,
                  "desc": "Cache config for chunks. Maximum time to wait before giving up on redis requests.",
                  "fieldValue": null,
                  "fieldDefaultValue": 500000000,
                  "fieldFlag": "store.chunks-cache.redis.timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "expiration",
                  "required": false,
                  "desc": "Cache config for chunks. How long keys stay in the redis.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.chunks-cache.redis.expiration",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "db",
                  "required": false,
                  "desc": "Cache config for chunks. Database index.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.chunks-cache.redis.db",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "pool_size",
                  "required": false,
                  "desc": "Cache config for chunks. Maximum number of connections in the pool.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.chunks-cache.redis.pool-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "password",
                  "required": false,
                  "desc": "Cache config for chunks. Password to use when connecting to redis.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.chunks-cache.redis.password",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Cache config for chunks. Enable connecting to redis with TLS.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "store.chunks-cache.redis.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Cache config for chunks. Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "store.chunks-cache.redis.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "idle_timeout",
                  "required": false,
                  "desc": "Cache config for chunks. Close connections after remaining idle for this duration. If the value is zero, then idle connections are not closed.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.chunks-cache.redis.idle-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_connection_age",
                  "required": false,
                  "desc": "Cache config for chunks. Close connections older than this duration. If the value is zero, then the pool does not close connections based on age.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.chunks-cache.redis.max-connection-age",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "fifocache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "max_size_bytes",
                  "required": false,
                  "desc": "Cache config for chunks. Maximum memory size of the cache in bytes. A unit suffix (KB, MB, GB) may be applied.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.chunks-cache.fifocache.max-size-bytes",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "max_size_items",
                  "required": false,
                  "desc": "Cache config for chunks. Maximum number of entries in the cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.chunks-cache.fifocache.max-size-items",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "validity",
                  "required": false,
                  "desc": "Cache config for chunks. The expiry duration for the cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.chunks-cache.fifocache.duration",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "size",
                  "required": false,
                  "desc": "Deprecated (use max-size-items or max-size-bytes instead): Cache config for chunks. The number of entries to cache. ",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.chunks-cache.fifocache.size",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "prefix",
              "required": false,
              "desc": "",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "write_dedupe_cache_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enable_fifocache",
              "required": false,
              "desc": "Cache config for index entry writing. Enable in-memory cache.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "store.index-cache-write.cache.enable-fifocache",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "default_validity",
              "required": false,
              "desc": "Cache config for index entry writing. The default validity of entries for caches unless overridden.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "store.index-cache-write.default-validity",
              "fieldType": "duration"
            },
            {
              "kind": "block",
              "name": "background",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "writeback_goroutines",
                  "required": false,
                  "desc": "Cache config for index entry writing. At what concurrency to write back to cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "store.index-cache-write.background.write-back-concurrency",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "writeback_buffer",
                  "required": false,
                  "desc": "Cache config for index entry writing. How many key batches to buffer for background write-back.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000,
                  "fieldFlag": "store.index-cache-write.background.write-back-buffer",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "memcached",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "expiration",
                  "required": false,
                  "desc": "Cache config for index entry writing. How long keys stay in the memcache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-write.memcached.expiration",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "batch_size",
                  "required": false,
                  "desc": "Cache config for index entry writing. How many keys to fetch in each batch.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1024,
                  "fieldFlag": "store.index-cache-write.memcached.batchsize",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "parallelism",
                  "required": false,
                  "desc": "Cache config for index entry writing. Maximum active requests to memcache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "store.index-cache-write.memcached.parallelism",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "memcached_client",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "host",
                  "required": false,
                  "desc": "Cache config for index entry writing. Hostname for memcached service to use. If empty and if addresses is unset, no memcached will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.index-cache-write.memcached.hostname",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "service",
                  "required": false,
                  "desc": "Cache config for index entry writing. SRV service used to discover memcache servers.",
                  "fieldValue": null,
                  "fieldDefaultValue": "memcached",
                  "fieldFlag": "store.index-cache-write.memcached.service",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "addresses",
                  "required": false,
                  "desc": "Cache config for index entry writing. EXPERIMENTAL: Comma separated addresses list in DNS Service Discovery format: https://cortexmetrics.io/docs/configuration/arguments/#dns-service-discovery",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.index-cache-write.memcached.addresses",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "timeout",
                  "required": false,
                  "desc": "Cache config for index entry writing. Maximum time to wait before giving up on memcached requests.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "store.index-cache-write.memcached.timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_idle_conns",
                  "required": false,
                  "desc": "Cache config for index entry writing. Maximum number of idle connections in pool.",
                  "fieldValue": null,
                  "fieldDefaultValue": 16,
                  "fieldFlag": "store.index-cache-write.memcached.max-idle-conns",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_item_size",
                  "required": false,
                  "desc": "Cache config for index entry writing. The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-write.memcached.max-item-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "update_interval",
                  "required": false,
                  "desc": "Cache config for index entry writing. Period with which to poll DNS for memcache servers.",
                  "fieldValue": null,
                  "fieldDefaultValue": 60000000000,
                  "fieldFlag": "store.index-cache-write.memcached.update-interval",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "consistent_hash",
                  "required": false,
                  "desc": "Cache config for index entry writing. Use consistent hashing to distribute to memcache servers.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "store.index-cache-write.memcached.consistent-hash",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "circuit_breaker_consecutive_failures",
                  "required": false,
                  "desc": "Cache config for index entry writing. Trip circuit-breaker after this number of consecutive dial failures (if zero then circuit-breaker is disabled).",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "store.index-cache-write.memcached.circuit-breaker-consecutive-failures",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "circuit_breaker_timeout",
                  "required": false,
                  "desc": "Cache config for index entry writing. Duration circuit-breaker remains open after tripping (if zero then 60 seconds is used).",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "store.index-cache-write.memcached.circuit-breaker-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "circuit_breaker_interval",
                  "required": false,
                  "desc": "Cache config for index entry writing. Reset circuit-breaker counts after this long (if zero then never reset).",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "store.index-cache-write.memcached.circuit-breaker-interval",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "redis",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "endpoint",
                  "required": false,
                  "desc": "Cache config for index entry writing. Redis Server endpoint to use for caching. A comma-separated list of endpoints for Redis Cluster or Redis Sentinel. If empty, no redis will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.index-cache-write.redis.endpoint",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "master_name",
                  "required": false,
                  "desc": "Cache config for index entry writing. Redis Sentinel master name. An empty string for Redis Server or Redis Cluster.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.index-cache-write.redis.master-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "timeout",
                  "required": false,
                  "desc": "Cache config for index entry writing. Maximum time to wait before giving up on redis requests.",
                  "fieldValue": null,
                  "fieldDefaultValue": 500000000,
                  "fieldFlag": "store.index-cache-write.redis.timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "expiration",
                  "required": false,
                  "desc": "Cache config for index entry writing. How long keys stay in the redis.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-write.redis.expiration",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "db",
                  "required": false,
                  "desc": "Cache config for index entry writing. Database index.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-write.redis.db",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "pool_size",
                  "required": false,
                  "desc": "Cache config for index entry writing. Maximum number of connections in the pool.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-write.redis.pool-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "password",
                  "required": false,
                  "desc": "Cache config for index entry writing. Password to use when connecting to redis.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.index-cache-write.redis.password",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Cache config for index entry writing. Enable connecting to redis with TLS.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "store.index-cache-write.redis.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Cache config for index entry writing. Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "store.index-cache-write.redis.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "idle_timeout",
                  "required": false,
                  "desc": "Cache config for index entry writing. Close connections after remaining idle for this duration. If the value is zero, then idle connections are not closed.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-write.redis.idle-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_connection_age",
                  "required": false,
                  "desc": "Cache config for index entry writing. Close connections older than this duration. If the value is zero, then the pool does not close connections based on age.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-write.redis.max-connection-age",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "fifocache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "max_size_bytes",
                  "required": false,
                  "desc": "Cache config for index entry writing. Maximum memory size of the cache in bytes. A unit suffix (KB, MB, GB) may be applied.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "store.index-cache-write.fifocache.max-size-bytes",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "max_size_items",
                  "required": false,
                  "desc": "Cache config for index entry writing. Maximum number of entries in the cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-write.fifocache.max-size-items",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "validity",
                  "required": false,
                  "desc": "Cache config for index entry writing. The expiry duration for the cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-write.fifocache.duration",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "size",
                  "required": false,
                  "desc": "Deprecated (use max-size-items or max-size-bytes instead): Cache config for index entry writing. The number of entries to cache. ",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "store.index-cache-write.fifocache.size",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "prefix",
              "required": false,
              "desc": "",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "cache_lookups_older_than",
          "required": false,
          "desc": "Cache index entries older than this period. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "store.cache-lookups-older-than",
          "fieldType": "duration"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "limits",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "ingestion_rate",
          "required": false,
          "desc": "Per-user ingestion rate limit in samples per second.",
          "fieldValue": null,
          "fieldDefaultValue": 25000,
          "fieldFlag": "distributor.ingestion-rate-limit",
          "fieldType": "float"
        },
        {
          "kind": "field",
          "name": "ingestion_rate_strategy",
          "required": false,
          "desc": "Whether the ingestion rate limit should be applied individually to each distributor instance (local), or evenly shared across the cluster (global).",
          "fieldValue": null,
          "fieldDefaultValue": "local",
          "fieldFlag": "distributor.ingestion-rate-limit-strategy",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "ingestion_burst_size",
          "required": false,
          "desc": "Per-user allowed ingestion burst size (in number of samples).",
          "fieldValue": null,
          "fieldDefaultValue": 50000,
          "fieldFlag": "distributor.ingestion-burst-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "accept_ha_samples",
          "required": false,
          "desc": "Flag to enable, for all users, handling of samples with external labels identifying replicas in an HA Prometheus setup.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "distributor.ha-tracker.enable-for-all-users",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "ha_cluster_label",
          "required": false,
          "desc": "Prometheus label to look for in samples to identify a Prometheus HA cluster.",
          "fieldValue": null,
          "fieldDefaultValue": "cluster",
          "fieldFlag": "distributor.ha-tracker.cluster",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "ha_replica_label",
          "required": false,
          "desc": "Prometheus label to look for in samples to identify a Prometheus HA replica.",
          "fieldValue": null,
          "fieldDefaultValue": "__replica__",
          "fieldFlag": "distributor.ha-tracker.replica",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "ha_max_clusters",
          "required": false,
          "desc": "Maximum number of clusters that HA tracker will keep track of for single user. 0 to disable the limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "distributor.ha-tracker.max-clusters",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "drop_labels",
          "required": false,
          "desc": "This flag can be used to specify label names that to drop during sample ingestion within the distributor and can be repeated in order to drop multiple labels.",
          "fieldValue": null,
          "fieldDefaultValue": [],
          "fieldFlag": "distributor.drop-label",
          "fieldType": "list of strings"
        },
        {
          "kind": "field",
          "name": "max_label_name_length",
          "required": false,
          "desc": "Maximum length accepted for label names",
          "fieldValue": null,
          "fieldDefaultValue": 1024,
          "fieldFlag": "validation.max-length-label-name",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_label_value_length",
          "required": false,
          "desc": "Maximum length accepted for label value. This setting also applies to the metric name",
          "fieldValue": null,
          "fieldDefaultValue": 2048,
          "fieldFlag": "validation.max-length-label-value",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_label_names_per_series",
          "required": false,
          "desc": "Maximum number of label names per series.",
          "fieldValue": null,
          "fieldDefaultValue": 30,
          "fieldFlag": "validation.max-label-names-per-series",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_metadata_length",
          "required": false,
          "desc": "Maximum length accepted for metric metadata. Metadata refers to Metric Name, HELP and UNIT.",
          "fieldValue": null,
          "fieldDefaultValue": 1024,
          "fieldFlag": "validation.max-metadata-length",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "reject_old_samples",
          "required": false,
          "desc": "Reject old samples.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "validation.reject-old-samples",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "reject_old_samples_max_age",
          "required": false,
          "desc": "Maximum accepted sample age before rejecting.",
          "fieldValue": null,
          "fieldDefaultValue": 1209600000000000,
          "fieldFlag": "validation.reject-old-samples.max-age",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "creation_grace_period",
          "required": false,
          "desc": "Duration which table will be created/deleted before/after it's needed; we won't accept sample from before this time.",
          "fieldValue": null,
          "fieldDefaultValue": 600000000000,
          "fieldFlag": "validation.create-grace-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "enforce_metadata_metric_name",
          "required": false,
          "desc": "Enforce every metadata has a metric name.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "validation.enforce-metadata-metric-name",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "enforce_metric_name",
          "required": false,
          "desc": "Enforce every sample has a metric name.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "validation.enforce-metric-name",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "ingestion_tenant_shard_size",
          "required": false,
          "desc": "The tenant's shard size when the shuffle-sharding strategy is used. Must be set both on ingesters and distributors. When this setting is specified in the per-tenant overrides, a value of 0 disables shuffle sharding for the tenant.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "distributor.ingestion-tenant-shard-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "metric_relabel_configs",
          "required": false,
          "desc": "List of metric relabel configurations. Note that in most situations, it is more effective to use metrics relabeling directly in the Prometheus server, e.g. remote_write.write_relabel_configs.",
          "fieldValue": null,
          "fieldDefaultValue": null,
          "fieldType": "relabel_config..."
        },
        {
          "kind": "field",
          "name": "max_series_per_query",
          "required": false,
          "desc": "The maximum number of series for which a query can fetch samples from each ingester. This limit is enforced only in the ingesters (when querying samples not flushed to the storage yet) and it's a per-instance limit. This limit is ignored when using blocks storage. When running with blocks storage use -querier.max-fetched-series-per-query limit instead.",
          "fieldValue": null,
          "fieldDefaultValue": 100000,
          "fieldFlag": "ingester.max-series-per-query",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_series_per_user",
          "required": false,
          "desc": "The maximum number of active series per user, per ingester. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 5000000,
          "fieldFlag": "ingester.max-series-per-user",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_series_per_metric",
          "required": false,
          "desc": "The maximum number of active series per metric name, per ingester. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 50000,
          "fieldFlag": "ingester.max-series-per-metric",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_global_series_per_user",
          "required": false,
          "desc": "The maximum number of active series per user, across the cluster before replication. 0 to disable. Supported only if -distributor.shard-by-all-labels is true.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ingester.max-global-series-per-user",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_global_series_per_metric",
          "required": false,
          "desc": "The maximum number of active series per metric name, across the cluster before replication. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ingester.max-global-series-per-metric",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "min_chunk_length",
          "required": false,
          "desc": "Minimum number of samples in an idle chunk to flush it to the store. Use with care, if chunks are less than this size they will be discarded. This option is ignored when using blocks storage. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ingester.min-chunk-length",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_metadata_per_user",
          "required": false,
          "desc": "The maximum number of active metrics with metadata per user, per ingester. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 8000,
          "fieldFlag": "ingester.max-metadata-per-user",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_metadata_per_metric",
          "required": false,
          "desc": "The maximum number of metadata per metric, per ingester. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 10,
          "fieldFlag": "ingester.max-metadata-per-metric",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_global_metadata_per_user",
          "required": false,
          "desc": "The maximum number of active metrics with metadata per user, across the cluster. 0 to disable. Supported only if -distributor.shard-by-all-labels is true.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ingester.max-global-metadata-per-user",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_global_metadata_per_metric",
          "required": false,
          "desc": "The maximum number of metadata per metric, across the cluster. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ingester.max-global-metadata-per-metric",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_global_exemplars_per_user",
          "required": false,
          "desc": "The maximum number of exemplars in memory, across the cluster. 0 to disable exemplars ingestion.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ingester.max-global-exemplars-per-user",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_chunks_per_query",
          "required": false,
          "desc": "Deprecated. Use -querier.max-fetched-chunks-per-query CLI flag and its respective YAML config option instead. Maximum number of chunks that can be fetched in a single query. This limit is enforced when fetching chunks from the long-term storage only. When using chunks storage, this limit is enforced in the querier and ruler, while when using blocks storage this limit is enforced in the querier, ruler and store-gateway. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 2000000,
          "fieldFlag": "store.query-chunk-limit",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_fetched_chunks_per_query",
          "required": false,
          "desc": "Maximum number of chunks that can be fetched in a single query from ingesters and long-term storage. This limit is enforced in the querier, ruler and store-gateway. Takes precedence over the deprecated -store.query-chunk-limit. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "querier.max-fetched-chunks-per-query",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_fetched_series_per_query",
          "required": false,
          "desc": "The maximum number of unique series for which a query can fetch samples from each ingesters and blocks storage. This limit is enforced in the querier only when running with blocks storage. 0 to disable",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "querier.max-fetched-series-per-query",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_fetched_chunk_bytes_per_query",
          "required": false,
          "desc": "The maximum size of all chunks in bytes that a query can fetch from each ingester and storage. This limit is enforced in the querier and ruler only when running with blocks storage. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "querier.max-fetched-chunk-bytes-per-query",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_query_lookback",
          "required": false,
          "desc": "Limit how long back data (series and metadata) can be queried, up until \u003clookback\u003e duration ago. This limit is enforced in the query-frontend, querier and ruler. If the requested time range is outside the allowed range, the request will not fail but will be manipulated to only query data within the allowed time range. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "querier.max-query-lookback",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_query_length",
          "required": false,
          "desc": "Limit the query time range (end - start time). This limit is enforced in the query-frontend (on the received query), in the querier (on the query possibly split by the query-frontend) and in the chunks storage. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "store.max-query-length",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_query_parallelism",
          "required": false,
          "desc": "Maximum number of split queries will be scheduled in parallel by the frontend.",
          "fieldValue": null,
          "fieldDefaultValue": 14,
          "fieldFlag": "querier.max-query-parallelism",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "cardinality_limit",
          "required": false,
          "desc": "Cardinality limit for index queries. This limit is ignored when using blocks storage. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 100000,
          "fieldFlag": "store.cardinality-limit",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "max_cache_freshness",
          "required": false,
          "desc": "Most recent allowed cacheable result per-tenant, to prevent caching very recent results that might still be in flux.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "frontend.max-cache-freshness",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_queriers_per_tenant",
          "required": false,
          "desc": "Maximum number of queriers that can handle requests for a single tenant. If set to 0 or value higher than number of available queriers, *all* queriers will handle requests for the tenant. Each frontend (or query-scheduler, if used) will select the same set of queriers for the same tenant (given that all queriers are connected to all frontends / query-schedulers). This option only works with queriers connecting to the query-frontend / query-scheduler, not when using downstream URL.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "frontend.max-queriers-per-tenant",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "query_sharding_total_shards",
          "required": false,
          "desc": "The amount of shards to use when doing parallelisation via query sharding by tenant. 0 to disable query sharding for tenant. Query sharding implementation will adjust the number of query shards based on compactor shards used by split-and-merge compaction strategy. This allows querier to not search the blocks which cannot possibly have the series for given query shard.",
          "fieldValue": null,
          "fieldDefaultValue": 16,
          "fieldFlag": "frontend.query-sharding-total-shards",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "query_sharding_max_sharded_queries",
          "required": false,
          "desc": "The max number of sharded queries that can be run for a given received query. 0 to disable limit.",
          "fieldValue": null,
          "fieldDefaultValue": 128,
          "fieldFlag": "frontend.query-sharding-max-sharded-queries",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "cardinality_analysis_enabled",
          "required": false,
          "desc": "Enables endpoints used for cardinality analysis.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "querier.cardinality-analysis-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "label_names_and_values_results_max_size_bytes",
          "required": false,
          "desc": "Maximum size in bytes of distinct label names and values. When querier receives response from ingester, it merges the response with responses from other ingesters. This maximum size limit is applied to the merged(distinct) results. If the limit is reached, an error is returned.",
          "fieldValue": null,
          "fieldDefaultValue": 419430400,
          "fieldFlag": "querier.label-names-and-values-results-max-size-bytes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "label_values_max_cardinality_label_names_per_request",
          "required": false,
          "desc": "Maximum number of label names allowed to be queried in a single /api/v1/cardinality/label_values API call.",
          "fieldValue": null,
          "fieldDefaultValue": 100,
          "fieldFlag": "querier.label-values-max-cardinality-label-names-per-request",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "ruler_evaluation_delay_duration",
          "required": false,
          "desc": "Duration to delay the evaluation of rules to ensure the underlying metrics have been pushed.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ruler.evaluation-delay-duration",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "ruler_tenant_shard_size",
          "required": false,
          "desc": "The tenant's shard size when the shuffle-sharding strategy is used by ruler. When this setting is specified in the per-tenant overrides, a value of 0 disables shuffle sharding for the tenant.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ruler.tenant-shard-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "ruler_max_rules_per_rule_group",
          "required": false,
          "desc": "Maximum number of rules per rule group per-tenant. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ruler.max-rules-per-rule-group",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "ruler_max_rule_groups_per_tenant",
          "required": false,
          "desc": "Maximum number of rule groups per-tenant. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "ruler.max-rule-groups-per-tenant",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "store_gateway_tenant_shard_size",
          "required": false,
          "desc": "The tenant's shard size when the shuffle-sharding strategy is used. Must be set when the store-gateway sharding is enabled with the shuffle-sharding strategy. When this setting is specified in the per-tenant overrides, a value of 0 disables shuffle sharding for the tenant.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "store-gateway.tenant-shard-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "compactor_blocks_retention_period",
          "required": false,
          "desc": "Delete blocks containing samples older than the specified retention period. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "compactor.blocks-retention-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "compactor_split_and_merge_shards",
          "required": false,
          "desc": "The number of shards to use when splitting blocks. This config option is used only when split-and-merge compaction strategy is in use. 0 to disable splitting but keep using the split-and-merge compaction strategy.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "compactor.split-and-merge-shards",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "compactor_split_groups",
          "required": false,
          "desc": "Number of groups that blocks for splitting should be grouped into. Each group of blocks is then split separately. Number of output split shards is controlled by -compactor.split-and-merge-shards. Only used when split-and-merge compaction strategy is in used.",
          "fieldValue": null,
          "fieldDefaultValue": 4,
          "fieldFlag": "compactor.split-groups",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "compactor_tenant_shard_size",
          "required": false,
          "desc": "Max number of compactors that can compact blocks for single tenant. Only used when split-and-merge compaction strategy is in use. 0 to disable the limit and use all compactors.",
          "fieldValue": null,
          "fieldDefaultValue": 1,
          "fieldFlag": "compactor.compactor-tenant-shard-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "s3_sse_type",
          "required": false,
          "desc": "S3 server-side encryption type. Required to enable server-side encryption overrides for a specific tenant. If not set, the default S3 client settings are used.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "s3_sse_kms_key_id",
          "required": false,
          "desc": "S3 server-side encryption KMS Key ID. Ignored if the SSE type override is not set.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "s3_sse_kms_encryption_context",
          "required": false,
          "desc": "S3 server-side encryption KMS encryption context. If unset and the key ID override is set, the encryption context will not be provided to S3. Ignored if the SSE type override is not set.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "alertmanager_receivers_firewall_block_cidr_networks",
          "required": false,
          "desc": "Comma-separated list of network CIDRs to block in Alertmanager receiver integrations.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "alertmanager.receivers-firewall-block-cidr-networks",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "alertmanager_receivers_firewall_block_private_addresses",
          "required": false,
          "desc": "True to block private and local addresses in Alertmanager receiver integrations. It blocks private addresses defined by  RFC 1918 (IPv4 addresses) and RFC 4193 (IPv6 addresses), as well as loopback, local unicast and local multicast addresses.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "alertmanager.receivers-firewall-block-private-addresses",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "alertmanager_notification_rate_limit",
          "required": false,
          "desc": "Per-user rate limit for sending notifications from Alertmanager in notifications/sec. 0 = rate limit disabled. Negative value = no notifications are allowed.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.notification-rate-limit",
          "fieldType": "float"
        },
        {
          "kind": "field",
          "name": "alertmanager_notification_rate_limit_per_integration",
          "required": false,
          "desc": "Per-integration notification rate limits. Value is a map, where each key is integration name and value is a rate-limit (float). On command line, this map is given in JSON format. Rate limit has the same meaning as -alertmanager.notification-rate-limit, but only applies for specific integration. Allowed integration names: webhook, email, pagerduty, opsgenie, wechat, slack, victorops, pushover, sns.",
          "fieldValue": null,
          "fieldDefaultValue": {},
          "fieldFlag": "alertmanager.notification-rate-limit-per-integration",
          "fieldType": "map of string to float64"
        },
        {
          "kind": "field",
          "name": "alertmanager_max_config_size_bytes",
          "required": false,
          "desc": "Maximum size of configuration file for Alertmanager that tenant can upload via Alertmanager API. 0 = no limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-config-size-bytes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "alertmanager_max_templates_count",
          "required": false,
          "desc": "Maximum number of templates in tenant's Alertmanager configuration uploaded via Alertmanager API. 0 = no limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-templates-count",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "alertmanager_max_template_size_bytes",
          "required": false,
          "desc": "Maximum size of single template in tenant's Alertmanager configuration uploaded via Alertmanager API. 0 = no limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-template-size-bytes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "alertmanager_max_dispatcher_aggregation_groups",
          "required": false,
          "desc": "Maximum number of aggregation groups in Alertmanager's dispatcher that a tenant can have. Each active aggregation group uses single goroutine. When the limit is reached, dispatcher will not dispatch alerts that belong to additional aggregation groups, but existing groups will keep working properly. 0 = no limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-dispatcher-aggregation-groups",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "alertmanager_max_alerts_count",
          "required": false,
          "desc": "Maximum number of alerts that a single user can have. Inserting more alerts will fail with a log message and metric increment. 0 = no limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-alerts-count",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "alertmanager_max_alerts_size_bytes",
          "required": false,
          "desc": "Maximum total size of alerts that a single user can have, alert size is the sum of the bytes of its labels, annotations and generatorURL. Inserting more alerts will fail with a log message and metric increment. 0 = no limit.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "alertmanager.max-alerts-size-bytes",
          "fieldType": "int"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "frontend_worker",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "frontend_address",
          "required": false,
          "desc": "Address of query frontend service, in host:port format. If -querier.scheduler-address is set as well, querier will use scheduler instead. Only one of -querier.frontend-address or -querier.scheduler-address can be set. If neither is set, queries are only received via HTTP endpoint.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "querier.frontend-address",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "scheduler_address",
          "required": false,
          "desc": "Hostname (and port) of scheduler that querier will periodically resolve, connect to and receive queries from. Only one of -querier.frontend-address or -querier.scheduler-address can be set. If neither is set, queries are only received via HTTP endpoint.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "querier.scheduler-address",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "dns_lookup_duration",
          "required": false,
          "desc": "How often to query DNS for query-frontend or query-scheduler address.",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "querier.dns-lookup-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "parallelism",
          "required": false,
          "desc": "Number of simultaneous queries to process per query-frontend or query-scheduler.",
          "fieldValue": null,
          "fieldDefaultValue": 10,
          "fieldFlag": "querier.worker-parallelism",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "match_max_concurrent",
          "required": false,
          "desc": "Force worker concurrency to match the -querier.max-concurrent option. Overrides querier.worker-parallelism.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "querier.worker-match-max-concurrent",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "id",
          "required": false,
          "desc": "Querier ID, sent to frontend service to identify requests from the same querier. Defaults to hostname.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "querier.id",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "grpc_client_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_recv_msg_size",
              "required": false,
              "desc": "gRPC client max receive message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "querier.frontend-client.grpc-max-recv-msg-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "max_send_msg_size",
              "required": false,
              "desc": "gRPC client max send message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 16777216,
              "fieldFlag": "querier.frontend-client.grpc-max-send-msg-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "grpc_compression",
              "required": false,
              "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.frontend-client.grpc-compression",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "rate_limit",
              "required": false,
              "desc": "Rate limit for gRPC client; 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "querier.frontend-client.grpc-client-rate-limit",
              "fieldType": "float"
            },
            {
              "kind": "field",
              "name": "rate_limit_burst",
              "required": false,
              "desc": "Rate limit burst for gRPC client.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "querier.frontend-client.grpc-client-rate-limit-burst",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "backoff_on_ratelimits",
              "required": false,
              "desc": "Enable backoff and retry when we hit ratelimits.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "querier.frontend-client.backoff-on-ratelimits",
              "fieldType": "boolean"
            },
            {
              "kind": "block",
              "name": "backoff_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "min_period",
                  "required": false,
                  "desc": "Minimum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "querier.frontend-client.backoff-min-period",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_period",
                  "required": false,
                  "desc": "Maximum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "querier.frontend-client.backoff-max-period",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of times to backoff and retry before failing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "querier.frontend-client.backoff-retries",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "querier.frontend-client.tls-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.frontend-client.tls-cert-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.frontend-client.tls-key-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.frontend-client.tls-ca-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "querier.frontend-client.tls-server-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "querier.frontend-client.tls-insecure-skip-verify",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "frontend",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "log_queries_longer_than",
          "required": false,
          "desc": "Log queries that are slower than the specified duration. Set to 0 to disable. Set to \u003c 0 to enable on all queries.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "frontend.log-queries-longer-than",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_body_size",
          "required": false,
          "desc": "Max body size for downstream prometheus.",
          "fieldValue": null,
          "fieldDefaultValue": 10485760,
          "fieldFlag": "frontend.max-body-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "query_stats_enabled",
          "required": false,
          "desc": "False to disable query statistics tracking. When enabled, a message with some statistics is logged for every query.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "frontend.query-stats-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "max_outstanding_per_tenant",
          "required": false,
          "desc": "Maximum number of outstanding requests per tenant per frontend; requests beyond this error with HTTP 429.",
          "fieldValue": null,
          "fieldDefaultValue": 100,
          "fieldFlag": "querier.max-outstanding-requests-per-tenant",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "querier_forget_delay",
          "required": false,
          "desc": "If a querier disconnects without sending notification about graceful shutdown, the query-frontend will keep the querier in the tenant's shard until the forget delay has passed. This feature is useful to reduce the blast radius when shuffle-sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "query-frontend.querier-forget-delay",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "scheduler_address",
          "required": false,
          "desc": "DNS hostname used for finding query-schedulers.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "frontend.scheduler-address",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "scheduler_dns_lookup_period",
          "required": false,
          "desc": "How often to resolve the scheduler-address, in order to look for new query-scheduler instances.",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "frontend.scheduler-dns-lookup-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "scheduler_worker_concurrency",
          "required": false,
          "desc": "Number of concurrent workers forwarding queries to single query-scheduler.",
          "fieldValue": null,
          "fieldDefaultValue": 5,
          "fieldFlag": "frontend.scheduler-worker-concurrency",
          "fieldType": "int"
        },
        {
          "kind": "block",
          "name": "grpc_client_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_recv_msg_size",
              "required": false,
              "desc": "gRPC client max receive message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "frontend.grpc-client-config.grpc-max-recv-msg-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "max_send_msg_size",
              "required": false,
              "desc": "gRPC client max send message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 16777216,
              "fieldFlag": "frontend.grpc-client-config.grpc-max-send-msg-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "grpc_compression",
              "required": false,
              "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "frontend.grpc-client-config.grpc-compression",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "rate_limit",
              "required": false,
              "desc": "Rate limit for gRPC client; 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "frontend.grpc-client-config.grpc-client-rate-limit",
              "fieldType": "float"
            },
            {
              "kind": "field",
              "name": "rate_limit_burst",
              "required": false,
              "desc": "Rate limit burst for gRPC client.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "frontend.grpc-client-config.grpc-client-rate-limit-burst",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "backoff_on_ratelimits",
              "required": false,
              "desc": "Enable backoff and retry when we hit ratelimits.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "frontend.grpc-client-config.backoff-on-ratelimits",
              "fieldType": "boolean"
            },
            {
              "kind": "block",
              "name": "backoff_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "min_period",
                  "required": false,
                  "desc": "Minimum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "frontend.grpc-client-config.backoff-min-period",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_period",
                  "required": false,
                  "desc": "Maximum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "frontend.grpc-client-config.backoff-max-period",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of times to backoff and retry before failing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "frontend.grpc-client-config.backoff-retries",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "frontend.grpc-client-config.tls-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "frontend.grpc-client-config.tls-cert-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "frontend.grpc-client-config.tls-key-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "frontend.grpc-client-config.tls-ca-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "frontend.grpc-client-config.tls-server-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "frontend.grpc-client-config.tls-insecure-skip-verify",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "instance_interface_names",
          "required": false,
          "desc": "Name of network interface to read address from. This address is sent to query-scheduler and querier, which uses it to send the query response back to query-frontend.",
          "fieldValue": null,
          "fieldDefaultValue": [
            "eth0",
            "en0"
          ],
          "fieldFlag": "frontend.instance-interface-names",
          "fieldType": "list of strings"
        },
        {
          "kind": "field",
          "name": "address",
          "required": false,
          "desc": "IP address to advertise to querier (via scheduler) (resolved via interfaces by default).",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "frontend.instance-addr",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "downstream_url",
          "required": false,
          "desc": "URL of downstream Prometheus.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "frontend.downstream-url",
          "fieldType": "string"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "query_range",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "split_queries_by_interval",
          "required": false,
          "desc": "Split queries by an interval and execute in parallel, 0 disables it. You should use an a multiple of 24 hours (same as the storage bucketing scheme), to avoid queriers downloading and processing the same chunks. This also determines how cache keys are chosen when result caching is enabled",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "querier.split-queries-by-interval",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "align_queries_with_step",
          "required": false,
          "desc": "Mutate incoming queries to align their start and end with their step.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "querier.align-querier-with-step",
          "fieldType": "boolean"
        },
        {
          "kind": "block",
          "name": "results_cache",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "cache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enable_fifocache",
                  "required": false,
                  "desc": "Enable in-memory cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "frontend.cache.enable-fifocache",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "default_validity",
                  "required": false,
                  "desc": "The default validity of entries for caches unless overridden.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "frontend.default-validity",
                  "fieldType": "duration"
                },
                {
                  "kind": "block",
                  "name": "background",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "writeback_goroutines",
                      "required": false,
                      "desc": "At what concurrency to write back to cache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "frontend.background.write-back-concurrency",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "writeback_buffer",
                      "required": false,
                      "desc": "How many key batches to buffer for background write-back.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000,
                      "fieldFlag": "frontend.background.write-back-buffer",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "memcached",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "expiration",
                      "required": false,
                      "desc": "How long keys stay in the memcache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "frontend.memcached.expiration",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "batch_size",
                      "required": false,
                      "desc": "How many keys to fetch in each batch.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1024,
                      "fieldFlag": "frontend.memcached.batchsize",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "parallelism",
                      "required": false,
                      "desc": "Maximum active requests to memcache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "frontend.memcached.parallelism",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "memcached_client",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname for memcached service to use. If empty and if addresses is unset, no memcached will be used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "frontend.memcached.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "service",
                      "required": false,
                      "desc": "SRV service used to discover memcache servers.",
                      "fieldValue": null,
                      "fieldDefaultValue": "memcached",
                      "fieldFlag": "frontend.memcached.service",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "addresses",
                      "required": false,
                      "desc": "EXPERIMENTAL: Comma separated addresses list in DNS Service Discovery format: https://cortexmetrics.io/docs/configuration/arguments/#dns-service-discovery",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "frontend.memcached.addresses",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "Maximum time to wait before giving up on memcached requests.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "frontend.memcached.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_conns",
                      "required": false,
                      "desc": "Maximum number of idle connections in pool.",
                      "fieldValue": null,
                      "fieldDefaultValue": 16,
                      "fieldFlag": "frontend.memcached.max-idle-conns",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_item_size",
                      "required": false,
                      "desc": "The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "frontend.memcached.max-item-size",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "update_interval",
                      "required": false,
                      "desc": "Period with which to poll DNS for memcache servers.",
                      "fieldValue": null,
                      "fieldDefaultValue": 60000000000,
                      "fieldFlag": "frontend.memcached.update-interval",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_hash",
                      "required": false,
                      "desc": "Use consistent hashing to distribute to memcache servers.",
                      "fieldValue": null,
                      "fieldDefaultValue": true,
                      "fieldFlag": "frontend.memcached.consistent-hash",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "circuit_breaker_consecutive_failures",
                      "required": false,
                      "desc": "Trip circuit-breaker after this number of consecutive dial failures (if zero then circuit-breaker is disabled).",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "frontend.memcached.circuit-breaker-consecutive-failures",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "circuit_breaker_timeout",
                      "required": false,
                      "desc": "Duration circuit-breaker remains open after tripping (if zero then 60 seconds is used).",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "frontend.memcached.circuit-breaker-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "circuit_breaker_interval",
                      "required": false,
                      "desc": "Reset circuit-breaker counts after this long (if zero then never reset).",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "frontend.memcached.circuit-breaker-interval",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "redis",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoint",
                      "required": false,
                      "desc": "Redis Server endpoint to use for caching. A comma-separated list of endpoints for Redis Cluster or Redis Sentinel. If empty, no redis will be used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "frontend.redis.endpoint",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "master_name",
                      "required": false,
                      "desc": "Redis Sentinel master name. An empty string for Redis Server or Redis Cluster.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "frontend.redis.master-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "Maximum time to wait before giving up on redis requests.",
                      "fieldValue": null,
                      "fieldDefaultValue": 500000000,
                      "fieldFlag": "frontend.redis.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "expiration",
                      "required": false,
                      "desc": "How long keys stay in the redis.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "frontend.redis.expiration",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "db",
                      "required": false,
                      "desc": "Database index.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "frontend.redis.db",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "pool_size",
                      "required": false,
                      "desc": "Maximum number of connections in the pool.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "frontend.redis.pool-size",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Password to use when connecting to redis.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "frontend.redis.password",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable connecting to redis with TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "frontend.redis.tls-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "frontend.redis.tls-insecure-skip-verify",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "idle_timeout",
                      "required": false,
                      "desc": "Close connections after remaining idle for this duration. If the value is zero, then idle connections are not closed.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "frontend.redis.idle-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_connection_age",
                      "required": false,
                      "desc": "Close connections older than this duration. If the value is zero, then the pool does not close connections based on age.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "frontend.redis.max-connection-age",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "fifocache",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "max_size_bytes",
                      "required": false,
                      "desc": "Maximum memory size of the cache in bytes. A unit suffix (KB, MB, GB) may be applied.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "frontend.fifocache.max-size-bytes",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "max_size_items",
                      "required": false,
                      "desc": "Maximum number of entries in the cache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "frontend.fifocache.max-size-items",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "validity",
                      "required": false,
                      "desc": "The expiry duration for the cache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "frontend.fifocache.duration",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "size",
                      "required": false,
                      "desc": "Deprecated (use max-size-items or max-size-bytes instead): The number of entries to cache. ",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "frontend.fifocache.size",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "compression",
              "required": false,
              "desc": "Use compression in results cache. Supported values are: 'snappy' and '' (disable compression).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "frontend.compression",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "cache_results",
          "required": false,
          "desc": "Cache query results.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "querier.cache-results",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "max_retries",
          "required": false,
          "desc": "Maximum number of retries for a single request; beyond this, the downstream error is returned.",
          "fieldValue": null,
          "fieldDefaultValue": 5,
          "fieldFlag": "querier.max-retries-per-request",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "parallelize_shardable_queries",
          "required": false,
          "desc": "Perform query parallelizations based on storage sharding configuration and query ASTs. This feature is supported only by the blocks storage engine.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "query-frontend.parallelize-shardable-queries",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "cache_unaligned_requests",
          "required": false,
          "desc": "Cache requests that are not step-aligned.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "query-frontend.cache-unaligned-requests",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "max_sharded_queries_limit_enabled",
          "required": false,
          "desc": "If enabled the query-frontend uses a new implementation of split by interval and results cache",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "query-frontend.max-sharded-queries-limit-enabled",
          "fieldType": "boolean"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "table_manager",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "throughput_updates_disabled",
          "required": false,
          "desc": "If true, disable all changes to DB capacity",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "table-manager.throughput-updates-disabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "retention_deletes_enabled",
          "required": false,
          "desc": "If true, enables retention deletes of DB tables",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "table-manager.retention-deletes-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "retention_period",
          "required": false,
          "desc": "Tables older than this retention period are deleted. Must be either 0 (disabled) or a multiple of 24h. When enabled, be aware this setting is destructive to data!",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "table-manager.retention-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "poll_interval",
          "required": false,
          "desc": "How frequently to poll backend to learn our capacity.",
          "fieldValue": null,
          "fieldDefaultValue": 120000000000,
          "fieldFlag": "table-manager.poll-interval",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "creation_grace_period",
          "required": false,
          "desc": "Periodic tables grace period (duration which table will be created/deleted before/after it's needed).",
          "fieldValue": null,
          "fieldDefaultValue": 600000000000,
          "fieldFlag": "table-manager.periodic-table.grace-period",
          "fieldType": "duration"
        },
        {
          "kind": "block",
          "name": "index_tables_provisioning",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enable_ondemand_throughput_mode",
              "required": false,
              "desc": "Enables on demand throughput provisioning for the storage provider (if supported). Applies only to tables which are not autoscaled. Supported by DynamoDB",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "table-manager.index-table.enable-ondemand-throughput-mode",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "provisioned_write_throughput",
              "required": false,
              "desc": "Table default write throughput. Supported by DynamoDB",
              "fieldValue": null,
              "fieldDefaultValue": 1000,
              "fieldFlag": "table-manager.index-table.write-throughput",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "provisioned_read_throughput",
              "required": false,
              "desc": "Table default read throughput. Supported by DynamoDB",
              "fieldValue": null,
              "fieldDefaultValue": 300,
              "fieldFlag": "table-manager.index-table.read-throughput",
              "fieldType": "int"
            },
            {
              "kind": "block",
              "name": "write_scale",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enabled",
                  "required": false,
                  "desc": "Should we enable autoscale for the table.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "table-manager.index-table.write-throughput.scale.enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "role_arn",
                  "required": false,
                  "desc": "AWS AutoScaling role ARN",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "table-manager.index-table.write-throughput.scale.role-arn",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "min_capacity",
                  "required": false,
                  "desc": "DynamoDB minimum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3000,
                  "fieldFlag": "table-manager.index-table.write-throughput.scale.min-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_capacity",
                  "required": false,
                  "desc": "DynamoDB maximum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 6000,
                  "fieldFlag": "table-manager.index-table.write-throughput.scale.max-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "out_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale up.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.index-table.write-throughput.scale.out-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "in_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale down.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.index-table.write-throughput.scale.in-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "target",
                  "required": false,
                  "desc": "DynamoDB target ratio of consumed capacity to provisioned capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 80,
                  "fieldFlag": "table-manager.index-table.write-throughput.scale.target-value",
                  "fieldType": "float"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "read_scale",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enabled",
                  "required": false,
                  "desc": "Should we enable autoscale for the table.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "table-manager.index-table.read-throughput.scale.enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "role_arn",
                  "required": false,
                  "desc": "AWS AutoScaling role ARN",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "table-manager.index-table.read-throughput.scale.role-arn",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "min_capacity",
                  "required": false,
                  "desc": "DynamoDB minimum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3000,
                  "fieldFlag": "table-manager.index-table.read-throughput.scale.min-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_capacity",
                  "required": false,
                  "desc": "DynamoDB maximum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 6000,
                  "fieldFlag": "table-manager.index-table.read-throughput.scale.max-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "out_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale up.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.index-table.read-throughput.scale.out-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "in_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale down.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.index-table.read-throughput.scale.in-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "target",
                  "required": false,
                  "desc": "DynamoDB target ratio of consumed capacity to provisioned capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 80,
                  "fieldFlag": "table-manager.index-table.read-throughput.scale.target-value",
                  "fieldType": "float"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "enable_inactive_throughput_on_demand_mode",
              "required": false,
              "desc": "Enables on demand throughput provisioning for the storage provider (if supported). Applies only to tables which are not autoscaled. Supported by DynamoDB",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "table-manager.index-table.inactive-enable-ondemand-throughput-mode",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "inactive_write_throughput",
              "required": false,
              "desc": "Table write throughput for inactive tables. Supported by DynamoDB",
              "fieldValue": null,
              "fieldDefaultValue": 1,
              "fieldFlag": "table-manager.index-table.inactive-write-throughput",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "inactive_read_throughput",
              "required": false,
              "desc": "Table read throughput for inactive tables. Supported by DynamoDB",
              "fieldValue": null,
              "fieldDefaultValue": 300,
              "fieldFlag": "table-manager.index-table.inactive-read-throughput",
              "fieldType": "int"
            },
            {
              "kind": "block",
              "name": "inactive_write_scale",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enabled",
                  "required": false,
                  "desc": "Should we enable autoscale for the table.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "table-manager.index-table.inactive-write-throughput.scale.enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "role_arn",
                  "required": false,
                  "desc": "AWS AutoScaling role ARN",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "table-manager.index-table.inactive-write-throughput.scale.role-arn",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "min_capacity",
                  "required": false,
                  "desc": "DynamoDB minimum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3000,
                  "fieldFlag": "table-manager.index-table.inactive-write-throughput.scale.min-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_capacity",
                  "required": false,
                  "desc": "DynamoDB maximum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 6000,
                  "fieldFlag": "table-manager.index-table.inactive-write-throughput.scale.max-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "out_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale up.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.index-table.inactive-write-throughput.scale.out-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "in_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale down.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.index-table.inactive-write-throughput.scale.in-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "target",
                  "required": false,
                  "desc": "DynamoDB target ratio of consumed capacity to provisioned capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 80,
                  "fieldFlag": "table-manager.index-table.inactive-write-throughput.scale.target-value",
                  "fieldType": "float"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "inactive_read_scale",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enabled",
                  "required": false,
                  "desc": "Should we enable autoscale for the table.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "table-manager.index-table.inactive-read-throughput.scale.enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "role_arn",
                  "required": false,
                  "desc": "AWS AutoScaling role ARN",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "table-manager.index-table.inactive-read-throughput.scale.role-arn",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "min_capacity",
                  "required": false,
                  "desc": "DynamoDB minimum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3000,
                  "fieldFlag": "table-manager.index-table.inactive-read-throughput.scale.min-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_capacity",
                  "required": false,
                  "desc": "DynamoDB maximum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 6000,
                  "fieldFlag": "table-manager.index-table.inactive-read-throughput.scale.max-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "out_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale up.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.index-table.inactive-read-throughput.scale.out-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "in_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale down.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.index-table.inactive-read-throughput.scale.in-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "target",
                  "required": false,
                  "desc": "DynamoDB target ratio of consumed capacity to provisioned capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 80,
                  "fieldFlag": "table-manager.index-table.inactive-read-throughput.scale.target-value",
                  "fieldType": "float"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "inactive_write_scale_lastn",
              "required": false,
              "desc": "Number of last inactive tables to enable write autoscale.",
              "fieldValue": null,
              "fieldDefaultValue": 4,
              "fieldFlag": "table-manager.index-table.inactive-write-throughput.scale-last-n",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "inactive_read_scale_lastn",
              "required": false,
              "desc": "Number of last inactive tables to enable read autoscale.",
              "fieldValue": null,
              "fieldDefaultValue": 4,
              "fieldFlag": "table-manager.index-table.inactive-read-throughput.scale-last-n",
              "fieldType": "int"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "chunk_tables_provisioning",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enable_ondemand_throughput_mode",
              "required": false,
              "desc": "Enables on demand throughput provisioning for the storage provider (if supported). Applies only to tables which are not autoscaled. Supported by DynamoDB",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "table-manager.chunk-table.enable-ondemand-throughput-mode",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "provisioned_write_throughput",
              "required": false,
              "desc": "Table default write throughput. Supported by DynamoDB",
              "fieldValue": null,
              "fieldDefaultValue": 1000,
              "fieldFlag": "table-manager.chunk-table.write-throughput",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "provisioned_read_throughput",
              "required": false,
              "desc": "Table default read throughput. Supported by DynamoDB",
              "fieldValue": null,
              "fieldDefaultValue": 300,
              "fieldFlag": "table-manager.chunk-table.read-throughput",
              "fieldType": "int"
            },
            {
              "kind": "block",
              "name": "write_scale",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enabled",
                  "required": false,
                  "desc": "Should we enable autoscale for the table.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "table-manager.chunk-table.write-throughput.scale.enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "role_arn",
                  "required": false,
                  "desc": "AWS AutoScaling role ARN",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "table-manager.chunk-table.write-throughput.scale.role-arn",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "min_capacity",
                  "required": false,
                  "desc": "DynamoDB minimum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3000,
                  "fieldFlag": "table-manager.chunk-table.write-throughput.scale.min-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_capacity",
                  "required": false,
                  "desc": "DynamoDB maximum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 6000,
                  "fieldFlag": "table-manager.chunk-table.write-throughput.scale.max-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "out_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale up.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.chunk-table.write-throughput.scale.out-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "in_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale down.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.chunk-table.write-throughput.scale.in-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "target",
                  "required": false,
                  "desc": "DynamoDB target ratio of consumed capacity to provisioned capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 80,
                  "fieldFlag": "table-manager.chunk-table.write-throughput.scale.target-value",
                  "fieldType": "float"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "read_scale",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enabled",
                  "required": false,
                  "desc": "Should we enable autoscale for the table.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "table-manager.chunk-table.read-throughput.scale.enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "role_arn",
                  "required": false,
                  "desc": "AWS AutoScaling role ARN",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "table-manager.chunk-table.read-throughput.scale.role-arn",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "min_capacity",
                  "required": false,
                  "desc": "DynamoDB minimum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3000,
                  "fieldFlag": "table-manager.chunk-table.read-throughput.scale.min-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_capacity",
                  "required": false,
                  "desc": "DynamoDB maximum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 6000,
                  "fieldFlag": "table-manager.chunk-table.read-throughput.scale.max-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "out_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale up.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.chunk-table.read-throughput.scale.out-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "in_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale down.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.chunk-table.read-throughput.scale.in-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "target",
                  "required": false,
                  "desc": "DynamoDB target ratio of consumed capacity to provisioned capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 80,
                  "fieldFlag": "table-manager.chunk-table.read-throughput.scale.target-value",
                  "fieldType": "float"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "enable_inactive_throughput_on_demand_mode",
              "required": false,
              "desc": "Enables on demand throughput provisioning for the storage provider (if supported). Applies only to tables which are not autoscaled. Supported by DynamoDB",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "table-manager.chunk-table.inactive-enable-ondemand-throughput-mode",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "inactive_write_throughput",
              "required": false,
              "desc": "Table write throughput for inactive tables. Supported by DynamoDB",
              "fieldValue": null,
              "fieldDefaultValue": 1,
              "fieldFlag": "table-manager.chunk-table.inactive-write-throughput",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "inactive_read_throughput",
              "required": false,
              "desc": "Table read throughput for inactive tables. Supported by DynamoDB",
              "fieldValue": null,
              "fieldDefaultValue": 300,
              "fieldFlag": "table-manager.chunk-table.inactive-read-throughput",
              "fieldType": "int"
            },
            {
              "kind": "block",
              "name": "inactive_write_scale",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enabled",
                  "required": false,
                  "desc": "Should we enable autoscale for the table.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "table-manager.chunk-table.inactive-write-throughput.scale.enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "role_arn",
                  "required": false,
                  "desc": "AWS AutoScaling role ARN",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "table-manager.chunk-table.inactive-write-throughput.scale.role-arn",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "min_capacity",
                  "required": false,
                  "desc": "DynamoDB minimum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3000,
                  "fieldFlag": "table-manager.chunk-table.inactive-write-throughput.scale.min-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_capacity",
                  "required": false,
                  "desc": "DynamoDB maximum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 6000,
                  "fieldFlag": "table-manager.chunk-table.inactive-write-throughput.scale.max-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "out_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale up.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.chunk-table.inactive-write-throughput.scale.out-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "in_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale down.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.chunk-table.inactive-write-throughput.scale.in-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "target",
                  "required": false,
                  "desc": "DynamoDB target ratio of consumed capacity to provisioned capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 80,
                  "fieldFlag": "table-manager.chunk-table.inactive-write-throughput.scale.target-value",
                  "fieldType": "float"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "inactive_read_scale",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enabled",
                  "required": false,
                  "desc": "Should we enable autoscale for the table.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "table-manager.chunk-table.inactive-read-throughput.scale.enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "role_arn",
                  "required": false,
                  "desc": "AWS AutoScaling role ARN",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "table-manager.chunk-table.inactive-read-throughput.scale.role-arn",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "min_capacity",
                  "required": false,
                  "desc": "DynamoDB minimum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3000,
                  "fieldFlag": "table-manager.chunk-table.inactive-read-throughput.scale.min-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_capacity",
                  "required": false,
                  "desc": "DynamoDB maximum provision capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 6000,
                  "fieldFlag": "table-manager.chunk-table.inactive-read-throughput.scale.max-capacity",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "out_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale up.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.chunk-table.inactive-read-throughput.scale.out-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "in_cooldown",
                  "required": false,
                  "desc": "DynamoDB minimum seconds between each autoscale down.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1800,
                  "fieldFlag": "table-manager.chunk-table.inactive-read-throughput.scale.in-cooldown",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "target",
                  "required": false,
                  "desc": "DynamoDB target ratio of consumed capacity to provisioned capacity.",
                  "fieldValue": null,
                  "fieldDefaultValue": 80,
                  "fieldFlag": "table-manager.chunk-table.inactive-read-throughput.scale.target-value",
                  "fieldType": "float"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "inactive_write_scale_lastn",
              "required": false,
              "desc": "Number of last inactive tables to enable write autoscale.",
              "fieldValue": null,
              "fieldDefaultValue": 4,
              "fieldFlag": "table-manager.chunk-table.inactive-write-throughput.scale-last-n",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "inactive_read_scale_lastn",
              "required": false,
              "desc": "Number of last inactive tables to enable read autoscale.",
              "fieldValue": null,
              "fieldDefaultValue": 4,
              "fieldFlag": "table-manager.chunk-table.inactive-read-throughput.scale-last-n",
              "fieldType": "int"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "blocks_storage",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "backend",
          "required": false,
          "desc": "Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem.",
          "fieldValue": null,
          "fieldDefaultValue": "s3",
          "fieldFlag": "blocks-storage.backend",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "s3",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "endpoint",
              "required": false,
              "desc": "The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.s3.endpoint",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region",
              "required": false,
              "desc": "S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.s3.region",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "S3 bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.s3.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "secret_access_key",
              "required": false,
              "desc": "S3 secret access key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.s3.secret-access-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "access_key_id",
              "required": false,
              "desc": "S3 access key ID",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.s3.access-key-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "insecure",
              "required": false,
              "desc": "If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "blocks-storage.s3.insecure",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "signature_version",
              "required": false,
              "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
              "fieldValue": null,
              "fieldDefaultValue": "v4",
              "fieldFlag": "blocks-storage.s3.signature-version",
              "fieldType": "string"
            },
            {
              "kind": "block",
              "name": "sse",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "type",
                  "required": false,
                  "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "blocks-storage.s3.sse.type",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_key_id",
                  "required": false,
                  "desc": "KMS Key ID used to encrypt objects in S3",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "blocks-storage.s3.sse.kms-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_encryption_context",
                  "required": false,
                  "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "blocks-storage.s3.sse.kms-encryption-context",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "http",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "idle_conn_timeout",
                  "required": false,
                  "desc": "The time an idle connection will remain idle before closing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 90000000000,
                  "fieldFlag": "blocks-storage.s3.http.idle-conn-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "response_header_timeout",
                  "required": false,
                  "desc": "The amount of time the client will wait for a servers response headers.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "blocks-storage.s3.http.response-header-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "insecure_skip_verify",
                  "required": false,
                  "desc": "If the client connects to S3 via HTTPS and this option is enabled, the client will accept any certificate and hostname.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "blocks-storage.s3.http.insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_handshake_timeout",
                  "required": false,
                  "desc": "Maximum time to wait for a TLS handshake. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "blocks-storage.s3.tls-handshake-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "expect_continue_timeout",
                  "required": false,
                  "desc": "The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1000000000,
                  "fieldFlag": "blocks-storage.s3.expect-continue-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "blocks-storage.s3.max-idle-connections",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "blocks-storage.s3.max-idle-connections-per-host",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of connections per host. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "blocks-storage.s3.max-connections-per-host",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "gcs",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "GCS bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.gcs.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "service_account",
              "required": false,
              "desc": "JSON representing either a Google Developers Console client_credentials.json file or a Google Developers service account key file. If empty, fallback to Google default logic.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.gcs.service-account",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "azure",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "account_name",
              "required": false,
              "desc": "Azure storage account name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.azure.account-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "account_key",
              "required": false,
              "desc": "Azure storage account key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.azure.account-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Azure storage container name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.azure.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "endpoint_suffix",
              "required": false,
              "desc": "Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.azure.endpoint-suffix",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Number of retries for recoverable errors",
              "fieldValue": null,
              "fieldDefaultValue": 20,
              "fieldFlag": "blocks-storage.azure.max-retries",
              "fieldType": "int"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "swift",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "auth_version",
              "required": false,
              "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "blocks-storage.swift.auth-version",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "auth_url",
              "required": false,
              "desc": "OpenStack Swift authentication URL",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.auth-url",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "username",
              "required": false,
              "desc": "OpenStack Swift username.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.username",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.user-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.user-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_id",
              "required": false,
              "desc": "OpenStack Swift user ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.user-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "password",
              "required": false,
              "desc": "OpenStack Swift API key.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.password",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_id",
              "required": false,
              "desc": "OpenStack Swift project ID (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.project-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_name",
              "required": false,
              "desc": "OpenStack Swift project name (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.project-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_id",
              "required": false,
              "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.project-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_name",
              "required": false,
              "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.project-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region_name",
              "required": false,
              "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.region-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Name of the OpenStack Swift container to put chunks in.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.swift.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Max retries on requests error.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "blocks-storage.swift.max-retries",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "connect_timeout",
              "required": false,
              "desc": "Time after which a connection attempt is aborted.",
              "fieldValue": null,
              "fieldDefaultValue": 10000000000,
              "fieldFlag": "blocks-storage.swift.connect-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "request_timeout",
              "required": false,
              "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "blocks-storage.swift.request-timeout",
              "fieldType": "duration"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "filesystem",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "dir",
              "required": false,
              "desc": "Local filesystem storage directory.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "blocks-storage.filesystem.dir",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "bucket_store",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "sync_dir",
              "required": false,
              "desc": "Directory to store synchronized TSDB index headers.",
              "fieldValue": null,
              "fieldDefaultValue": "tsdb-sync",
              "fieldFlag": "blocks-storage.bucket-store.sync-dir",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "sync_interval",
              "required": false,
              "desc": "How frequently to scan the bucket, or to refresh the bucket index (if enabled), in order to look for changes (new blocks shipped by ingesters and blocks deleted by retention or compaction).",
              "fieldValue": null,
              "fieldDefaultValue": 900000000000,
              "fieldFlag": "blocks-storage.bucket-store.sync-interval",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "max_concurrent",
              "required": false,
              "desc": "Max number of concurrent queries to execute against the long-term storage. The limit is shared across all tenants.",
              "fieldValue": null,
              "fieldDefaultValue": 100,
              "fieldFlag": "blocks-storage.bucket-store.max-concurrent",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "tenant_sync_concurrency",
              "required": false,
              "desc": "Maximum number of concurrent tenants synching blocks.",
              "fieldValue": null,
              "fieldDefaultValue": 10,
              "fieldFlag": "blocks-storage.bucket-store.tenant-sync-concurrency",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "block_sync_concurrency",
              "required": false,
              "desc": "Maximum number of concurrent blocks synching per tenant.",
              "fieldValue": null,
              "fieldDefaultValue": 20,
              "fieldFlag": "blocks-storage.bucket-store.block-sync-concurrency",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "meta_sync_concurrency",
              "required": false,
              "desc": "Number of Go routines to use when syncing block meta files from object storage per tenant.",
              "fieldValue": null,
              "fieldDefaultValue": 20,
              "fieldFlag": "blocks-storage.bucket-store.meta-sync-concurrency",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "consistency_delay",
              "required": false,
              "desc": "Minimum age of a block before it's being read. Set it to safe value (e.g 30m) if your object storage is eventually consistent. GCS and S3 are (roughly) strongly consistent.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "blocks-storage.bucket-store.consistency-delay",
              "fieldType": "duration"
            },
            {
              "kind": "block",
              "name": "index_cache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "backend",
                  "required": false,
                  "desc": "The index cache backend type. Supported values: inmemory, memcached.",
                  "fieldValue": null,
                  "fieldDefaultValue": "inmemory",
                  "fieldFlag": "blocks-storage.bucket-store.index-cache.backend",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "inmemory",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "max_size_bytes",
                      "required": false,
                      "desc": "Maximum size in bytes of in-memory index cache used to speed up blocks index lookups (shared between all tenants).",
                      "fieldValue": null,
                      "fieldDefaultValue": 1073741824,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.inmemory.max-size-bytes",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "memcached",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "addresses",
                      "required": false,
                      "desc": "Comma separated list of memcached addresses. Supported prefixes are: dns+ (looked up as an A/AAAA query), dnssrv+ (looked up as a SRV query, dnssrvnoa+ (looked up as a SRV query, with no A/AAAA lookup made after that).",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.addresses",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "The socket read/write timeout.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections",
                      "required": false,
                      "desc": "The maximum number of idle connections that will be maintained per address.",
                      "fieldValue": null,
                      "fieldDefaultValue": 16,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.max-idle-connections",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent asynchronous operations can occur.",
                      "fieldValue": null,
                      "fieldDefaultValue": 50,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.max-async-concurrency",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_buffer_size",
                      "required": false,
                      "desc": "The maximum number of enqueued asynchronous operations allowed.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.max-async-buffer-size",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent connections running get operations. If set to 0, concurrency is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.max-get-multi-concurrency",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_batch_size",
                      "required": false,
                      "desc": "The maximum number of keys a single underlying get operation should run. If more keys are specified, internally keys are split into multiple batches and fetched concurrently, honoring the max concurrency. If set to 0, the max batch size is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.max-get-multi-batch-size",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_item_size",
                      "required": false,
                      "desc": "The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1048576,
                      "fieldFlag": "blocks-storage.bucket-store.index-cache.memcached.max-item-size",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "chunks_cache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "backend",
                  "required": false,
                  "desc": "Backend for chunks cache, if not empty. Supported values: memcached.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "blocks-storage.bucket-store.chunks-cache.backend",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "memcached",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "addresses",
                      "required": false,
                      "desc": "Comma separated list of memcached addresses. Supported prefixes are: dns+ (looked up as an A/AAAA query), dnssrv+ (looked up as a SRV query, dnssrvnoa+ (looked up as a SRV query, with no A/AAAA lookup made after that).",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.addresses",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "The socket read/write timeout.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections",
                      "required": false,
                      "desc": "The maximum number of idle connections that will be maintained per address.",
                      "fieldValue": null,
                      "fieldDefaultValue": 16,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.max-idle-connections",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent asynchronous operations can occur.",
                      "fieldValue": null,
                      "fieldDefaultValue": 50,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.max-async-concurrency",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_buffer_size",
                      "required": false,
                      "desc": "The maximum number of enqueued asynchronous operations allowed.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.max-async-buffer-size",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent connections running get operations. If set to 0, concurrency is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.max-get-multi-concurrency",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_batch_size",
                      "required": false,
                      "desc": "The maximum number of keys a single underlying get operation should run. If more keys are specified, internally keys are split into multiple batches and fetched concurrently, honoring the max concurrency. If set to 0, the max batch size is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.max-get-multi-batch-size",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_item_size",
                      "required": false,
                      "desc": "The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1048576,
                      "fieldFlag": "blocks-storage.bucket-store.chunks-cache.memcached.max-item-size",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "subrange_size",
                  "required": false,
                  "desc": "Size of each subrange that bucket object is split into for better caching.",
                  "fieldValue": null,
                  "fieldDefaultValue": 16000,
                  "fieldFlag": "blocks-storage.bucket-store.chunks-cache.subrange-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_get_range_requests",
                  "required": false,
                  "desc": "Maximum number of sub-GetRange requests that a single GetRange request can be split into when fetching chunks. Zero or negative value = unlimited number of sub-requests.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3,
                  "fieldFlag": "blocks-storage.bucket-store.chunks-cache.max-get-range-requests",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "attributes_ttl",
                  "required": false,
                  "desc": "TTL for caching object attributes for chunks. If the metadata cache is configured, attributes will be stored under this cache backend, otherwise attributes are stored in the chunks cache backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": 604800000000000,
                  "fieldFlag": "blocks-storage.bucket-store.chunks-cache.attributes-ttl",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "attributes_in_memory_max_items",
                  "required": false,
                  "desc": "Maximum number of object attribute items to keep in a first level in-memory LRU cache. Metadata will be stored and fetched in-memory before hitting the cache backend. 0 to disable the in-memory cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "blocks-storage.bucket-store.chunks-cache.attributes-in-memory-max-items",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "subrange_ttl",
                  "required": false,
                  "desc": "TTL for caching individual chunks subranges.",
                  "fieldValue": null,
                  "fieldDefaultValue": 86400000000000,
                  "fieldFlag": "blocks-storage.bucket-store.chunks-cache.subrange-ttl",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "metadata_cache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "backend",
                  "required": false,
                  "desc": "Backend for metadata cache, if not empty. Supported values: memcached.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.backend",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "memcached",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "addresses",
                      "required": false,
                      "desc": "Comma separated list of memcached addresses. Supported prefixes are: dns+ (looked up as an A/AAAA query), dnssrv+ (looked up as a SRV query, dnssrvnoa+ (looked up as a SRV query, with no A/AAAA lookup made after that).",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.addresses",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "The socket read/write timeout.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections",
                      "required": false,
                      "desc": "The maximum number of idle connections that will be maintained per address.",
                      "fieldValue": null,
                      "fieldDefaultValue": 16,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.max-idle-connections",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent asynchronous operations can occur.",
                      "fieldValue": null,
                      "fieldDefaultValue": 50,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.max-async-concurrency",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_async_buffer_size",
                      "required": false,
                      "desc": "The maximum number of enqueued asynchronous operations allowed.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.max-async-buffer-size",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_concurrency",
                      "required": false,
                      "desc": "The maximum number of concurrent connections running get operations. If set to 0, concurrency is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.max-get-multi-concurrency",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_get_multi_batch_size",
                      "required": false,
                      "desc": "The maximum number of keys a single underlying get operation should run. If more keys are specified, internally keys are split into multiple batches and fetched concurrently, honoring the max concurrency. If set to 0, the max batch size is unlimited.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.max-get-multi-batch-size",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_item_size",
                      "required": false,
                      "desc": "The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1048576,
                      "fieldFlag": "blocks-storage.bucket-store.metadata-cache.memcached.max-item-size",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "tenants_list_ttl",
                  "required": false,
                  "desc": "How long to cache list of tenants in the bucket.",
                  "fieldValue": null,
                  "fieldDefaultValue": 900000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.tenants-list-ttl",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "tenant_blocks_list_ttl",
                  "required": false,
                  "desc": "How long to cache list of blocks for each tenant.",
                  "fieldValue": null,
                  "fieldDefaultValue": 300000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.tenant-blocks-list-ttl",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "chunks_list_ttl",
                  "required": false,
                  "desc": "How long to cache list of chunks for a block.",
                  "fieldValue": null,
                  "fieldDefaultValue": 86400000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.chunks-list-ttl",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "metafile_exists_ttl",
                  "required": false,
                  "desc": "How long to cache information that block metafile exists. Also used for user deletion mark file.",
                  "fieldValue": null,
                  "fieldDefaultValue": 7200000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.metafile-exists-ttl",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "metafile_doesnt_exist_ttl",
                  "required": false,
                  "desc": "How long to cache information that block metafile doesn't exist. Also used for user deletion mark file.",
                  "fieldValue": null,
                  "fieldDefaultValue": 300000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.metafile-doesnt-exist-ttl",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "metafile_content_ttl",
                  "required": false,
                  "desc": "How long to cache content of the metafile.",
                  "fieldValue": null,
                  "fieldDefaultValue": 86400000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.metafile-content-ttl",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "metafile_max_size_bytes",
                  "required": false,
                  "desc": "Maximum size of metafile content to cache in bytes. Caching will be skipped if the content exceeds this size. This is useful to avoid network round trip for large content if the configured caching backend has an hard limit on cached items size (in this case, you should set this limit to the same limit in the caching backend).",
                  "fieldValue": null,
                  "fieldDefaultValue": 1048576,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.metafile-max-size-bytes",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "metafile_attributes_ttl",
                  "required": false,
                  "desc": "How long to cache attributes of the block metafile.",
                  "fieldValue": null,
                  "fieldDefaultValue": 604800000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.metafile-attributes-ttl",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "block_index_attributes_ttl",
                  "required": false,
                  "desc": "How long to cache attributes of the block index.",
                  "fieldValue": null,
                  "fieldDefaultValue": 604800000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.block-index-attributes-ttl",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "bucket_index_content_ttl",
                  "required": false,
                  "desc": "How long to cache content of the bucket index.",
                  "fieldValue": null,
                  "fieldDefaultValue": 300000000000,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.bucket-index-content-ttl",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "bucket_index_max_size_bytes",
                  "required": false,
                  "desc": "Maximum size of bucket index content to cache in bytes. Caching will be skipped if the content exceeds this size. This is useful to avoid network round trip for large content if the configured caching backend has an hard limit on cached items size (in this case, you should set this limit to the same limit in the caching backend).",
                  "fieldValue": null,
                  "fieldDefaultValue": 1048576,
                  "fieldFlag": "blocks-storage.bucket-store.metadata-cache.bucket-index-max-size-bytes",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "ignore_deletion_mark_delay",
              "required": false,
              "desc": "Duration after which the blocks marked for deletion will be filtered out while fetching blocks. The idea of ignore-deletion-marks-delay is to ignore blocks that are marked for deletion with some delay. This ensures store can still serve blocks that are meant to be deleted but do not have a replacement yet. Default is 6h, half of the default value for -compactor.deletion-delay.",
              "fieldValue": null,
              "fieldDefaultValue": 21600000000000,
              "fieldFlag": "blocks-storage.bucket-store.ignore-deletion-marks-delay",
              "fieldType": "duration"
            },
            {
              "kind": "block",
              "name": "bucket_index",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enabled",
                  "required": false,
                  "desc": "True to enable querier and store-gateway to discover blocks in the storage via bucket index instead of bucket scanning.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "blocks-storage.bucket-store.bucket-index.enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "update_on_error_interval",
                  "required": false,
                  "desc": "How frequently a bucket index, which previously failed to load, should be tried to load again. This option is used only by querier.",
                  "fieldValue": null,
                  "fieldDefaultValue": 60000000000,
                  "fieldFlag": "blocks-storage.bucket-store.bucket-index.update-on-error-interval",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "idle_timeout",
                  "required": false,
                  "desc": "How long a unused bucket index should be cached. Once this timeout expires, the unused bucket index is removed from the in-memory cache. This option is used only by querier.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3600000000000,
                  "fieldFlag": "blocks-storage.bucket-store.bucket-index.idle-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_stale_period",
                  "required": false,
                  "desc": "The maximum allowed age of a bucket index (last updated) before queries start failing because the bucket index is too old. The bucket index is periodically updated by the compactor, while this check is enforced in the querier (at query time).",
                  "fieldValue": null,
                  "fieldDefaultValue": 3600000000000,
                  "fieldFlag": "blocks-storage.bucket-store.bucket-index.max-stale-period",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "max_chunk_pool_bytes",
              "required": false,
              "desc": "Max size - in bytes - of a chunks pool, used to reduce memory allocations. The pool is shared across all tenants. 0 to disable the limit.",
              "fieldValue": null,
              "fieldDefaultValue": 2147483648,
              "fieldFlag": "blocks-storage.bucket-store.max-chunk-pool-bytes",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "chunk_pool_min_bucket_size_bytes",
              "required": false,
              "desc": "Size - in bytes - of the smallest chunks pool bucket.",
              "fieldValue": null,
              "fieldDefaultValue": 16000,
              "fieldFlag": "blocks-storage.bucket-store.chunk-pool-min-bucket-size-bytes",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "chunk_pool_max_bucket_size_bytes",
              "required": false,
              "desc": "Size - in bytes - of the largest chunks pool bucket.",
              "fieldValue": null,
              "fieldDefaultValue": 50000000,
              "fieldFlag": "blocks-storage.bucket-store.chunk-pool-max-bucket-size-bytes",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "series_hash_cache_max_size_bytes",
              "required": false,
              "desc": "Max size - in bytes - of the in-memory series hash cache. The cache is shared across all tenants and it's used only when query sharding is enabled.",
              "fieldValue": null,
              "fieldDefaultValue": 1073741824,
              "fieldFlag": "blocks-storage.bucket-store.series-hash-cache-max-size-bytes",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "index_header_lazy_loading_enabled",
              "required": false,
              "desc": "If enabled, store-gateway will lazy load an index-header only once required by a query.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "blocks-storage.bucket-store.index-header-lazy-loading-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "index_header_lazy_loading_idle_timeout",
              "required": false,
              "desc": "If index-header lazy loading is enabled and this setting is \u003e 0, the store-gateway will offload unused index-headers after 'idle timeout' inactivity.",
              "fieldValue": null,
              "fieldDefaultValue": 1200000000000,
              "fieldFlag": "blocks-storage.bucket-store.index-header-lazy-loading-idle-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "partitioner_max_gap_bytes",
              "required": false,
              "desc": "Max size - in bytes - of a gap for which the partitioner aggregates together two bucket GET object requests.",
              "fieldValue": null,
              "fieldDefaultValue": 524288,
              "fieldFlag": "blocks-storage.bucket-store.partitioner-max-gap-bytes",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "postings_offsets_in_mem_sampling",
              "required": false,
              "desc": "Controls what is the ratio of postings offsets that the store will hold in memory.",
              "fieldValue": null,
              "fieldDefaultValue": 32,
              "fieldFlag": "blocks-storage.bucket-store.posting-offsets-in-mem-sampling",
              "fieldType": "int"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "tsdb",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "dir",
              "required": false,
              "desc": "Local directory to store TSDBs in the ingesters.",
              "fieldValue": null,
              "fieldDefaultValue": "tsdb",
              "fieldFlag": "blocks-storage.tsdb.dir",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "block_ranges_period",
              "required": false,
              "desc": "TSDB blocks range period.",
              "fieldValue": null,
              "fieldDefaultValue": [],
              "fieldFlag": "blocks-storage.tsdb.block-ranges-period",
              "fieldType": "list of durations"
            },
            {
              "kind": "field",
              "name": "retention_period",
              "required": false,
              "desc": "TSDB blocks retention in the ingester before a block is removed. This should be larger than the block_ranges_period and large enough to give store-gateways and queriers enough time to discover newly uploaded blocks.",
              "fieldValue": null,
              "fieldDefaultValue": 21600000000000,
              "fieldFlag": "blocks-storage.tsdb.retention-period",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "ship_interval",
              "required": false,
              "desc": "How frequently the TSDB blocks are scanned and new ones are shipped to the storage. 0 means shipping is disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "blocks-storage.tsdb.ship-interval",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "ship_concurrency",
              "required": false,
              "desc": "Maximum number of tenants concurrently shipping blocks to the storage.",
              "fieldValue": null,
              "fieldDefaultValue": 10,
              "fieldFlag": "blocks-storage.tsdb.ship-concurrency",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "head_compaction_interval",
              "required": false,
              "desc": "How frequently ingesters try to compact TSDB head. Block is only created if data covers smallest block range. Must be greater than 0 and max 5 minutes.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "blocks-storage.tsdb.head-compaction-interval",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "head_compaction_concurrency",
              "required": false,
              "desc": "Maximum number of tenants concurrently compacting TSDB head into a new block",
              "fieldValue": null,
              "fieldDefaultValue": 5,
              "fieldFlag": "blocks-storage.tsdb.head-compaction-concurrency",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "head_compaction_idle_timeout",
              "required": false,
              "desc": "If TSDB head is idle for this duration, it is compacted. Note that up to 25% jitter is added to the value to avoid ingesters compacting concurrently. 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 3600000000000,
              "fieldFlag": "blocks-storage.tsdb.head-compaction-idle-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "head_chunks_write_buffer_size_bytes",
              "required": false,
              "desc": "The write buffer size used by the head chunks mapper. Lower values reduce memory utilisation on clusters with a large number of tenants at the cost of increased disk I/O operations.",
              "fieldValue": null,
              "fieldDefaultValue": 4194304,
              "fieldFlag": "blocks-storage.tsdb.head-chunks-write-buffer-size-bytes",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "stripe_size",
              "required": false,
              "desc": "The number of shards of series to use in TSDB (must be a power of 2). Reducing this will decrease memory footprint, but can negatively impact performance.",
              "fieldValue": null,
              "fieldDefaultValue": 16384,
              "fieldFlag": "blocks-storage.tsdb.stripe-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "wal_compression_enabled",
              "required": false,
              "desc": "True to enable TSDB WAL compression.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "blocks-storage.tsdb.wal-compression-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "wal_segment_size_bytes",
              "required": false,
              "desc": "TSDB WAL segments files max size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 134217728,
              "fieldFlag": "blocks-storage.tsdb.wal-segment-size-bytes",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "flush_blocks_on_shutdown",
              "required": false,
              "desc": "True to flush blocks to storage on shutdown. If false, incomplete blocks will be reused after restart.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "blocks-storage.tsdb.flush-blocks-on-shutdown",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "close_idle_tsdb_timeout",
              "required": false,
              "desc": "If TSDB has not received any data for this duration, and all blocks from TSDB have been shipped, TSDB is closed and deleted from local disk. If set to positive value, this value should be equal or higher than -querier.query-ingesters-within flag to make sure that TSDB is not closed prematurely, which could cause partial query results. 0 or negative value disables closing of idle TSDB.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "blocks-storage.tsdb.close-idle-tsdb-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "memory_snapshot_on_shutdown",
              "required": false,
              "desc": "True to enable snapshotting of in-memory TSDB data on disk when shutting down.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "blocks-storage.tsdb.memory-snapshot-on-shutdown",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "series_hash_cache_max_size_bytes",
              "required": false,
              "desc": "Max size - in bytes - of the in-memory series hash cache. The cache is shared across all tenants and it's used only when query sharding is enabled.",
              "fieldValue": null,
              "fieldDefaultValue": 1073741824,
              "fieldFlag": "blocks-storage.tsdb.series-hash-cache-max-size-bytes",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "max_tsdb_opening_concurrency_on_startup",
              "required": false,
              "desc": "limit the number of concurrently opening TSDB's on startup",
              "fieldValue": null,
              "fieldDefaultValue": 10,
              "fieldFlag": "blocks-storage.tsdb.max-tsdb-opening-concurrency-on-startup",
              "fieldType": "int"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "bucket_rate_limit",
          "required": false,
          "desc": "Rate limit (per second), if set \u003c= 0 rate limiting is disabled.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "blocks-storage.bucket-rate-limit.limit",
          "fieldType": "float"
        },
        {
          "kind": "field",
          "name": "bucket_rate_limit_burst",
          "required": false,
          "desc": "Burst size",
          "fieldValue": null,
          "fieldDefaultValue": 1,
          "fieldFlag": "blocks-storage.bucket-rate-limit.burst",
          "fieldType": "int"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "compactor",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "block_ranges",
          "required": false,
          "desc": "List of compaction time ranges.",
          "fieldValue": null,
          "fieldDefaultValue": [],
          "fieldFlag": "compactor.block-ranges",
          "fieldType": "list of durations"
        },
        {
          "kind": "field",
          "name": "block_sync_concurrency",
          "required": false,
          "desc": "Number of Go routines to use when syncing block index and chunks files from the long term storage.",
          "fieldValue": null,
          "fieldDefaultValue": 20,
          "fieldFlag": "compactor.block-sync-concurrency",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "meta_sync_concurrency",
          "required": false,
          "desc": "Number of Go routines to use when syncing block meta files from the long term storage.",
          "fieldValue": null,
          "fieldDefaultValue": 20,
          "fieldFlag": "compactor.meta-sync-concurrency",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "consistency_delay",
          "required": false,
          "desc": "Minimum age of fresh (non-compacted) blocks before they are being processed. Malformed blocks older than the maximum of consistency-delay and 48h0m0s will be removed.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "compactor.consistency-delay",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "data_dir",
          "required": false,
          "desc": "Data directory in which to cache blocks and process compactions",
          "fieldValue": null,
          "fieldDefaultValue": "./data",
          "fieldFlag": "compactor.data-dir",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "compaction_interval",
          "required": false,
          "desc": "The frequency at which the compaction runs",
          "fieldValue": null,
          "fieldDefaultValue": 3600000000000,
          "fieldFlag": "compactor.compaction-interval",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "compaction_retries",
          "required": false,
          "desc": "How many times to retry a failed compaction within a single compaction run.",
          "fieldValue": null,
          "fieldDefaultValue": 3,
          "fieldFlag": "compactor.compaction-retries",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "compaction_concurrency",
          "required": false,
          "desc": "Max number of concurrent compactions running.",
          "fieldValue": null,
          "fieldDefaultValue": 1,
          "fieldFlag": "compactor.compaction-concurrency",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "cleanup_interval",
          "required": false,
          "desc": "How frequently compactor should run blocks cleanup and maintenance, as well as update the bucket index.",
          "fieldValue": null,
          "fieldDefaultValue": 900000000000,
          "fieldFlag": "compactor.cleanup-interval",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "cleanup_concurrency",
          "required": false,
          "desc": "Max number of tenants for which blocks cleanup and maintenance should run concurrently.",
          "fieldValue": null,
          "fieldDefaultValue": 20,
          "fieldFlag": "compactor.cleanup-concurrency",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "deletion_delay",
          "required": false,
          "desc": "Time before a block marked for deletion is deleted from bucket. If not 0, blocks will be marked for deletion and compactor component will permanently delete blocks marked for deletion from the bucket. If 0, blocks will be deleted straight away. Note that deleting blocks immediately can cause query failures.",
          "fieldValue": null,
          "fieldDefaultValue": 43200000000000,
          "fieldFlag": "compactor.deletion-delay",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "tenant_cleanup_delay",
          "required": false,
          "desc": "For tenants marked for deletion, this is time between deleting of last block, and doing final cleanup (marker files, debug files) of the tenant.",
          "fieldValue": null,
          "fieldDefaultValue": 21600000000000,
          "fieldFlag": "compactor.tenant-cleanup-delay",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "enabled_tenants",
          "required": false,
          "desc": "Comma separated list of tenants that can be compacted. If specified, only these tenants will be compacted by compactor, otherwise all tenants can be compacted. Subject to sharding.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "compactor.enabled-tenants",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "disabled_tenants",
          "required": false,
          "desc": "Comma separated list of tenants that cannot be compacted by this compactor. If specified, and compactor would normally pick given tenant for compaction (via -compactor.enabled-tenants or sharding), it will be ignored instead.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "compactor.disabled-tenants",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "sharding_enabled",
          "required": false,
          "desc": "Shard tenants across multiple compactor instances. Sharding is required if you run multiple compactor instances, in order to coordinate compactions and avoid race conditions leading to the same tenant blocks simultaneously compacted by different instances.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "compactor.sharding-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "block",
          "name": "sharding_ring",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "consul",
                  "fieldFlag": "compactor.ring.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "collectors/",
                  "fieldFlag": "compactor.ring.prefix",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "compactor.ring.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.consul.acl-token",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "compactor.ring.consul.client-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "compactor.ring.consul.consistent-reads",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "compactor.ring.consul.watch-rate-limit",
                      "fieldType": "float"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "compactor.ring.consul.watch-burst-size",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "compactor.ring.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "compactor.ring.etcd.dial-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "compactor.ring.etcd.max-retries",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "compactor.ring.etcd.tls-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.tls-cert-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.tls-key-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.tls-ca-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.tls-server-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "compactor.ring.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.multi.primary",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "compactor.ring.multi.secondary",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "compactor.ring.multi.mirror-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "compactor.ring.multi.mirror-timeout",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to the ring. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "compactor.ring.heartbeat-period",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "heartbeat_timeout",
              "required": false,
              "desc": "The heartbeat timeout after which compactors are considered unhealthy within the ring. 0 = never (timeout disabled).",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "compactor.ring.heartbeat-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "wait_stability_min_duration",
              "required": false,
              "desc": "Minimum time to wait for ring stability at startup. 0 to disable.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "compactor.ring.wait-stability-min-duration",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "wait_stability_max_duration",
              "required": false,
              "desc": "Maximum time to wait for ring stability at startup. If the compactor ring keeps changing after this period of time, the compactor will start anyway.",
              "fieldValue": null,
              "fieldDefaultValue": 300000000000,
              "fieldFlag": "compactor.ring.wait-stability-max-duration",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "instance_id",
              "required": false,
              "desc": "Instance ID to register in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": null,
              "fieldFlag": "compactor.ring.instance-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "instance_interface_names",
              "required": false,
              "desc": "Name of network interface to read address from.",
              "fieldValue": null,
              "fieldDefaultValue": [
                "eth0",
                "en0"
              ],
              "fieldFlag": "compactor.ring.instance-interface-names",
              "fieldType": "list of strings"
            },
            {
              "kind": "field",
              "name": "instance_port",
              "required": false,
              "desc": "Port to advertise in the ring (defaults to server.grpc-listen-port).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "compactor.ring.instance-port",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "instance_addr",
              "required": false,
              "desc": "IP address to advertise in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "compactor.ring.instance-addr",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "wait_active_instance_timeout",
              "required": false,
              "desc": "Timeout for waiting on compactor to become ACTIVE in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": 600000000000,
              "fieldFlag": "compactor.ring.wait-active-instance-timeout",
              "fieldType": "duration"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "compaction_strategy",
          "required": false,
          "desc": "The compaction strategy to use. Supported values are: default, split-and-merge.",
          "fieldValue": null,
          "fieldDefaultValue": "default",
          "fieldFlag": "compactor.compaction-strategy",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "compaction_jobs_order",
          "required": false,
          "desc": "The sorting to use when deciding which compacton jobs should run first for a given tenant. Changing this setting is not supported by the default compaction strategy. Supported values are: default, split-and-merge.",
          "fieldValue": null,
          "fieldDefaultValue": "smallest-range-oldest-blocks-first",
          "fieldFlag": "compactor.compaction-jobs-order",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "sharding_strategy",
          "required": false,
          "desc": "The sharding strategy to use. Supported values are: default, time-sharding.",
          "fieldValue": null,
          "fieldDefaultValue": "default",
          "fieldFlag": "compactor.sharding-strategy",
          "fieldType": "string"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "store_gateway",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "sharding_enabled",
          "required": false,
          "desc": "Shard blocks across multiple store gateway instances. This option needs be set both on the store-gateway and querier when running in microservices mode.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "store-gateway.sharding-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "block",
          "name": "sharding_ring",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "consul",
                  "fieldFlag": "store-gateway.sharding-ring.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "collectors/",
                  "fieldFlag": "store-gateway.sharding-ring.prefix",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "store-gateway.sharding-ring.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.consul.acl-token",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "store-gateway.sharding-ring.consul.client-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "store-gateway.sharding-ring.consul.consistent-reads",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "store-gateway.sharding-ring.consul.watch-rate-limit",
                      "fieldType": "float"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "store-gateway.sharding-ring.consul.watch-burst-size",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "store-gateway.sharding-ring.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "store-gateway.sharding-ring.etcd.dial-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "store-gateway.sharding-ring.etcd.max-retries",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-cert-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-key-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-ca-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-server-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "store-gateway.sharding-ring.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.multi.primary",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "store-gateway.sharding-ring.multi.secondary",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "store-gateway.sharding-ring.multi.mirror-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "store-gateway.sharding-ring.multi.mirror-timeout",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to the ring. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "store-gateway.sharding-ring.heartbeat-period",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "heartbeat_timeout",
              "required": false,
              "desc": "The heartbeat timeout after which store gateways are considered unhealthy within the ring. 0 = never (timeout disabled). This option needs be set both on the store-gateway and querier when running in microservices mode.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "store-gateway.sharding-ring.heartbeat-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "replication_factor",
              "required": false,
              "desc": "The replication factor to use when sharding blocks. This option needs be set both on the store-gateway and querier when running in microservices mode.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "store-gateway.sharding-ring.replication-factor",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "tokens_file_path",
              "required": false,
              "desc": "File path where tokens are stored. If empty, tokens are not stored at shutdown and restored at startup.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "store-gateway.sharding-ring.tokens-file-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "zone_awareness_enabled",
              "required": false,
              "desc": "True to enable zone-awareness and replicate blocks across different availability zones.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "store-gateway.sharding-ring.zone-awareness-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "wait_stability_min_duration",
              "required": false,
              "desc": "Minimum time to wait for ring stability at startup. 0 to disable.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "store-gateway.sharding-ring.wait-stability-min-duration",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "wait_stability_max_duration",
              "required": false,
              "desc": "Maximum time to wait for ring stability at startup. If the store-gateway ring keeps changing after this period of time, the store-gateway will start anyway.",
              "fieldValue": null,
              "fieldDefaultValue": 300000000000,
              "fieldFlag": "store-gateway.sharding-ring.wait-stability-max-duration",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "instance_id",
              "required": false,
              "desc": "Instance ID to register in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": null,
              "fieldFlag": "store-gateway.sharding-ring.instance-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "instance_interface_names",
              "required": false,
              "desc": "Name of network interface to read address from.",
              "fieldValue": null,
              "fieldDefaultValue": [
                "eth0",
                "en0"
              ],
              "fieldFlag": "store-gateway.sharding-ring.instance-interface-names",
              "fieldType": "list of strings"
            },
            {
              "kind": "field",
              "name": "instance_port",
              "required": false,
              "desc": "Port to advertise in the ring (defaults to server.grpc-listen-port).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "store-gateway.sharding-ring.instance-port",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "instance_addr",
              "required": false,
              "desc": "IP address to advertise in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "store-gateway.sharding-ring.instance-addr",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "instance_availability_zone",
              "required": false,
              "desc": "The availability zone where this instance is running. Required if zone-awareness is enabled.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "store-gateway.sharding-ring.instance-availability-zone",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "sharding_strategy",
          "required": false,
          "desc": "The sharding strategy to use. Supported values are: default, shuffle-sharding.",
          "fieldValue": null,
          "fieldDefaultValue": "default",
          "fieldFlag": "store-gateway.sharding-strategy",
          "fieldType": "string"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "purger",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "enable",
          "required": false,
          "desc": "Enable purger to allow deletion of series. Be aware that Delete series feature is still experimental",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "purger.enable",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "num_workers",
          "required": false,
          "desc": "Number of workers executing delete plans in parallel",
          "fieldValue": null,
          "fieldDefaultValue": 2,
          "fieldFlag": "purger.num-workers",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "object_store_type",
          "required": false,
          "desc": "Name of the object store to use for storing delete plans",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "purger.object-store-type",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "delete_request_cancel_period",
          "required": false,
          "desc": "Allow cancellation of delete request until duration after they are created. Data would be deleted only after delete requests have been older than this duration. Ideally this should be set to at least 24h.",
          "fieldValue": null,
          "fieldDefaultValue": 86400000000000,
          "fieldFlag": "purger.delete-request-cancel-period",
          "fieldType": "duration"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "tenant_federation",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "enabled",
          "required": false,
          "desc": "If enabled on all services, queries can be federated across multiple tenants. The tenant IDs involved need to be specified separated by a `|` character in the `X-Scope-OrgID` header (experimental).",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "tenant-federation.enabled",
          "fieldType": "boolean"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "ruler",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "external_url",
          "required": false,
          "desc": "URL of alerts return path.",
          "fieldValue": null,
          "fieldDefaultValue": {},
          "fieldFlag": "ruler.external.url",
          "fieldType": "url"
        },
        {
          "kind": "block",
          "name": "ruler_client",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_recv_msg_size",
              "required": false,
              "desc": "gRPC client max receive message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "ruler.client.grpc-max-recv-msg-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "max_send_msg_size",
              "required": false,
              "desc": "gRPC client max send message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 16777216,
              "fieldFlag": "ruler.client.grpc-max-send-msg-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "grpc_compression",
              "required": false,
              "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.client.grpc-compression",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "rate_limit",
              "required": false,
              "desc": "Rate limit for gRPC client; 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ruler.client.grpc-client-rate-limit",
              "fieldType": "float"
            },
            {
              "kind": "field",
              "name": "rate_limit_burst",
              "required": false,
              "desc": "Rate limit burst for gRPC client.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ruler.client.grpc-client-rate-limit-burst",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "backoff_on_ratelimits",
              "required": false,
              "desc": "Enable backoff and retry when we hit ratelimits.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler.client.backoff-on-ratelimits",
              "fieldType": "boolean"
            },
            {
              "kind": "block",
              "name": "backoff_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "min_period",
                  "required": false,
                  "desc": "Minimum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "ruler.client.backoff-min-period",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_period",
                  "required": false,
                  "desc": "Maximum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "ruler.client.backoff-max-period",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of times to backoff and retry before failing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "ruler.client.backoff-retries",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler.client.tls-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.client.tls-cert-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.client.tls-key-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.client.tls-ca-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.client.tls-server-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler.client.tls-insecure-skip-verify",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "evaluation_interval",
          "required": false,
          "desc": "How frequently to evaluate rules",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ruler.evaluation-interval",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "poll_interval",
          "required": false,
          "desc": "How frequently to poll for rule changes",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ruler.poll-interval",
          "fieldType": "duration"
        },
        {
          "kind": "block",
          "name": "storage",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "type",
              "required": false,
              "desc": "Method to use for backend rule storage (azure, gcs, s3, swift, local)",
              "fieldValue": null,
              "fieldDefaultValue": "local",
              "fieldFlag": "ruler.storage.type",
              "fieldType": "string"
            },
            {
              "kind": "block",
              "name": "azure",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "environment",
                  "required": false,
                  "desc": "Azure Cloud environment. Supported values are: AzureGlobal, AzureChinaCloud, AzureGermanCloud, AzureUSGovernment.",
                  "fieldValue": null,
                  "fieldDefaultValue": "AzureGlobal",
                  "fieldFlag": "ruler.storage.azure.environment",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "container_name",
                  "required": false,
                  "desc": "Name of the blob container used to store chunks. This container must be created prior to execution.",
                  "fieldValue": null,
                  "fieldDefaultValue": "cortex",
                  "fieldFlag": "ruler.storage.azure.container-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "account_name",
                  "required": false,
                  "desc": "The Microsoft Azure account name to be used",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.azure.account-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "account_key",
                  "required": false,
                  "desc": "The Microsoft Azure account key to use.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.azure.account-key",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "download_buffer_size",
                  "required": false,
                  "desc": "Preallocated buffer size for downloads.",
                  "fieldValue": null,
                  "fieldDefaultValue": 512000,
                  "fieldFlag": "ruler.storage.azure.download-buffer-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "upload_buffer_size",
                  "required": false,
                  "desc": "Preallocated buffer size for uploads.",
                  "fieldValue": null,
                  "fieldDefaultValue": 256000,
                  "fieldFlag": "ruler.storage.azure.upload-buffer-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "upload_buffer_count",
                  "required": false,
                  "desc": "Number of buffers used to used to upload a chunk.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1,
                  "fieldFlag": "ruler.storage.azure.download-buffer-count",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "request_timeout",
                  "required": false,
                  "desc": "Timeout for requests made against azure blob storage.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "ruler.storage.azure.request-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of retries for a request which times out.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5,
                  "fieldFlag": "ruler.storage.azure.max-retries",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "min_retry_delay",
                  "required": false,
                  "desc": "Minimum time to wait before retrying a request.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000,
                  "fieldFlag": "ruler.storage.azure.min-retry-delay",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_retry_delay",
                  "required": false,
                  "desc": "Maximum time to wait before retrying a request.",
                  "fieldValue": null,
                  "fieldDefaultValue": 500000000,
                  "fieldFlag": "ruler.storage.azure.max-retry-delay",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "gcs",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "bucket_name",
                  "required": false,
                  "desc": "Name of GCS bucket. Please refer to https://cloud.google.com/docs/authentication/production for more information about how to configure authentication.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.gcs.bucketname",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "chunk_buffer_size",
                  "required": false,
                  "desc": "The size of the buffer that GCS client for each PUT request. 0 to disable buffering.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "ruler.storage.gcs.chunk-buffer-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "request_timeout",
                  "required": false,
                  "desc": "The duration after which the requests to GCS should be timed out.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "ruler.storage.gcs.request-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "enable_opencensus",
                  "required": false,
                  "desc": "Enabled OpenCensus (OC) instrumentation for all requests.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "ruler.storage.gcs.enable-opencensus",
                  "fieldType": "boolean"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "s3",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "s3",
                  "required": false,
                  "desc": "S3 endpoint URL with escaped Key and Secret encoded. If only region is specified as a host, proper endpoint will be deduced. Use inmemory:///\u003cbucket-name\u003e to use a mock in-memory implementation.",
                  "fieldValue": null,
                  "fieldDefaultValue": {},
                  "fieldFlag": "ruler.storage.s3.url",
                  "fieldType": "url"
                },
                {
                  "kind": "field",
                  "name": "s3forcepathstyle",
                  "required": false,
                  "desc": "Set this to `true` to force the request to use path-style addressing.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "ruler.storage.s3.force-path-style",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "bucketnames",
                  "required": false,
                  "desc": "Comma separated list of bucket names to evenly distribute chunks over. Overrides any buckets specified in s3.url flag",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.s3.buckets",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "endpoint",
                  "required": false,
                  "desc": "S3 Endpoint to connect to.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.s3.endpoint",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "region",
                  "required": false,
                  "desc": "AWS region to use.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.s3.region",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "access_key_id",
                  "required": false,
                  "desc": "AWS Access Key ID",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.s3.access-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "secret_access_key",
                  "required": false,
                  "desc": "AWS Secret Access Key",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.s3.secret-access-key",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "insecure",
                  "required": false,
                  "desc": "Disable https on s3 connection.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "ruler.storage.s3.insecure",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "sse_encryption",
                  "required": false,
                  "desc": "Enable AWS Server Side Encryption [Deprecated: Use .sse instead. if s3.sse-encryption is enabled, it assumes .sse.type SSE-S3]",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "ruler.storage.s3.sse-encryption",
                  "fieldType": "boolean"
                },
                {
                  "kind": "block",
                  "name": "http_config",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "idle_conn_timeout",
                      "required": false,
                      "desc": "The maximum amount of time an idle connection will be held open.",
                      "fieldValue": null,
                      "fieldDefaultValue": 90000000000,
                      "fieldFlag": "ruler.storage.s3.http.idle-conn-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "response_header_timeout",
                      "required": false,
                      "desc": "If non-zero, specifies the amount of time to wait for a server's response headers after fully writing the request.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "ruler.storage.s3.http.response-header-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "insecure_skip_verify",
                      "required": false,
                      "desc": "Set to false to skip verifying the certificate chain and hostname.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ruler.storage.s3.http.insecure-skip-verify",
                      "fieldType": "boolean"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "signature_version",
                  "required": false,
                  "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
                  "fieldValue": null,
                  "fieldDefaultValue": "v4",
                  "fieldFlag": "ruler.storage.s3.signature-version",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "sse",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "type",
                      "required": false,
                      "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.storage.s3.sse.type",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "kms_key_id",
                      "required": false,
                      "desc": "KMS Key ID used to encrypt objects in S3",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.storage.s3.sse.kms-key-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "kms_encryption_context",
                      "required": false,
                      "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.storage.s3.sse.kms-encryption-context",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "swift",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "auth_version",
                  "required": false,
                  "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "ruler.storage.swift.auth-version",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "auth_url",
                  "required": false,
                  "desc": "OpenStack Swift authentication URL",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.auth-url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "username",
                  "required": false,
                  "desc": "OpenStack Swift username.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.username",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "user_domain_name",
                  "required": false,
                  "desc": "OpenStack Swift user's domain name.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.user-domain-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "user_domain_id",
                  "required": false,
                  "desc": "OpenStack Swift user's domain ID.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.user-domain-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "user_id",
                  "required": false,
                  "desc": "OpenStack Swift user ID.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.user-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "password",
                  "required": false,
                  "desc": "OpenStack Swift API key.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.password",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "domain_id",
                  "required": false,
                  "desc": "OpenStack Swift user's domain ID.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.domain-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "domain_name",
                  "required": false,
                  "desc": "OpenStack Swift user's domain name.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.domain-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "project_id",
                  "required": false,
                  "desc": "OpenStack Swift project ID (v2,v3 auth only).",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.project-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "project_name",
                  "required": false,
                  "desc": "OpenStack Swift project name (v2,v3 auth only).",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.project-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "project_domain_id",
                  "required": false,
                  "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.project-domain-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "project_domain_name",
                  "required": false,
                  "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.project-domain-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "region_name",
                  "required": false,
                  "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.region-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "container_name",
                  "required": false,
                  "desc": "Name of the OpenStack Swift container to put chunks in.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.swift.container-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Max retries on requests error.",
                  "fieldValue": null,
                  "fieldDefaultValue": 3,
                  "fieldFlag": "ruler.storage.swift.max-retries",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "connect_timeout",
                  "required": false,
                  "desc": "Time after which a connection attempt is aborted.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "ruler.storage.swift.connect-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "request_timeout",
                  "required": false,
                  "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "ruler.storage.swift.request-timeout",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "local",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "directory",
                  "required": false,
                  "desc": "Directory to scan for rules",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler.storage.local.directory",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "rule_path",
          "required": false,
          "desc": "file path to store temporary rule files for the prometheus rule managers",
          "fieldValue": null,
          "fieldDefaultValue": "/rules",
          "fieldFlag": "ruler.rule-path",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "alertmanager_url",
          "required": false,
          "desc": "Comma-separated list of URL(s) of the Alertmanager(s) to send notifications to. Each Alertmanager URL is treated as a separate group in the configuration. Multiple Alertmanagers in HA per group can be supported by using DNS resolution via -ruler.alertmanager-discovery.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "ruler.alertmanager-url",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "enable_alertmanager_discovery",
          "required": false,
          "desc": "Use DNS SRV records to discover Alertmanager hosts.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "ruler.alertmanager-discovery",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "alertmanager_refresh_interval",
          "required": false,
          "desc": "How long to wait between refreshing DNS resolutions of Alertmanager hosts.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ruler.alertmanager-refresh-interval",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "enable_alertmanager_v2",
          "required": false,
          "desc": "If enabled requests to Alertmanager will utilize the V2 API.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "ruler.alertmanager-use-v2",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "notification_queue_capacity",
          "required": false,
          "desc": "Capacity of the queue for notifications to be sent to the Alertmanager.",
          "fieldValue": null,
          "fieldDefaultValue": 10000,
          "fieldFlag": "ruler.notification-queue-capacity",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "notification_timeout",
          "required": false,
          "desc": "HTTP timeout duration when sending notifications to the Alertmanager.",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "ruler.notification-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "block",
          "name": "alertmanager_client",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.tls-cert-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.tls-key-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.tls-ca-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.tls-server-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler.alertmanager-client.tls-insecure-skip-verify",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "basic_auth_username",
              "required": false,
              "desc": "HTTP Basic authentication username. It overrides the username set in the URL (if any).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.basic-auth-username",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "basic_auth_password",
              "required": false,
              "desc": "HTTP Basic authentication password. It overrides the password set in the URL (if any).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.alertmanager-client.basic-auth-password",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "for_outage_tolerance",
          "required": false,
          "desc": "Max time to tolerate outage for restoring \"for\" state of alert.",
          "fieldValue": null,
          "fieldDefaultValue": 3600000000000,
          "fieldFlag": "ruler.for-outage-tolerance",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "for_grace_period",
          "required": false,
          "desc": "Minimum duration between alert and restored \"for\" state. This is maintained only for alerts with configured \"for\" time greater than grace period.",
          "fieldValue": null,
          "fieldDefaultValue": 600000000000,
          "fieldFlag": "ruler.for-grace-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "resend_delay",
          "required": false,
          "desc": "Minimum amount of time to wait before resending an alert to Alertmanager.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ruler.resend-delay",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "enable_sharding",
          "required": false,
          "desc": "Distribute rule evaluation using ring backend",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "ruler.enable-sharding",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "sharding_strategy",
          "required": false,
          "desc": "The sharding strategy to use. Supported values are: default, shuffle-sharding.",
          "fieldValue": null,
          "fieldDefaultValue": "default",
          "fieldFlag": "ruler.sharding-strategy",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "search_pending_for",
          "required": false,
          "desc": "Time to spend searching for a pending ruler when shutting down.",
          "fieldValue": null,
          "fieldDefaultValue": 300000000000,
          "fieldFlag": "ruler.search-pending-for",
          "fieldType": "duration"
        },
        {
          "kind": "block",
          "name": "ring",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "consul",
                  "fieldFlag": "ruler.ring.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "rulers/",
                  "fieldFlag": "ruler.ring.prefix",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "ruler.ring.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.consul.acl-token",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "ruler.ring.consul.client-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ruler.ring.consul.consistent-reads",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "ruler.ring.consul.watch-rate-limit",
                      "fieldType": "float"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "ruler.ring.consul.watch-burst-size",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "ruler.ring.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "ruler.ring.etcd.dial-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "ruler.ring.etcd.max-retries",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ruler.ring.etcd.tls-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.tls-cert-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.tls-key-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.tls-ca-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.tls-server-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ruler.ring.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.multi.primary",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "ruler.ring.multi.secondary",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "ruler.ring.multi.mirror-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "ruler.ring.multi.mirror-timeout",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to the ring. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "ruler.ring.heartbeat-period",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "heartbeat_timeout",
              "required": false,
              "desc": "The heartbeat timeout after which rulers are considered unhealthy within the ring. 0 = never (timeout disabled).",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "ruler.ring.heartbeat-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "instance_id",
              "required": false,
              "desc": "Instance ID to register in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": null,
              "fieldFlag": "ruler.ring.instance-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "instance_interface_names",
              "required": false,
              "desc": "Name of network interface to read address from.",
              "fieldValue": null,
              "fieldDefaultValue": [
                "eth0",
                "en0"
              ],
              "fieldFlag": "ruler.ring.instance-interface-names",
              "fieldType": "list of strings"
            },
            {
              "kind": "field",
              "name": "instance_port",
              "required": false,
              "desc": "Port to advertise in the ring (defaults to server.grpc-listen-port).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ruler.ring.instance-port",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "instance_addr",
              "required": false,
              "desc": "IP address to advertise in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler.ring.instance-addr",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "num_tokens",
              "required": false,
              "desc": "Number of tokens for each ruler.",
              "fieldValue": null,
              "fieldDefaultValue": 128,
              "fieldFlag": "ruler.ring.num-tokens",
              "fieldType": "int"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "flush_period",
          "required": false,
          "desc": "Period with which to attempt to flush rule groups.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "ruler.flush-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "enable_api",
          "required": false,
          "desc": "Enable the ruler api",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "experimental.ruler.enable-api",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "enabled_tenants",
          "required": false,
          "desc": "Comma separated list of tenants whose rules this ruler can evaluate. If specified, only these tenants will be handled by ruler, otherwise this ruler can process rules from all tenants. Subject to sharding.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "ruler.enabled-tenants",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "disabled_tenants",
          "required": false,
          "desc": "Comma separated list of tenants whose rules this ruler cannot evaluate. If specified, a ruler that would normally pick the specified tenant(s) for processing will ignore them instead. Subject to sharding.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "ruler.disabled-tenants",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "query_stats_enabled",
          "required": false,
          "desc": "Report the wall time for ruler queries to complete as a per user metric and as an info level log message.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "ruler.query-stats-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "block",
          "name": "remote_write",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "wal_dir",
              "required": false,
              "desc": "Directory to store WAL (for Ruler Remote Write).",
              "fieldValue": null,
              "fieldDefaultValue": "wal",
              "fieldFlag": "ruler.remote-write.wal-dir",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "enabled",
              "required": false,
              "desc": "Enable remote write rules for the Ruler.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler.remote-write.enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "wal_truncate_frequency",
              "required": false,
              "desc": "Frequency for truncating WAL",
              "fieldValue": null,
              "fieldDefaultValue": 3600000000000,
              "fieldFlag": "ruler.remote-write.wal-truncate-frequency",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "min_wal_time",
              "required": false,
              "desc": "Minimum time to stay in WAL",
              "fieldValue": null,
              "fieldDefaultValue": 300000000000,
              "fieldFlag": "ruler.remote-write.min-wal-time",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "max_wal_time",
              "required": false,
              "desc": "Maximum time to stay in WAL",
              "fieldValue": null,
              "fieldDefaultValue": 14400000000000,
              "fieldFlag": "ruler.remote-write.max-wal-time",
              "fieldType": "duration"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "ruler_storage",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "backend",
          "required": false,
          "desc": "Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem, local.",
          "fieldValue": null,
          "fieldDefaultValue": "s3",
          "fieldFlag": "ruler-storage.backend",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "s3",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "endpoint",
              "required": false,
              "desc": "The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.s3.endpoint",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region",
              "required": false,
              "desc": "S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.s3.region",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "S3 bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.s3.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "secret_access_key",
              "required": false,
              "desc": "S3 secret access key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.s3.secret-access-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "access_key_id",
              "required": false,
              "desc": "S3 access key ID",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.s3.access-key-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "insecure",
              "required": false,
              "desc": "If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "ruler-storage.s3.insecure",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "signature_version",
              "required": false,
              "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
              "fieldValue": null,
              "fieldDefaultValue": "v4",
              "fieldFlag": "ruler-storage.s3.signature-version",
              "fieldType": "string"
            },
            {
              "kind": "block",
              "name": "sse",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "type",
                  "required": false,
                  "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler-storage.s3.sse.type",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_key_id",
                  "required": false,
                  "desc": "KMS Key ID used to encrypt objects in S3",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler-storage.s3.sse.kms-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_encryption_context",
                  "required": false,
                  "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "ruler-storage.s3.sse.kms-encryption-context",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "http",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "idle_conn_timeout",
                  "required": false,
                  "desc": "The time an idle connection will remain idle before closing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 90000000000,
                  "fieldFlag": "ruler-storage.s3.http.idle-conn-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "response_header_timeout",
                  "required": false,
                  "desc": "The amount of time the client will wait for a servers response headers.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "ruler-storage.s3.http.response-header-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "insecure_skip_verify",
                  "required": false,
                  "desc": "If the client connects to S3 via HTTPS and this option is enabled, the client will accept any certificate and hostname.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "ruler-storage.s3.http.insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_handshake_timeout",
                  "required": false,
                  "desc": "Maximum time to wait for a TLS handshake. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "ruler-storage.s3.tls-handshake-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "expect_continue_timeout",
                  "required": false,
                  "desc": "The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1000000000,
                  "fieldFlag": "ruler-storage.s3.expect-continue-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "ruler-storage.s3.max-idle-connections",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "ruler-storage.s3.max-idle-connections-per-host",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of connections per host. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "ruler-storage.s3.max-connections-per-host",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "gcs",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "GCS bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.gcs.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "service_account",
              "required": false,
              "desc": "JSON representing either a Google Developers Console client_credentials.json file or a Google Developers service account key file. If empty, fallback to Google default logic.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.gcs.service-account",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "azure",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "account_name",
              "required": false,
              "desc": "Azure storage account name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.azure.account-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "account_key",
              "required": false,
              "desc": "Azure storage account key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.azure.account-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Azure storage container name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.azure.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "endpoint_suffix",
              "required": false,
              "desc": "Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.azure.endpoint-suffix",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Number of retries for recoverable errors",
              "fieldValue": null,
              "fieldDefaultValue": 20,
              "fieldFlag": "ruler-storage.azure.max-retries",
              "fieldType": "int"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "swift",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "auth_version",
              "required": false,
              "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "ruler-storage.swift.auth-version",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "auth_url",
              "required": false,
              "desc": "OpenStack Swift authentication URL",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.auth-url",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "username",
              "required": false,
              "desc": "OpenStack Swift username.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.username",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.user-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.user-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_id",
              "required": false,
              "desc": "OpenStack Swift user ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.user-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "password",
              "required": false,
              "desc": "OpenStack Swift API key.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.password",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_id",
              "required": false,
              "desc": "OpenStack Swift project ID (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.project-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_name",
              "required": false,
              "desc": "OpenStack Swift project name (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.project-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_id",
              "required": false,
              "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.project-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_name",
              "required": false,
              "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.project-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region_name",
              "required": false,
              "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.region-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Name of the OpenStack Swift container to put chunks in.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.swift.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Max retries on requests error.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "ruler-storage.swift.max-retries",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "connect_timeout",
              "required": false,
              "desc": "Time after which a connection attempt is aborted.",
              "fieldValue": null,
              "fieldDefaultValue": 10000000000,
              "fieldFlag": "ruler-storage.swift.connect-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "request_timeout",
              "required": false,
              "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "ruler-storage.swift.request-timeout",
              "fieldType": "duration"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "filesystem",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "dir",
              "required": false,
              "desc": "Local filesystem storage directory.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.filesystem.dir",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "local",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "directory",
              "required": false,
              "desc": "Directory to scan for rules",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "ruler-storage.local.directory",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "alertmanager",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "data_dir",
          "required": false,
          "desc": "Base path for data storage.",
          "fieldValue": null,
          "fieldDefaultValue": "data/",
          "fieldFlag": "alertmanager.storage.path",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "retention",
          "required": false,
          "desc": "How long to keep data for.",
          "fieldValue": null,
          "fieldDefaultValue": 432000000000000,
          "fieldFlag": "alertmanager.storage.retention",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "external_url",
          "required": false,
          "desc": "The URL under which Alertmanager is externally reachable (for example, if Alertmanager is served via a reverse proxy). Used for generating relative and absolute links back to Alertmanager itself. If the URL has a path portion, it will be used to prefix all HTTP endpoints served by Alertmanager. If omitted, relevant URL components will be derived automatically.",
          "fieldValue": null,
          "fieldDefaultValue": {},
          "fieldFlag": "alertmanager.web.external-url",
          "fieldType": "url"
        },
        {
          "kind": "field",
          "name": "poll_interval",
          "required": false,
          "desc": "How frequently to poll Alertmanager configs.",
          "fieldValue": null,
          "fieldDefaultValue": 15000000000,
          "fieldFlag": "alertmanager.configs.poll-interval",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_recv_msg_size",
          "required": false,
          "desc": "Maximum size (bytes) of an accepted HTTP request body.",
          "fieldValue": null,
          "fieldDefaultValue": 16777216,
          "fieldFlag": "alertmanager.max-recv-msg-size",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "sharding_enabled",
          "required": false,
          "desc": "Shard tenants across multiple alertmanager instances.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "alertmanager.sharding-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "block",
          "name": "sharding_ring",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "kvstore",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "store",
                  "required": false,
                  "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                  "fieldValue": null,
                  "fieldDefaultValue": "consul",
                  "fieldFlag": "alertmanager.sharding-ring.store",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "The prefix for the keys in the store. Should end with a /.",
                  "fieldValue": null,
                  "fieldDefaultValue": "alertmanagers/",
                  "fieldFlag": "alertmanager.sharding-ring.prefix",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "consul",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Hostname and port of Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "localhost:8500",
                      "fieldFlag": "alertmanager.sharding-ring.consul.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "acl_token",
                      "required": false,
                      "desc": "ACL Token used to interact with Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.consul.acl-token",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "http_client_timeout",
                      "required": false,
                      "desc": "HTTP timeout when talking to Consul",
                      "fieldValue": null,
                      "fieldDefaultValue": 20000000000,
                      "fieldFlag": "alertmanager.sharding-ring.consul.client-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_reads",
                      "required": false,
                      "desc": "Enable consistent reads to Consul.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "alertmanager.sharding-ring.consul.consistent-reads",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "watch_rate_limit",
                      "required": false,
                      "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "alertmanager.sharding-ring.consul.watch-rate-limit",
                      "fieldType": "float"
                    },
                    {
                      "kind": "field",
                      "name": "watch_burst_size",
                      "required": false,
                      "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1,
                      "fieldFlag": "alertmanager.sharding-ring.consul.watch-burst-size",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "etcd",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoints",
                      "required": false,
                      "desc": "The etcd endpoints to connect to.",
                      "fieldValue": null,
                      "fieldDefaultValue": [],
                      "fieldFlag": "alertmanager.sharding-ring.etcd.endpoints",
                      "fieldType": "list of strings"
                    },
                    {
                      "kind": "field",
                      "name": "dial_timeout",
                      "required": false,
                      "desc": "The dial timeout for the etcd connection.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "alertmanager.sharding-ring.etcd.dial-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "The maximum number of retries to do for failed ops.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "alertmanager.sharding-ring.etcd.max-retries",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Enable TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "tls_cert_path",
                      "required": false,
                      "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-cert-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_key_path",
                      "required": false,
                      "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-key-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_ca_path",
                      "required": false,
                      "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-ca-path",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_server_name",
                      "required": false,
                      "desc": "Override the expected name on the server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-server-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "alertmanager.sharding-ring.etcd.tls-insecure-skip-verify",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "Etcd username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Etcd password.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.etcd.password",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "multi",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "primary",
                      "required": false,
                      "desc": "Primary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.multi.primary",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "secondary",
                      "required": false,
                      "desc": "Secondary backend storage used by multi-client.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.sharding-ring.multi.secondary",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_enabled",
                      "required": false,
                      "desc": "Mirror writes to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "alertmanager.sharding-ring.multi.mirror-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "mirror_timeout",
                      "required": false,
                      "desc": "Timeout for storing value to secondary store.",
                      "fieldValue": null,
                      "fieldDefaultValue": 2000000000,
                      "fieldFlag": "alertmanager.sharding-ring.multi.mirror-timeout",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "heartbeat_period",
              "required": false,
              "desc": "Period at which to heartbeat to the ring. 0 = disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "alertmanager.sharding-ring.heartbeat-period",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "heartbeat_timeout",
              "required": false,
              "desc": "The heartbeat timeout after which alertmanagers are considered unhealthy within the ring. 0 = never (timeout disabled).",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "alertmanager.sharding-ring.heartbeat-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "replication_factor",
              "required": false,
              "desc": "The replication factor to use when sharding the alertmanager.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "alertmanager.sharding-ring.replication-factor",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "zone_awareness_enabled",
              "required": false,
              "desc": "True to enable zone-awareness and replicate alerts across different availability zones.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "alertmanager.sharding-ring.zone-awareness-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "instance_id",
              "required": false,
              "desc": "Instance ID to register in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": null,
              "fieldFlag": "alertmanager.sharding-ring.instance-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "instance_interface_names",
              "required": false,
              "desc": "Name of network interface to read address from.",
              "fieldValue": null,
              "fieldDefaultValue": [
                "eth0",
                "en0"
              ],
              "fieldFlag": "alertmanager.sharding-ring.instance-interface-names",
              "fieldType": "list of strings"
            },
            {
              "kind": "field",
              "name": "instance_port",
              "required": false,
              "desc": "Port to advertise in the ring (defaults to server.grpc-listen-port).",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "alertmanager.sharding-ring.instance-port",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "instance_addr",
              "required": false,
              "desc": "IP address to advertise in the ring.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.sharding-ring.instance-addr",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "instance_availability_zone",
              "required": false,
              "desc": "The availability zone where this instance is running. Required if zone-awareness is enabled.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.sharding-ring.instance-availability-zone",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "fallback_config_file",
          "required": false,
          "desc": "Filename of fallback config to use if none specified for instance.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "alertmanager.configs.fallback",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "auto_webhook_root",
          "required": false,
          "desc": "Root of URL to generate if config is http://internal.monitor",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "alertmanager.configs.auto-webhook-root",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "storage",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "type",
              "required": false,
              "desc": "Type of backend to use to store alertmanager configs. Supported values are: \"gcs\", \"s3\", \"local\".",
              "fieldValue": null,
              "fieldDefaultValue": "local",
              "fieldFlag": "alertmanager.storage.type",
              "fieldType": "string"
            },
            {
              "kind": "block",
              "name": "azure",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "environment",
                  "required": false,
                  "desc": "Azure Cloud environment. Supported values are: AzureGlobal, AzureChinaCloud, AzureGermanCloud, AzureUSGovernment.",
                  "fieldValue": null,
                  "fieldDefaultValue": "AzureGlobal",
                  "fieldFlag": "alertmanager.storage.azure.environment",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "container_name",
                  "required": false,
                  "desc": "Name of the blob container used to store chunks. This container must be created prior to execution.",
                  "fieldValue": null,
                  "fieldDefaultValue": "cortex",
                  "fieldFlag": "alertmanager.storage.azure.container-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "account_name",
                  "required": false,
                  "desc": "The Microsoft Azure account name to be used",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager.storage.azure.account-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "account_key",
                  "required": false,
                  "desc": "The Microsoft Azure account key to use.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager.storage.azure.account-key",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "download_buffer_size",
                  "required": false,
                  "desc": "Preallocated buffer size for downloads.",
                  "fieldValue": null,
                  "fieldDefaultValue": 512000,
                  "fieldFlag": "alertmanager.storage.azure.download-buffer-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "upload_buffer_size",
                  "required": false,
                  "desc": "Preallocated buffer size for uploads.",
                  "fieldValue": null,
                  "fieldDefaultValue": 256000,
                  "fieldFlag": "alertmanager.storage.azure.upload-buffer-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "upload_buffer_count",
                  "required": false,
                  "desc": "Number of buffers used to used to upload a chunk.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1,
                  "fieldFlag": "alertmanager.storage.azure.download-buffer-count",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "request_timeout",
                  "required": false,
                  "desc": "Timeout for requests made against azure blob storage.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "alertmanager.storage.azure.request-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of retries for a request which times out.",
                  "fieldValue": null,
                  "fieldDefaultValue": 5,
                  "fieldFlag": "alertmanager.storage.azure.max-retries",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "min_retry_delay",
                  "required": false,
                  "desc": "Minimum time to wait before retrying a request.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000,
                  "fieldFlag": "alertmanager.storage.azure.min-retry-delay",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_retry_delay",
                  "required": false,
                  "desc": "Maximum time to wait before retrying a request.",
                  "fieldValue": null,
                  "fieldDefaultValue": 500000000,
                  "fieldFlag": "alertmanager.storage.azure.max-retry-delay",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "gcs",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "bucket_name",
                  "required": false,
                  "desc": "Name of GCS bucket. Please refer to https://cloud.google.com/docs/authentication/production for more information about how to configure authentication.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager.storage.gcs.bucketname",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "chunk_buffer_size",
                  "required": false,
                  "desc": "The size of the buffer that GCS client for each PUT request. 0 to disable buffering.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "alertmanager.storage.gcs.chunk-buffer-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "request_timeout",
                  "required": false,
                  "desc": "The duration after which the requests to GCS should be timed out.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "alertmanager.storage.gcs.request-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "enable_opencensus",
                  "required": false,
                  "desc": "Enabled OpenCensus (OC) instrumentation for all requests.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "alertmanager.storage.gcs.enable-opencensus",
                  "fieldType": "boolean"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "s3",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "s3",
                  "required": false,
                  "desc": "S3 endpoint URL with escaped Key and Secret encoded. If only region is specified as a host, proper endpoint will be deduced. Use inmemory:///\u003cbucket-name\u003e to use a mock in-memory implementation.",
                  "fieldValue": null,
                  "fieldDefaultValue": {},
                  "fieldFlag": "alertmanager.storage.s3.url",
                  "fieldType": "url"
                },
                {
                  "kind": "field",
                  "name": "s3forcepathstyle",
                  "required": false,
                  "desc": "Set this to `true` to force the request to use path-style addressing.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "alertmanager.storage.s3.force-path-style",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "bucketnames",
                  "required": false,
                  "desc": "Comma separated list of bucket names to evenly distribute chunks over. Overrides any buckets specified in s3.url flag",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager.storage.s3.buckets",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "endpoint",
                  "required": false,
                  "desc": "S3 Endpoint to connect to.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager.storage.s3.endpoint",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "region",
                  "required": false,
                  "desc": "AWS region to use.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager.storage.s3.region",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "access_key_id",
                  "required": false,
                  "desc": "AWS Access Key ID",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager.storage.s3.access-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "secret_access_key",
                  "required": false,
                  "desc": "AWS Secret Access Key",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager.storage.s3.secret-access-key",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "insecure",
                  "required": false,
                  "desc": "Disable https on s3 connection.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "alertmanager.storage.s3.insecure",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "sse_encryption",
                  "required": false,
                  "desc": "Enable AWS Server Side Encryption [Deprecated: Use .sse instead. if s3.sse-encryption is enabled, it assumes .sse.type SSE-S3]",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "alertmanager.storage.s3.sse-encryption",
                  "fieldType": "boolean"
                },
                {
                  "kind": "block",
                  "name": "http_config",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "idle_conn_timeout",
                      "required": false,
                      "desc": "The maximum amount of time an idle connection will be held open.",
                      "fieldValue": null,
                      "fieldDefaultValue": 90000000000,
                      "fieldFlag": "alertmanager.storage.s3.http.idle-conn-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "response_header_timeout",
                      "required": false,
                      "desc": "If non-zero, specifies the amount of time to wait for a server's response headers after fully writing the request.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "alertmanager.storage.s3.http.response-header-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "insecure_skip_verify",
                      "required": false,
                      "desc": "Set to false to skip verifying the certificate chain and hostname.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "alertmanager.storage.s3.http.insecure-skip-verify",
                      "fieldType": "boolean"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "signature_version",
                  "required": false,
                  "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
                  "fieldValue": null,
                  "fieldDefaultValue": "v4",
                  "fieldFlag": "alertmanager.storage.s3.signature-version",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "sse",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "type",
                      "required": false,
                      "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.storage.s3.sse.type",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "kms_key_id",
                      "required": false,
                      "desc": "KMS Key ID used to encrypt objects in S3",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.storage.s3.sse.kms-key-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "kms_encryption_context",
                      "required": false,
                      "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "alertmanager.storage.s3.sse.kms-encryption-context",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "local",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "path",
                  "required": false,
                  "desc": "Path at which alertmanager configurations are stored.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager.storage.local.path",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "cluster",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "listen_address",
              "required": false,
              "desc": "Listen address and port for the cluster. Not specifying this flag disables high-availability mode.",
              "fieldValue": null,
              "fieldDefaultValue": "0.0.0.0:9094",
              "fieldFlag": "alertmanager.cluster.listen-address",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "advertise_address",
              "required": false,
              "desc": "Explicit address or hostname to advertise in cluster.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.cluster.advertise-address",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "peers",
              "required": false,
              "desc": "Comma-separated list of initial peers.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.cluster.peers",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "peer_timeout",
              "required": false,
              "desc": "Time to wait between peers to send notifications.",
              "fieldValue": null,
              "fieldDefaultValue": 15000000000,
              "fieldFlag": "alertmanager.cluster.peer-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "gossip_interval",
              "required": false,
              "desc": "The interval between sending gossip messages. By lowering this value (more frequent) gossip messages are propagated across cluster more quickly at the expense of increased bandwidth usage.",
              "fieldValue": null,
              "fieldDefaultValue": 200000000,
              "fieldFlag": "alertmanager.cluster.gossip-interval",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "push_pull_interval",
              "required": false,
              "desc": "The interval between gossip state syncs. Setting this interval lower (more frequent) will increase convergence speeds across larger clusters at the expense of increased bandwidth usage.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "alertmanager.cluster.push-pull-interval",
              "fieldType": "duration"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "enable_api",
          "required": false,
          "desc": "Enable the experimental alertmanager config api.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "experimental.alertmanager.enable-api",
          "fieldType": "boolean"
        },
        {
          "kind": "block",
          "name": "alertmanager_client",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "remote_timeout",
              "required": false,
              "desc": "Timeout for downstream alertmanagers.",
              "fieldValue": null,
              "fieldDefaultValue": 2000000000,
              "fieldFlag": "alertmanager.alertmanager-client.remote-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "alertmanager.alertmanager-client.tls-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.alertmanager-client.tls-cert-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.alertmanager-client.tls-key-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.alertmanager-client.tls-ca-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager.alertmanager-client.tls-server-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "alertmanager.alertmanager-client.tls-insecure-skip-verify",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "persist_interval",
          "required": false,
          "desc": "The interval between persisting the current alertmanager state (notification log and silences) to object storage. This is only used when sharding is enabled. This state is read when all replicas for a shard can not be contacted. In this scenario, having persisted the state more frequently will result in potentially fewer lost silences, and fewer duplicate notifications.",
          "fieldValue": null,
          "fieldDefaultValue": 900000000000,
          "fieldFlag": "alertmanager.persist-interval",
          "fieldType": "duration"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "alertmanager_storage",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "backend",
          "required": false,
          "desc": "Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem, local.",
          "fieldValue": null,
          "fieldDefaultValue": "s3",
          "fieldFlag": "alertmanager-storage.backend",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "s3",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "endpoint",
              "required": false,
              "desc": "The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.s3.endpoint",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region",
              "required": false,
              "desc": "S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.s3.region",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "S3 bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.s3.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "secret_access_key",
              "required": false,
              "desc": "S3 secret access key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.s3.secret-access-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "access_key_id",
              "required": false,
              "desc": "S3 access key ID",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.s3.access-key-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "insecure",
              "required": false,
              "desc": "If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "alertmanager-storage.s3.insecure",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "signature_version",
              "required": false,
              "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
              "fieldValue": null,
              "fieldDefaultValue": "v4",
              "fieldFlag": "alertmanager-storage.s3.signature-version",
              "fieldType": "string"
            },
            {
              "kind": "block",
              "name": "sse",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "type",
                  "required": false,
                  "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager-storage.s3.sse.type",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_key_id",
                  "required": false,
                  "desc": "KMS Key ID used to encrypt objects in S3",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager-storage.s3.sse.kms-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "kms_encryption_context",
                  "required": false,
                  "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "alertmanager-storage.s3.sse.kms-encryption-context",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "http",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "idle_conn_timeout",
                  "required": false,
                  "desc": "The time an idle connection will remain idle before closing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 90000000000,
                  "fieldFlag": "alertmanager-storage.s3.http.idle-conn-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "response_header_timeout",
                  "required": false,
                  "desc": "The amount of time the client will wait for a servers response headers.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "alertmanager-storage.s3.http.response-header-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "insecure_skip_verify",
                  "required": false,
                  "desc": "If the client connects to S3 via HTTPS and this option is enabled, the client will accept any certificate and hostname.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "alertmanager-storage.s3.http.insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_handshake_timeout",
                  "required": false,
                  "desc": "Maximum time to wait for a TLS handshake. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "alertmanager-storage.s3.tls-handshake-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "expect_continue_timeout",
                  "required": false,
                  "desc": "The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.",
                  "fieldValue": null,
                  "fieldDefaultValue": 1000000000,
                  "fieldFlag": "alertmanager-storage.s3.expect-continue-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "alertmanager-storage.s3.max-idle-connections",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_idle_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "alertmanager-storage.s3.max-idle-connections-per-host",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_connections_per_host",
                  "required": false,
                  "desc": "Maximum number of connections per host. 0 means no limit.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "alertmanager-storage.s3.max-connections-per-host",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "gcs",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "bucket_name",
              "required": false,
              "desc": "GCS bucket name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.gcs.bucket-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "service_account",
              "required": false,
              "desc": "JSON representing either a Google Developers Console client_credentials.json file or a Google Developers service account key file. If empty, fallback to Google default logic.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.gcs.service-account",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "azure",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "account_name",
              "required": false,
              "desc": "Azure storage account name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.azure.account-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "account_key",
              "required": false,
              "desc": "Azure storage account key",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.azure.account-key",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Azure storage container name",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.azure.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "endpoint_suffix",
              "required": false,
              "desc": "Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.azure.endpoint-suffix",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Number of retries for recoverable errors",
              "fieldValue": null,
              "fieldDefaultValue": 20,
              "fieldFlag": "alertmanager-storage.azure.max-retries",
              "fieldType": "int"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "swift",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "auth_version",
              "required": false,
              "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "alertmanager-storage.swift.auth-version",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "auth_url",
              "required": false,
              "desc": "OpenStack Swift authentication URL",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.auth-url",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "username",
              "required": false,
              "desc": "OpenStack Swift username.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.username",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.user-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.user-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "user_id",
              "required": false,
              "desc": "OpenStack Swift user ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.user-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "password",
              "required": false,
              "desc": "OpenStack Swift API key.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.password",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_id",
              "required": false,
              "desc": "OpenStack Swift user's domain ID.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "domain_name",
              "required": false,
              "desc": "OpenStack Swift user's domain name.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_id",
              "required": false,
              "desc": "OpenStack Swift project ID (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.project-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_name",
              "required": false,
              "desc": "OpenStack Swift project name (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.project-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_id",
              "required": false,
              "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.project-domain-id",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "project_domain_name",
              "required": false,
              "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.project-domain-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "region_name",
              "required": false,
              "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.region-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "container_name",
              "required": false,
              "desc": "Name of the OpenStack Swift container to put chunks in.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.swift.container-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_retries",
              "required": false,
              "desc": "Max retries on requests error.",
              "fieldValue": null,
              "fieldDefaultValue": 3,
              "fieldFlag": "alertmanager-storage.swift.max-retries",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "connect_timeout",
              "required": false,
              "desc": "Time after which a connection attempt is aborted.",
              "fieldValue": null,
              "fieldDefaultValue": 10000000000,
              "fieldFlag": "alertmanager-storage.swift.connect-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "request_timeout",
              "required": false,
              "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "alertmanager-storage.swift.request-timeout",
              "fieldType": "duration"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "filesystem",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "dir",
              "required": false,
              "desc": "Local filesystem storage directory.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.filesystem.dir",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "local",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "path",
              "required": false,
              "desc": "Path at which alertmanager configurations are stored.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "alertmanager-storage.local.path",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "runtime_config",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "period",
          "required": false,
          "desc": "How often to check runtime config file.",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "runtime-config.reload-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "file",
          "required": false,
          "desc": "File with the configuration that can be updated in runtime.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "runtime-config.file",
          "fieldType": "string"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "memberlist",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "node_name",
          "required": false,
          "desc": "Name of the node in memberlist cluster. Defaults to hostname.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.nodename",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "randomize_node_name",
          "required": false,
          "desc": "Add random suffix to the node name.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "memberlist.randomize-node-name",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "stream_timeout",
          "required": false,
          "desc": "The timeout for establishing a connection with a remote node, and for read/write operations.",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "memberlist.stream-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "retransmit_factor",
          "required": false,
          "desc": "Multiplication factor used when sending out messages (factor * log(N+1)).",
          "fieldValue": null,
          "fieldDefaultValue": 4,
          "fieldFlag": "memberlist.retransmit-factor",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "pull_push_interval",
          "required": false,
          "desc": "How often to use pull/push sync.",
          "fieldValue": null,
          "fieldDefaultValue": 30000000000,
          "fieldFlag": "memberlist.pullpush-interval",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "gossip_interval",
          "required": false,
          "desc": "How often to gossip.",
          "fieldValue": null,
          "fieldDefaultValue": 200000000,
          "fieldFlag": "memberlist.gossip-interval",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "gossip_nodes",
          "required": false,
          "desc": "How many nodes to gossip to.",
          "fieldValue": null,
          "fieldDefaultValue": 3,
          "fieldFlag": "memberlist.gossip-nodes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "gossip_to_dead_nodes_time",
          "required": false,
          "desc": "How long to keep gossiping to dead nodes, to give them chance to refute their death.",
          "fieldValue": null,
          "fieldDefaultValue": 30000000000,
          "fieldFlag": "memberlist.gossip-to-dead-nodes-time",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "dead_node_reclaim_time",
          "required": false,
          "desc": "How soon can dead node's name be reclaimed with new address. 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "memberlist.dead-node-reclaim-time",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "compression_enabled",
          "required": false,
          "desc": "Enable message compression. This can be used to reduce bandwidth usage at the cost of slightly more CPU utilization.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "memberlist.compression-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "advertise_addr",
          "required": false,
          "desc": "Gossip address to advertise to other members in the cluster. Used for NAT traversal.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.advertise-addr",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "advertise_port",
          "required": false,
          "desc": "Gossip port to advertise to other members in the cluster. Used for NAT traversal.",
          "fieldValue": null,
          "fieldDefaultValue": 7946,
          "fieldFlag": "memberlist.advertise-port",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "join_members",
          "required": false,
          "desc": "Other cluster members to join. Can be specified multiple times. It can be an IP, hostname or an entry specified in the DNS Service Discovery format.",
          "fieldValue": null,
          "fieldDefaultValue": [],
          "fieldFlag": "memberlist.join",
          "fieldType": "list of strings"
        },
        {
          "kind": "field",
          "name": "min_join_backoff",
          "required": false,
          "desc": "Min backoff duration to join other cluster members.",
          "fieldValue": null,
          "fieldDefaultValue": 1000000000,
          "fieldFlag": "memberlist.min-join-backoff",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_join_backoff",
          "required": false,
          "desc": "Max backoff duration to join other cluster members.",
          "fieldValue": null,
          "fieldDefaultValue": 60000000000,
          "fieldFlag": "memberlist.max-join-backoff",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "max_join_retries",
          "required": false,
          "desc": "Max number of retries to join other cluster members.",
          "fieldValue": null,
          "fieldDefaultValue": 10,
          "fieldFlag": "memberlist.max-join-retries",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "abort_if_cluster_join_fails",
          "required": false,
          "desc": "If this node fails to join memberlist cluster, abort.",
          "fieldValue": null,
          "fieldDefaultValue": true,
          "fieldFlag": "memberlist.abort-if-join-fails",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "rejoin_interval",
          "required": false,
          "desc": "If not 0, how often to rejoin the cluster. Occasional rejoin can help to fix the cluster split issue, and is harmless otherwise. For example when using only few components as a seed nodes (via -memberlist.join), then it's recommended to use rejoin. If -memberlist.join points to dynamic service that resolves to all gossiping nodes (eg. Kubernetes headless service), then rejoin is not needed.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "memberlist.rejoin-interval",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "left_ingesters_timeout",
          "required": false,
          "desc": "How long to keep LEFT ingesters in the ring.",
          "fieldValue": null,
          "fieldDefaultValue": 300000000000,
          "fieldFlag": "memberlist.left-ingesters-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "leave_timeout",
          "required": false,
          "desc": "Timeout for leaving memberlist cluster.",
          "fieldValue": null,
          "fieldDefaultValue": 5000000000,
          "fieldFlag": "memberlist.leave-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "message_history_buffer_bytes",
          "required": false,
          "desc": "How much space to use for keeping received and sent messages in memory for troubleshooting (two buffers). 0 to disable.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "memberlist.message-history-buffer-bytes",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "bind_addr",
          "required": false,
          "desc": "IP address to listen on for gossip messages. Multiple addresses may be specified. Defaults to 0.0.0.0",
          "fieldValue": null,
          "fieldDefaultValue": [],
          "fieldFlag": "memberlist.bind-addr",
          "fieldType": "list of strings"
        },
        {
          "kind": "field",
          "name": "bind_port",
          "required": false,
          "desc": "Port to listen on for gossip messages.",
          "fieldValue": null,
          "fieldDefaultValue": 7946,
          "fieldFlag": "memberlist.bind-port",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "packet_dial_timeout",
          "required": false,
          "desc": "Timeout used when connecting to other nodes to send packet.",
          "fieldValue": null,
          "fieldDefaultValue": 5000000000,
          "fieldFlag": "memberlist.packet-dial-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "packet_write_timeout",
          "required": false,
          "desc": "Timeout for writing 'packet' data.",
          "fieldValue": null,
          "fieldDefaultValue": 5000000000,
          "fieldFlag": "memberlist.packet-write-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "tls_enabled",
          "required": false,
          "desc": "Enable TLS on the memberlist transport layer.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "memberlist.tls-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "tls_cert_path",
          "required": false,
          "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.tls-cert-path",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "tls_key_path",
          "required": false,
          "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.tls-key-path",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "tls_ca_path",
          "required": false,
          "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.tls-ca-path",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "tls_server_name",
          "required": false,
          "desc": "Override the expected name on the server certificate.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "memberlist.tls-server-name",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "tls_insecure_skip_verify",
          "required": false,
          "desc": "Skip validating server certificate.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "memberlist.tls-insecure-skip-verify",
          "fieldType": "boolean"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "query_scheduler",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "max_outstanding_requests_per_tenant",
          "required": false,
          "desc": "Maximum number of outstanding requests per tenant per query-scheduler. In-flight requests above this limit will fail with HTTP response status code 429.",
          "fieldValue": null,
          "fieldDefaultValue": 100,
          "fieldFlag": "query-scheduler.max-outstanding-requests-per-tenant",
          "fieldType": "int"
        },
        {
          "kind": "field",
          "name": "querier_forget_delay",
          "required": false,
          "desc": "If a querier disconnects without sending notification about graceful shutdown, the query-scheduler will keep the querier in the tenant's shard until the forget delay has passed. This feature is useful to reduce the blast radius when shuffle-sharding is enabled.",
          "fieldValue": null,
          "fieldDefaultValue": 0,
          "fieldFlag": "query-scheduler.querier-forget-delay",
          "fieldType": "duration"
        },
        {
          "kind": "block",
          "name": "grpc_client_config",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "max_recv_msg_size",
              "required": false,
              "desc": "gRPC client max receive message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 104857600,
              "fieldFlag": "query-scheduler.grpc-client-config.grpc-max-recv-msg-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "max_send_msg_size",
              "required": false,
              "desc": "gRPC client max send message size (bytes).",
              "fieldValue": null,
              "fieldDefaultValue": 16777216,
              "fieldFlag": "query-scheduler.grpc-client-config.grpc-max-send-msg-size",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "grpc_compression",
              "required": false,
              "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.grpc-client-config.grpc-compression",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "rate_limit",
              "required": false,
              "desc": "Rate limit for gRPC client; 0 means disabled.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "query-scheduler.grpc-client-config.grpc-client-rate-limit",
              "fieldType": "float"
            },
            {
              "kind": "field",
              "name": "rate_limit_burst",
              "required": false,
              "desc": "Rate limit burst for gRPC client.",
              "fieldValue": null,
              "fieldDefaultValue": 0,
              "fieldFlag": "query-scheduler.grpc-client-config.grpc-client-rate-limit-burst",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "backoff_on_ratelimits",
              "required": false,
              "desc": "Enable backoff and retry when we hit ratelimits.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "query-scheduler.grpc-client-config.backoff-on-ratelimits",
              "fieldType": "boolean"
            },
            {
              "kind": "block",
              "name": "backoff_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "min_period",
                  "required": false,
                  "desc": "Minimum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100000000,
                  "fieldFlag": "query-scheduler.grpc-client-config.backoff-min-period",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_period",
                  "required": false,
                  "desc": "Maximum delay when backing off.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "query-scheduler.grpc-client-config.backoff-max-period",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of times to backoff and retry before failing.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "query-scheduler.grpc-client-config.backoff-retries",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "query-scheduler.grpc-client-config.tls-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.grpc-client-config.tls-cert-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.grpc-client-config.tls-key-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.grpc-client-config.tls-ca-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "query-scheduler.grpc-client-config.tls-server-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "query-scheduler.grpc-client-config.tls-insecure-skip-verify",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "admin_api",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "user_header_name",
          "required": false,
          "desc": "Designated header to parse when searching for the grafana user ID of the user accessing the API.",
          "fieldValue": null,
          "fieldDefaultValue": "X-WEBAUTH-USER",
          "fieldFlag": "admin.api.user-header-name",
          "fieldType": "string"
        },
        {
          "kind": "block",
          "name": "leader_election",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enabled",
              "required": false,
              "desc": "This flag enables leader election for the admin api.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "admin-api.leader-election.enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "block",
              "name": "ring",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "block",
                  "name": "kvstore",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "store",
                      "required": false,
                      "desc": "Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.",
                      "fieldValue": null,
                      "fieldDefaultValue": "consul",
                      "fieldFlag": "admin-api.leader-election.ring.store",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "prefix",
                      "required": false,
                      "desc": "The prefix for the keys in the store. Should end with a /.",
                      "fieldValue": null,
                      "fieldDefaultValue": "leader-election/",
                      "fieldFlag": "admin-api.leader-election.ring.prefix",
                      "fieldType": "string"
                    },
                    {
                      "kind": "block",
                      "name": "consul",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "host",
                          "required": false,
                          "desc": "Hostname and port of Consul.",
                          "fieldValue": null,
                          "fieldDefaultValue": "localhost:8500",
                          "fieldFlag": "admin-api.leader-election.ring.consul.hostname",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "acl_token",
                          "required": false,
                          "desc": "ACL Token used to interact with Consul.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.consul.acl-token",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "http_client_timeout",
                          "required": false,
                          "desc": "HTTP timeout when talking to Consul",
                          "fieldValue": null,
                          "fieldDefaultValue": 20000000000,
                          "fieldFlag": "admin-api.leader-election.ring.consul.client-timeout",
                          "fieldType": "duration"
                        },
                        {
                          "kind": "field",
                          "name": "consistent_reads",
                          "required": false,
                          "desc": "Enable consistent reads to Consul.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "admin-api.leader-election.ring.consul.consistent-reads",
                          "fieldType": "boolean"
                        },
                        {
                          "kind": "field",
                          "name": "watch_rate_limit",
                          "required": false,
                          "desc": "Rate limit when watching key or prefix in Consul, in requests per second. 0 disables the rate limit.",
                          "fieldValue": null,
                          "fieldDefaultValue": 1,
                          "fieldFlag": "admin-api.leader-election.ring.consul.watch-rate-limit",
                          "fieldType": "float"
                        },
                        {
                          "kind": "field",
                          "name": "watch_burst_size",
                          "required": false,
                          "desc": "Burst size used in rate limit. Values less than 1 are treated as 1.",
                          "fieldValue": null,
                          "fieldDefaultValue": 1,
                          "fieldFlag": "admin-api.leader-election.ring.consul.watch-burst-size",
                          "fieldType": "int"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    },
                    {
                      "kind": "block",
                      "name": "etcd",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "endpoints",
                          "required": false,
                          "desc": "The etcd endpoints to connect to.",
                          "fieldValue": null,
                          "fieldDefaultValue": [],
                          "fieldFlag": "admin-api.leader-election.ring.etcd.endpoints",
                          "fieldType": "list of strings"
                        },
                        {
                          "kind": "field",
                          "name": "dial_timeout",
                          "required": false,
                          "desc": "The dial timeout for the etcd connection.",
                          "fieldValue": null,
                          "fieldDefaultValue": 10000000000,
                          "fieldFlag": "admin-api.leader-election.ring.etcd.dial-timeout",
                          "fieldType": "duration"
                        },
                        {
                          "kind": "field",
                          "name": "max_retries",
                          "required": false,
                          "desc": "The maximum number of retries to do for failed ops.",
                          "fieldValue": null,
                          "fieldDefaultValue": 10,
                          "fieldFlag": "admin-api.leader-election.ring.etcd.max-retries",
                          "fieldType": "int"
                        },
                        {
                          "kind": "field",
                          "name": "tls_enabled",
                          "required": false,
                          "desc": "Enable TLS.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-enabled",
                          "fieldType": "boolean"
                        },
                        {
                          "kind": "field",
                          "name": "tls_cert_path",
                          "required": false,
                          "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-cert-path",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "tls_key_path",
                          "required": false,
                          "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-key-path",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "tls_ca_path",
                          "required": false,
                          "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-ca-path",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "tls_server_name",
                          "required": false,
                          "desc": "Override the expected name on the server certificate.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-server-name",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "tls_insecure_skip_verify",
                          "required": false,
                          "desc": "Skip validating server certificate.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "admin-api.leader-election.ring.etcd.tls-insecure-skip-verify",
                          "fieldType": "boolean"
                        },
                        {
                          "kind": "field",
                          "name": "username",
                          "required": false,
                          "desc": "Etcd username.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.username",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "password",
                          "required": false,
                          "desc": "Etcd password.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.etcd.password",
                          "fieldType": "string"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    },
                    {
                      "kind": "block",
                      "name": "multi",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "primary",
                          "required": false,
                          "desc": "Primary backend storage used by multi-client.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.multi.primary",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "secondary",
                          "required": false,
                          "desc": "Secondary backend storage used by multi-client.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "admin-api.leader-election.ring.multi.secondary",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "mirror_enabled",
                          "required": false,
                          "desc": "Mirror writes to secondary store.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "admin-api.leader-election.ring.multi.mirror-enabled",
                          "fieldType": "boolean"
                        },
                        {
                          "kind": "field",
                          "name": "mirror_timeout",
                          "required": false,
                          "desc": "Timeout for storing value to secondary store.",
                          "fieldValue": null,
                          "fieldDefaultValue": 2000000000,
                          "fieldFlag": "admin-api.leader-election.ring.multi.mirror-timeout",
                          "fieldType": "duration"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "heartbeat_period",
                  "required": false,
                  "desc": "Period at which to heartbeat to the ring.",
                  "fieldValue": null,
                  "fieldDefaultValue": 15000000000,
                  "fieldFlag": "admin-api.leader-election.ring.heartbeat-period",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "heartbeat_timeout",
                  "required": false,
                  "desc": "The heartbeat timeout after which admin-api instances are considered unhealthy within the ring.",
                  "fieldValue": null,
                  "fieldDefaultValue": 60000000000,
                  "fieldFlag": "admin-api.leader-election.ring.heartbeat-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "tokens_observe_period",
                  "required": false,
                  "desc": "Period to wait after generating tokens to resolve collisions. Required when using a gossip ring KV store.",
                  "fieldValue": null,
                  "fieldDefaultValue": 60000000000,
                  "fieldFlag": "admin-api.leader-election.ring.tokens-observe-period",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "instance_id",
                  "required": false,
                  "desc": "Instance ID to register in the ring.",
                  "fieldValue": null,
                  "fieldDefaultValue": null,
                  "fieldFlag": "admin-api.leader-election.ring.instance-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "instance_interface_names",
                  "required": false,
                  "desc": "Name of network interface to read address from.",
                  "fieldValue": null,
                  "fieldDefaultValue": [
                    "eth0",
                    "en0"
                  ],
                  "fieldFlag": "admin-api.leader-election.ring.instance-interface-names",
                  "fieldType": "list of strings"
                },
                {
                  "kind": "field",
                  "name": "instance_port",
                  "required": false,
                  "desc": "Port to advertise in the ring (defaults to server.grpc-listen-port).",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "admin-api.leader-election.ring.instance-port",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "instance_addr",
                  "required": false,
                  "desc": "IP address to advertise in the ring.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.ring.instance-addr",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "client_config",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "max_recv_msg_size",
                  "required": false,
                  "desc": "gRPC client max receive message size (bytes).",
                  "fieldValue": null,
                  "fieldDefaultValue": 104857600,
                  "fieldFlag": "admin-api.leader-election.client.grpc-max-recv-msg-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "max_send_msg_size",
                  "required": false,
                  "desc": "gRPC client max send message size (bytes).",
                  "fieldValue": null,
                  "fieldDefaultValue": 16777216,
                  "fieldFlag": "admin-api.leader-election.client.grpc-max-send-msg-size",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "grpc_compression",
                  "required": false,
                  "desc": "Use compression when sending messages. Supported values are: 'gzip', 'snappy' and '' (disable compression)",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.client.grpc-compression",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "rate_limit",
                  "required": false,
                  "desc": "Rate limit for gRPC client; 0 means disabled.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "admin-api.leader-election.client.grpc-client-rate-limit",
                  "fieldType": "float"
                },
                {
                  "kind": "field",
                  "name": "rate_limit_burst",
                  "required": false,
                  "desc": "Rate limit burst for gRPC client.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "admin-api.leader-election.client.grpc-client-rate-limit-burst",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "backoff_on_ratelimits",
                  "required": false,
                  "desc": "Enable backoff and retry when we hit ratelimits.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "admin-api.leader-election.client.backoff-on-ratelimits",
                  "fieldType": "boolean"
                },
                {
                  "kind": "block",
                  "name": "backoff_config",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "min_period",
                      "required": false,
                      "desc": "Minimum delay when backing off.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "admin-api.leader-election.client.backoff-min-period",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_period",
                      "required": false,
                      "desc": "Maximum delay when backing off.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "admin-api.leader-election.client.backoff-max-period",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "Number of times to backoff and retry before failing.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "admin-api.leader-election.client.backoff-retries",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "admin-api.leader-election.client.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.client.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.client.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.client.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin-api.leader-election.client.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "admin-api.leader-election.client.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "limits",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "enabled",
              "required": false,
              "desc": "Enable API based limits per-tenant.",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "admin-api.limits.enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "refresh_period",
              "required": false,
              "desc": "Period with which to refresh per-tenant limits.",
              "fieldValue": null,
              "fieldDefaultValue": 60000000000,
              "fieldFlag": "admin-api.limits.refresh-period",
              "fieldType": "duration"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "admin_client",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "storage",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "type",
              "required": false,
              "desc": "Set a backend to use, (gcs, s3, azure)",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "admin.client.backend-type",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "enable_cache",
              "required": false,
              "desc": "Enable caching on the versioned client",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "admin.client.cache.enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "block",
              "name": "s3",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "endpoint",
                  "required": false,
                  "desc": "The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.s3.endpoint",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "region",
                  "required": false,
                  "desc": "S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.s3.region",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "bucket_name",
                  "required": false,
                  "desc": "S3 bucket name",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.s3.bucket-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "secret_access_key",
                  "required": false,
                  "desc": "S3 secret access key",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.s3.secret-access-key",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "access_key_id",
                  "required": false,
                  "desc": "S3 access key ID",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.s3.access-key-id",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "insecure",
                  "required": false,
                  "desc": "If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "admin.client.s3.insecure",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "signature_version",
                  "required": false,
                  "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
                  "fieldValue": null,
                  "fieldDefaultValue": "v4",
                  "fieldFlag": "admin.client.s3.signature-version",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "sse",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "type",
                      "required": false,
                      "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "admin.client.s3.sse.type",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "kms_key_id",
                      "required": false,
                      "desc": "KMS Key ID used to encrypt objects in S3",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "admin.client.s3.sse.kms-key-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "kms_encryption_context",
                      "required": false,
                      "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "admin.client.s3.sse.kms-encryption-context",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "http",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "idle_conn_timeout",
                      "required": false,
                      "desc": "The time an idle connection will remain idle before closing.",
                      "fieldValue": null,
                      "fieldDefaultValue": 90000000000,
                      "fieldFlag": "admin.client.s3.http.idle-conn-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "response_header_timeout",
                      "required": false,
                      "desc": "The amount of time the client will wait for a servers response headers.",
                      "fieldValue": null,
                      "fieldDefaultValue": 120000000000,
                      "fieldFlag": "admin.client.s3.http.response-header-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "insecure_skip_verify",
                      "required": false,
                      "desc": "If the client connects to S3 via HTTPS and this option is enabled, the client will accept any certificate and hostname.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "admin.client.s3.http.insecure-skip-verify",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "tls_handshake_timeout",
                      "required": false,
                      "desc": "Maximum time to wait for a TLS handshake. 0 means no limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "admin.client.s3.tls-handshake-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "expect_continue_timeout",
                      "required": false,
                      "desc": "The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1000000000,
                      "fieldFlag": "admin.client.s3.expect-continue-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections",
                      "required": false,
                      "desc": "Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "admin.client.s3.max-idle-connections",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_connections_per_host",
                      "required": false,
                      "desc": "Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "admin.client.s3.max-idle-connections-per-host",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_connections_per_host",
                      "required": false,
                      "desc": "Maximum number of connections per host. 0 means no limit.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "admin.client.s3.max-connections-per-host",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "gcs",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "bucket_name",
                  "required": false,
                  "desc": "GCS bucket name",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.gcs.bucket-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "service_account",
                  "required": false,
                  "desc": "JSON representing either a Google Developers Console client_credentials.json file or a Google Developers service account key file. If empty, fallback to Google default logic.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.gcs.service-account",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "azure",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "account_name",
                  "required": false,
                  "desc": "Azure storage account name",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.azure.account-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "account_key",
                  "required": false,
                  "desc": "Azure storage account key",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.azure.account-key",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "container_name",
                  "required": false,
                  "desc": "Azure storage container name",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.azure.container-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "endpoint_suffix",
                  "required": false,
                  "desc": "Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "admin.client.azure.endpoint-suffix",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "max_retries",
                  "required": false,
                  "desc": "Number of retries for recoverable errors",
                  "fieldValue": null,
                  "fieldDefaultValue": 20,
                  "fieldFlag": "admin.client.azure.max-retries",
                  "fieldType": "int"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "disable_default_admin_policy",
          "required": false,
          "desc": "If set to true, the built-in __admin__ access policy will not be active.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "admin.client.disable-default-admin-policy",
          "fieldType": "boolean"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "auth",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "type",
          "required": false,
          "desc": "method for authenticating incoming HTTP requests, (trust, enterprise).",
          "fieldValue": null,
          "fieldDefaultValue": "trust",
          "fieldFlag": "auth.type",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "required_for_metrics",
          "required": false,
          "desc": "requires admin level auth for the /metrics endpoint.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "auth.required-for-metrics",
          "fieldType": "boolean"
        },
        {
          "kind": "block",
          "name": "override",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "token",
              "required": false,
              "desc": "Override admin token. If set, this string will always be accepted as a token with admin level scope.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "auth.override.token",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "token_file",
              "required": false,
              "desc": "If set, this file will be read at startup and the string from that file will be used as a admin scoped token.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "auth.override.token-file",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "admin",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "cache_ttl",
              "required": false,
              "desc": "how long auth responses should be cached",
              "fieldValue": null,
              "fieldDefaultValue": 600000000000,
              "fieldFlag": "auth.cache.ttl",
              "fieldType": "duration"
            },
            {
              "kind": "block",
              "name": "oidc",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "issuer_url",
                  "required": false,
                  "desc": "JWT token issuer URL (example \"https://accounts.google.com\")",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "auth.admin.oidc.issuer-url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "access_policy_claim",
                  "required": false,
                  "desc": "claim in the JWT token containing the access policy",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "auth.admin.oidc.access-policy-claim",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "access_policy_regex",
                  "required": false,
                  "desc": "regex to extract the access policy from the JWT token. The first submatch of the provided regex expression will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "auth.admin.oidc.access-policy-regex",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "audience",
                  "required": false,
                  "desc": "optional audience to check in JWT token",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "auth.admin.oidc.audience",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "default_access_policy",
                  "required": false,
                  "desc": "name of the access policy to use when the token doesn't contain an access policy",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "auth.admin.oidc.default-access-policy",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "adfs_compatibility",
                  "required": false,
                  "desc": "enable ADFS compatibility",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "auth.admin.oidc.adfs-compatibility",
                  "fieldType": "boolean"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "bootstrap",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "policy_name",
          "required": false,
          "desc": "Name of built in access policy.",
          "fieldValue": null,
          "fieldDefaultValue": "admin-policy",
          "fieldFlag": "bootstrap.policy-name",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "token_file",
          "required": false,
          "desc": "Write token to this instead of the standard out.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "bootstrap.token-file",
          "fieldType": "string"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "field",
      "name": "cluster_name",
      "required": false,
      "desc": "Unique ID of this cortex cluster. If undefined the name in the license is used.",
      "fieldValue": null,
      "fieldDefaultValue": "",
      "fieldFlag": "cluster-name",
      "fieldType": "string"
    },
    {
      "kind": "block",
      "name": "federation",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "proxy_targets",
          "required": false,
          "desc": "",
          "fieldValue": null,
          "fieldDefaultValue": null,
          "fieldType": "slice",
          "fieldElement": {
            "kind": "block",
            "name": "proxy_targets",
            "required": false,
            "desc": "",
            "blockEntries": [
              {
                "kind": "field",
                "name": "name",
                "required": false,
                "desc": "Name contains the name of the proxy target, it will be used for the __cluster__ label.",
                "fieldValue": null,
                "fieldDefaultValue": "",
                "fieldType": "string"
              },
              {
                "kind": "field",
                "name": "url",
                "required": false,
                "desc": "URL is the URL to the Prometheus API endpoints.",
                "fieldValue": null,
                "fieldDefaultValue": "",
                "fieldType": "string"
              },
              {
                "kind": "block",
                "name": "basic_auth",
                "required": false,
                "desc": "",
                "blockEntries": [
                  {
                    "kind": "field",
                    "name": "username",
                    "required": false,
                    "desc": "Basic Auth username",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string"
                  },
                  {
                    "kind": "field",
                    "name": "password",
                    "required": false,
                    "desc": "Basic Auth password",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string"
                  }
                ],
                "fieldValue": null,
                "fieldDefaultValue": null
              },
              {
                "kind": "block",
                "name": "tls",
                "required": false,
                "desc": "",
                "blockEntries": [
                  {
                    "kind": "field",
                    "name": "tls_cert_path",
                    "required": false,
                    "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string"
                  },
                  {
                    "kind": "field",
                    "name": "tls_key_path",
                    "required": false,
                    "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string"
                  },
                  {
                    "kind": "field",
                    "name": "tls_ca_path",
                    "required": false,
                    "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string"
                  },
                  {
                    "kind": "field",
                    "name": "tls_server_name",
                    "required": false,
                    "desc": "Override the expected name on the server certificate.",
                    "fieldValue": null,
                    "fieldDefaultValue": "",
                    "fieldType": "string"
                  },
                  {
                    "kind": "field",
                    "name": "tls_insecure_skip_verify",
                    "required": false,
                    "desc": "Skip validating server certificate.",
                    "fieldValue": null,
                    "fieldDefaultValue": false,
                    "fieldType": "boolean"
                  }
                ],
                "fieldValue": null,
                "fieldDefaultValue": null
              }
            ],
            "fieldValue": null,
            "fieldDefaultValue": null
          }
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "gateway",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "block",
          "name": "proxy",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "default",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.default.url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.default.enable-keepalive",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.default.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.default.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.default.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.default.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.default.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.default.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "admin_api",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.admin-api.url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.admin-api.enable-keepalive",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.admin-api.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.admin-api.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.admin-api.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.admin-api.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.admin-api.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.admin-api.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.admin-api.write-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.admin-api.read-timeout",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "alertmanager",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.alertmanager.url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.alertmanager.enable-keepalive",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.alertmanager.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.alertmanager.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.alertmanager.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.alertmanager.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.alertmanager.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.alertmanager.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.alertmanager.write-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.alertmanager.read-timeout",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "compactor",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.compactor.url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.compactor.enable-keepalive",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.compactor.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.compactor.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.compactor.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.compactor.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.compactor.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.compactor.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.compactor.write-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.compactor.read-timeout",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "distributor",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.distributor.url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.distributor.enable-keepalive",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.distributor.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.distributor.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.distributor.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.distributor.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.distributor.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.distributor.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.distributor.write-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.distributor.read-timeout",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "graphite",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite.url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.graphite.enable-keepalive",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.graphite.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.graphite.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.graphite.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.graphite.write-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.graphite.read-timeout",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "ingester",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ingester.url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.ingester.enable-keepalive",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.ingester.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ingester.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ingester.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ingester.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ingester.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.ingester.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.ingester.write-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.ingester.read-timeout",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "query_frontend",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.query-frontend.url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.query-frontend.enable-keepalive",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.query-frontend.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.query-frontend.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.query-frontend.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.query-frontend.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.query-frontend.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.query-frontend.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.query-frontend.write-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.query-frontend.read-timeout",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "ruler",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ruler.url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.ruler.enable-keepalive",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.ruler.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ruler.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ruler.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ruler.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.ruler.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.ruler.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.ruler.write-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.ruler.read-timeout",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "store_gateway",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "url",
                  "required": false,
                  "desc": "URL for the backend. Use the scheme dns:// for HTTP over GPRC and the scheme h2c:// for HTTP2 proxying.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.store-gateway.url",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "enable_keepalive",
                  "required": false,
                  "desc": "Enable keep alive for the backend.",
                  "fieldValue": null,
                  "fieldDefaultValue": true,
                  "fieldFlag": "gateway.proxy.store-gateway.enable-keepalive",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Enable TLS in the GRPC client. This flag needs to be enabled when any other TLS flag is set. If set to false, insecure connection to gRPC server will be used.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.store-gateway.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.store-gateway.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.store-gateway.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.store-gateway.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "gateway.proxy.store-gateway.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "gateway.proxy.store-gateway.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "write_timeout",
                  "required": false,
                  "desc": "Timeout for write requests to the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "gateway.proxy.store-gateway.write-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "read_timeout",
                  "required": false,
                  "desc": "Timeout for read requests the backend, set to \u003c=0 to disable.",
                  "fieldValue": null,
                  "fieldDefaultValue": 120000000000,
                  "fieldFlag": "gateway.proxy.store-gateway.read-timeout",
                  "fieldType": "duration"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "graphite",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "enabled",
          "required": false,
          "desc": "Whether the Graphite APIs are enabled (Experimental).",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "graphite.enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "block",
          "name": "querier",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "schemas",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "schema_ttl",
                  "required": false,
                  "desc": "Defines for how long schemas shall be cached.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10000000000,
                  "fieldFlag": "graphite.querier.schemas.schema-ttl",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "default_storage_schemas_file",
                  "required": false,
                  "desc": "Path to default storage-schemas.conf file.",
                  "fieldValue": null,
                  "fieldDefaultValue": "/etc/cortextank/storage-schemas.conf",
                  "fieldFlag": "graphite.querier.schemas.default-storage-schemas-file",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "default_storage_aggregations_file",
                  "required": false,
                  "desc": "Path to default storage-aggregation.conf file.",
                  "fieldValue": null,
                  "fieldDefaultValue": "/etc/cortextank/storage-aggregation.conf",
                  "fieldFlag": "graphite.querier.schemas.default-storage-aggregations-file",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "enable_user_overrides",
                  "required": false,
                  "desc": "Whether support for object store backed user overrides should be enabled.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "graphite.querier.schemas.enable-user-overrides",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "backend",
                  "required": false,
                  "desc": "Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem.",
                  "fieldValue": null,
                  "fieldDefaultValue": "s3",
                  "fieldFlag": "graphite.querier.schemas.backend",
                  "fieldType": "string"
                },
                {
                  "kind": "block",
                  "name": "s3",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoint",
                      "required": false,
                      "desc": "The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.s3.endpoint",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "region",
                      "required": false,
                      "desc": "S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.s3.region",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "bucket_name",
                      "required": false,
                      "desc": "S3 bucket name",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.s3.bucket-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "secret_access_key",
                      "required": false,
                      "desc": "S3 secret access key",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.s3.secret-access-key",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "access_key_id",
                      "required": false,
                      "desc": "S3 access key ID",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.s3.access-key-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "insecure",
                      "required": false,
                      "desc": "If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "graphite.querier.schemas.s3.insecure",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "signature_version",
                      "required": false,
                      "desc": "The signature version to use for authenticating against S3. Supported values are: v4, v2.",
                      "fieldValue": null,
                      "fieldDefaultValue": "v4",
                      "fieldFlag": "graphite.querier.schemas.s3.signature-version",
                      "fieldType": "string"
                    },
                    {
                      "kind": "block",
                      "name": "sse",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "type",
                          "required": false,
                          "desc": "Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "graphite.querier.schemas.s3.sse.type",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "kms_key_id",
                          "required": false,
                          "desc": "KMS Key ID used to encrypt objects in S3",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "graphite.querier.schemas.s3.sse.kms-key-id",
                          "fieldType": "string"
                        },
                        {
                          "kind": "field",
                          "name": "kms_encryption_context",
                          "required": false,
                          "desc": "KMS Encryption Context used for object encryption. It expects JSON formatted string.",
                          "fieldValue": null,
                          "fieldDefaultValue": "",
                          "fieldFlag": "graphite.querier.schemas.s3.sse.kms-encryption-context",
                          "fieldType": "string"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    },
                    {
                      "kind": "block",
                      "name": "http",
                      "required": false,
                      "desc": "",
                      "blockEntries": [
                        {
                          "kind": "field",
                          "name": "idle_conn_timeout",
                          "required": false,
                          "desc": "The time an idle connection will remain idle before closing.",
                          "fieldValue": null,
                          "fieldDefaultValue": 90000000000,
                          "fieldFlag": "graphite.querier.schemas.s3.http.idle-conn-timeout",
                          "fieldType": "duration"
                        },
                        {
                          "kind": "field",
                          "name": "response_header_timeout",
                          "required": false,
                          "desc": "The amount of time the client will wait for a servers response headers.",
                          "fieldValue": null,
                          "fieldDefaultValue": 120000000000,
                          "fieldFlag": "graphite.querier.schemas.s3.http.response-header-timeout",
                          "fieldType": "duration"
                        },
                        {
                          "kind": "field",
                          "name": "insecure_skip_verify",
                          "required": false,
                          "desc": "If the client connects to S3 via HTTPS and this option is enabled, the client will accept any certificate and hostname.",
                          "fieldValue": null,
                          "fieldDefaultValue": false,
                          "fieldFlag": "graphite.querier.schemas.s3.http.insecure-skip-verify",
                          "fieldType": "boolean"
                        },
                        {
                          "kind": "field",
                          "name": "tls_handshake_timeout",
                          "required": false,
                          "desc": "Maximum time to wait for a TLS handshake. 0 means no limit.",
                          "fieldValue": null,
                          "fieldDefaultValue": 10000000000,
                          "fieldFlag": "graphite.querier.schemas.s3.tls-handshake-timeout",
                          "fieldType": "duration"
                        },
                        {
                          "kind": "field",
                          "name": "expect_continue_timeout",
                          "required": false,
                          "desc": "The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.",
                          "fieldValue": null,
                          "fieldDefaultValue": 1000000000,
                          "fieldFlag": "graphite.querier.schemas.s3.expect-continue-timeout",
                          "fieldType": "duration"
                        },
                        {
                          "kind": "field",
                          "name": "max_idle_connections",
                          "required": false,
                          "desc": "Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.",
                          "fieldValue": null,
                          "fieldDefaultValue": 100,
                          "fieldFlag": "graphite.querier.schemas.s3.max-idle-connections",
                          "fieldType": "int"
                        },
                        {
                          "kind": "field",
                          "name": "max_idle_connections_per_host",
                          "required": false,
                          "desc": "Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.",
                          "fieldValue": null,
                          "fieldDefaultValue": 100,
                          "fieldFlag": "graphite.querier.schemas.s3.max-idle-connections-per-host",
                          "fieldType": "int"
                        },
                        {
                          "kind": "field",
                          "name": "max_connections_per_host",
                          "required": false,
                          "desc": "Maximum number of connections per host. 0 means no limit.",
                          "fieldValue": null,
                          "fieldDefaultValue": 0,
                          "fieldFlag": "graphite.querier.schemas.s3.max-connections-per-host",
                          "fieldType": "int"
                        }
                      ],
                      "fieldValue": null,
                      "fieldDefaultValue": null
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "gcs",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "bucket_name",
                      "required": false,
                      "desc": "GCS bucket name",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.gcs.bucket-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "service_account",
                      "required": false,
                      "desc": "JSON representing either a Google Developers Console client_credentials.json file or a Google Developers service account key file. If empty, fallback to Google default logic.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.gcs.service-account",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "azure",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "account_name",
                      "required": false,
                      "desc": "Azure storage account name",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.azure.account-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "account_key",
                      "required": false,
                      "desc": "Azure storage account key",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.azure.account-key",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "container_name",
                      "required": false,
                      "desc": "Azure storage container name",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.azure.container-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "endpoint_suffix",
                      "required": false,
                      "desc": "Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.azure.endpoint-suffix",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "Number of retries for recoverable errors",
                      "fieldValue": null,
                      "fieldDefaultValue": 20,
                      "fieldFlag": "graphite.querier.schemas.azure.max-retries",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "swift",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "auth_version",
                      "required": false,
                      "desc": "OpenStack Swift authentication API version. 0 to autodetect.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.schemas.swift.auth-version",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "auth_url",
                      "required": false,
                      "desc": "OpenStack Swift authentication URL",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.auth-url",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "username",
                      "required": false,
                      "desc": "OpenStack Swift username.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.username",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "user_domain_name",
                      "required": false,
                      "desc": "OpenStack Swift user's domain name.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.user-domain-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "user_domain_id",
                      "required": false,
                      "desc": "OpenStack Swift user's domain ID.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.user-domain-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "user_id",
                      "required": false,
                      "desc": "OpenStack Swift user ID.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.user-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "OpenStack Swift API key.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.password",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "domain_id",
                      "required": false,
                      "desc": "OpenStack Swift user's domain ID.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.domain-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "domain_name",
                      "required": false,
                      "desc": "OpenStack Swift user's domain name.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.domain-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "project_id",
                      "required": false,
                      "desc": "OpenStack Swift project ID (v2,v3 auth only).",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.project-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "project_name",
                      "required": false,
                      "desc": "OpenStack Swift project name (v2,v3 auth only).",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.project-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "project_domain_id",
                      "required": false,
                      "desc": "ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.project-domain-id",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "project_domain_name",
                      "required": false,
                      "desc": "Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.project-domain-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "region_name",
                      "required": false,
                      "desc": "OpenStack Swift Region to use (v2,v3 auth only).",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.region-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "container_name",
                      "required": false,
                      "desc": "Name of the OpenStack Swift container to put chunks in.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.swift.container-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "max_retries",
                      "required": false,
                      "desc": "Max retries on requests error.",
                      "fieldValue": null,
                      "fieldDefaultValue": 3,
                      "fieldFlag": "graphite.querier.schemas.swift.max-retries",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "connect_timeout",
                      "required": false,
                      "desc": "Time after which a connection attempt is aborted.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "graphite.querier.schemas.swift.connect-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "request_timeout",
                      "required": false,
                      "desc": "Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.",
                      "fieldValue": null,
                      "fieldDefaultValue": 5000000000,
                      "fieldFlag": "graphite.querier.schemas.swift.request-timeout",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "filesystem",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "dir",
                      "required": false,
                      "desc": "Local filesystem storage directory.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.schemas.filesystem.dir",
                      "fieldType": "string"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "cache_grace_period",
              "required": false,
              "desc": "Period to wait before expiring a cached item.",
              "fieldValue": null,
              "fieldDefaultValue": 300000000000,
              "fieldFlag": "graphite.querier.cache-grace-period",
              "fieldType": "duration"
            },
            {
              "kind": "block",
              "name": "metric_name_cache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enable_fifocache",
                  "required": false,
                  "desc": "Cache config for metric names. Enable in-memory cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "graphite.querier.metric-name-cache.cache.enable-fifocache",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "default_validity",
                  "required": false,
                  "desc": "Cache config for metric names. The default validity of entries for caches unless overridden.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "graphite.querier.metric-name-cache.default-validity",
                  "fieldType": "duration"
                },
                {
                  "kind": "block",
                  "name": "background",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "writeback_goroutines",
                      "required": false,
                      "desc": "Cache config for metric names. At what concurrency to write back to cache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "graphite.querier.metric-name-cache.background.write-back-concurrency",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "writeback_buffer",
                      "required": false,
                      "desc": "Cache config for metric names. How many key batches to buffer for background write-back.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000,
                      "fieldFlag": "graphite.querier.metric-name-cache.background.write-back-buffer",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "memcached",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "expiration",
                      "required": false,
                      "desc": "Cache config for metric names. How long keys stay in the memcache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.expiration",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "batch_size",
                      "required": false,
                      "desc": "Cache config for metric names. How many keys to fetch in each batch.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1024,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.batchsize",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "parallelism",
                      "required": false,
                      "desc": "Cache config for metric names. Maximum active requests to memcache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.parallelism",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "memcached_client",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Cache config for metric names. Hostname for memcached service to use. If empty and if addresses is unset, no memcached will be used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "service",
                      "required": false,
                      "desc": "Cache config for metric names. SRV service used to discover memcache servers.",
                      "fieldValue": null,
                      "fieldDefaultValue": "memcached",
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.service",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "addresses",
                      "required": false,
                      "desc": "Cache config for metric names. EXPERIMENTAL: Comma separated addresses list in DNS Service Discovery format: https://cortexmetrics.io/docs/configuration/arguments/#dns-service-discovery",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.addresses",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "Cache config for metric names. Maximum time to wait before giving up on memcached requests.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_conns",
                      "required": false,
                      "desc": "Cache config for metric names. Maximum number of idle connections in pool.",
                      "fieldValue": null,
                      "fieldDefaultValue": 16,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.max-idle-conns",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_item_size",
                      "required": false,
                      "desc": "Cache config for metric names. The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.max-item-size",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "update_interval",
                      "required": false,
                      "desc": "Cache config for metric names. Period with which to poll DNS for memcache servers.",
                      "fieldValue": null,
                      "fieldDefaultValue": 60000000000,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.update-interval",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_hash",
                      "required": false,
                      "desc": "Cache config for metric names. Use consistent hashing to distribute to memcache servers.",
                      "fieldValue": null,
                      "fieldDefaultValue": true,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.consistent-hash",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "circuit_breaker_consecutive_failures",
                      "required": false,
                      "desc": "Cache config for metric names. Trip circuit-breaker after this number of consecutive dial failures (if zero then circuit-breaker is disabled).",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.circuit-breaker-consecutive-failures",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "circuit_breaker_timeout",
                      "required": false,
                      "desc": "Cache config for metric names. Duration circuit-breaker remains open after tripping (if zero then 60 seconds is used).",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.circuit-breaker-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "circuit_breaker_interval",
                      "required": false,
                      "desc": "Cache config for metric names. Reset circuit-breaker counts after this long (if zero then never reset).",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "graphite.querier.metric-name-cache.memcached.circuit-breaker-interval",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "redis",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoint",
                      "required": false,
                      "desc": "Cache config for metric names. Redis Server endpoint to use for caching. A comma-separated list of endpoints for Redis Cluster or Redis Sentinel. If empty, no redis will be used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.metric-name-cache.redis.endpoint",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "master_name",
                      "required": false,
                      "desc": "Cache config for metric names. Redis Sentinel master name. An empty string for Redis Server or Redis Cluster.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.metric-name-cache.redis.master-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "Cache config for metric names. Maximum time to wait before giving up on redis requests.",
                      "fieldValue": null,
                      "fieldDefaultValue": 500000000,
                      "fieldFlag": "graphite.querier.metric-name-cache.redis.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "expiration",
                      "required": false,
                      "desc": "Cache config for metric names. How long keys stay in the redis.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.metric-name-cache.redis.expiration",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "db",
                      "required": false,
                      "desc": "Cache config for metric names. Database index.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.metric-name-cache.redis.db",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "pool_size",
                      "required": false,
                      "desc": "Cache config for metric names. Maximum number of connections in the pool.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.metric-name-cache.redis.pool-size",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Cache config for metric names. Password to use when connecting to redis.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.metric-name-cache.redis.password",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Cache config for metric names. Enable connecting to redis with TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "graphite.querier.metric-name-cache.redis.tls-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Cache config for metric names. Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "graphite.querier.metric-name-cache.redis.tls-insecure-skip-verify",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "idle_timeout",
                      "required": false,
                      "desc": "Cache config for metric names. Close connections after remaining idle for this duration. If the value is zero, then idle connections are not closed.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.metric-name-cache.redis.idle-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_connection_age",
                      "required": false,
                      "desc": "Cache config for metric names. Close connections older than this duration. If the value is zero, then the pool does not close connections based on age.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.metric-name-cache.redis.max-connection-age",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "fifocache",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "max_size_bytes",
                      "required": false,
                      "desc": "Cache config for metric names. Maximum memory size of the cache in bytes. A unit suffix (KB, MB, GB) may be applied.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.metric-name-cache.fifocache.max-size-bytes",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "max_size_items",
                      "required": false,
                      "desc": "Cache config for metric names. Maximum number of entries in the cache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.metric-name-cache.fifocache.max-size-items",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "validity",
                      "required": false,
                      "desc": "Cache config for metric names. The expiry duration for the cache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.metric-name-cache.fifocache.duration",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "size",
                      "required": false,
                      "desc": "Deprecated (use max-size-items or max-size-bytes instead): Cache config for metric names. The number of entries to cache. ",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.metric-name-cache.fifocache.size",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "block",
              "name": "aggregation_cache",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "enable_fifocache",
                  "required": false,
                  "desc": "Cache config for aggregations. Enable in-memory cache.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "graphite.querier.aggregation-cache.cache.enable-fifocache",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "default_validity",
                  "required": false,
                  "desc": "Cache config for aggregations. The default validity of entries for caches unless overridden.",
                  "fieldValue": null,
                  "fieldDefaultValue": 0,
                  "fieldFlag": "graphite.querier.aggregation-cache.default-validity",
                  "fieldType": "duration"
                },
                {
                  "kind": "block",
                  "name": "background",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "writeback_goroutines",
                      "required": false,
                      "desc": "Cache config for aggregations. At what concurrency to write back to cache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "graphite.querier.aggregation-cache.background.write-back-concurrency",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "writeback_buffer",
                      "required": false,
                      "desc": "Cache config for aggregations. How many key batches to buffer for background write-back.",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000,
                      "fieldFlag": "graphite.querier.aggregation-cache.background.write-back-buffer",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "memcached",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "expiration",
                      "required": false,
                      "desc": "Cache config for aggregations. How long keys stay in the memcache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.expiration",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "batch_size",
                      "required": false,
                      "desc": "Cache config for aggregations. How many keys to fetch in each batch.",
                      "fieldValue": null,
                      "fieldDefaultValue": 1024,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.batchsize",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "parallelism",
                      "required": false,
                      "desc": "Cache config for aggregations. Maximum active requests to memcache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.parallelism",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "memcached_client",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "host",
                      "required": false,
                      "desc": "Cache config for aggregations. Hostname for memcached service to use. If empty and if addresses is unset, no memcached will be used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.hostname",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "service",
                      "required": false,
                      "desc": "Cache config for aggregations. SRV service used to discover memcache servers.",
                      "fieldValue": null,
                      "fieldDefaultValue": "memcached",
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.service",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "addresses",
                      "required": false,
                      "desc": "Cache config for aggregations. EXPERIMENTAL: Comma separated addresses list in DNS Service Discovery format: https://cortexmetrics.io/docs/configuration/arguments/#dns-service-discovery",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.addresses",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "Cache config for aggregations. Maximum time to wait before giving up on memcached requests.",
                      "fieldValue": null,
                      "fieldDefaultValue": 100000000,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_idle_conns",
                      "required": false,
                      "desc": "Cache config for aggregations. Maximum number of idle connections in pool.",
                      "fieldValue": null,
                      "fieldDefaultValue": 16,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.max-idle-conns",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "max_item_size",
                      "required": false,
                      "desc": "Cache config for aggregations. The maximum size of an item stored in memcached. Bigger items are not stored. If set to 0, no maximum size is enforced.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.max-item-size",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "update_interval",
                      "required": false,
                      "desc": "Cache config for aggregations. Period with which to poll DNS for memcache servers.",
                      "fieldValue": null,
                      "fieldDefaultValue": 60000000000,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.update-interval",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "consistent_hash",
                      "required": false,
                      "desc": "Cache config for aggregations. Use consistent hashing to distribute to memcache servers.",
                      "fieldValue": null,
                      "fieldDefaultValue": true,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.consistent-hash",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "circuit_breaker_consecutive_failures",
                      "required": false,
                      "desc": "Cache config for aggregations. Trip circuit-breaker after this number of consecutive dial failures (if zero then circuit-breaker is disabled).",
                      "fieldValue": null,
                      "fieldDefaultValue": 10,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.circuit-breaker-consecutive-failures",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "circuit_breaker_timeout",
                      "required": false,
                      "desc": "Cache config for aggregations. Duration circuit-breaker remains open after tripping (if zero then 60 seconds is used).",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.circuit-breaker-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "circuit_breaker_interval",
                      "required": false,
                      "desc": "Cache config for aggregations. Reset circuit-breaker counts after this long (if zero then never reset).",
                      "fieldValue": null,
                      "fieldDefaultValue": 10000000000,
                      "fieldFlag": "graphite.querier.aggregation-cache.memcached.circuit-breaker-interval",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "redis",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "endpoint",
                      "required": false,
                      "desc": "Cache config for aggregations. Redis Server endpoint to use for caching. A comma-separated list of endpoints for Redis Cluster or Redis Sentinel. If empty, no redis will be used.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.aggregation-cache.redis.endpoint",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "master_name",
                      "required": false,
                      "desc": "Cache config for aggregations. Redis Sentinel master name. An empty string for Redis Server or Redis Cluster.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.aggregation-cache.redis.master-name",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "timeout",
                      "required": false,
                      "desc": "Cache config for aggregations. Maximum time to wait before giving up on redis requests.",
                      "fieldValue": null,
                      "fieldDefaultValue": 500000000,
                      "fieldFlag": "graphite.querier.aggregation-cache.redis.timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "expiration",
                      "required": false,
                      "desc": "Cache config for aggregations. How long keys stay in the redis.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.aggregation-cache.redis.expiration",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "db",
                      "required": false,
                      "desc": "Cache config for aggregations. Database index.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.aggregation-cache.redis.db",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "pool_size",
                      "required": false,
                      "desc": "Cache config for aggregations. Maximum number of connections in the pool.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.aggregation-cache.redis.pool-size",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "password",
                      "required": false,
                      "desc": "Cache config for aggregations. Password to use when connecting to redis.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.aggregation-cache.redis.password",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "tls_enabled",
                      "required": false,
                      "desc": "Cache config for aggregations. Enable connecting to redis with TLS.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "graphite.querier.aggregation-cache.redis.tls-enabled",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "tls_insecure_skip_verify",
                      "required": false,
                      "desc": "Cache config for aggregations. Skip validating server certificate.",
                      "fieldValue": null,
                      "fieldDefaultValue": false,
                      "fieldFlag": "graphite.querier.aggregation-cache.redis.tls-insecure-skip-verify",
                      "fieldType": "boolean"
                    },
                    {
                      "kind": "field",
                      "name": "idle_timeout",
                      "required": false,
                      "desc": "Cache config for aggregations. Close connections after remaining idle for this duration. If the value is zero, then idle connections are not closed.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.aggregation-cache.redis.idle-timeout",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "max_connection_age",
                      "required": false,
                      "desc": "Cache config for aggregations. Close connections older than this duration. If the value is zero, then the pool does not close connections based on age.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.aggregation-cache.redis.max-connection-age",
                      "fieldType": "duration"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "block",
                  "name": "fifocache",
                  "required": false,
                  "desc": "",
                  "blockEntries": [
                    {
                      "kind": "field",
                      "name": "max_size_bytes",
                      "required": false,
                      "desc": "Cache config for aggregations. Maximum memory size of the cache in bytes. A unit suffix (KB, MB, GB) may be applied.",
                      "fieldValue": null,
                      "fieldDefaultValue": "",
                      "fieldFlag": "graphite.querier.aggregation-cache.fifocache.max-size-bytes",
                      "fieldType": "string"
                    },
                    {
                      "kind": "field",
                      "name": "max_size_items",
                      "required": false,
                      "desc": "Cache config for aggregations. Maximum number of entries in the cache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.aggregation-cache.fifocache.max-size-items",
                      "fieldType": "int"
                    },
                    {
                      "kind": "field",
                      "name": "validity",
                      "required": false,
                      "desc": "Cache config for aggregations. The expiry duration for the cache.",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.aggregation-cache.fifocache.duration",
                      "fieldType": "duration"
                    },
                    {
                      "kind": "field",
                      "name": "size",
                      "required": false,
                      "desc": "Deprecated (use max-size-items or max-size-bytes instead): Cache config for aggregations. The number of entries to cache. ",
                      "fieldValue": null,
                      "fieldDefaultValue": 0,
                      "fieldFlag": "graphite.querier.aggregation-cache.fifocache.size",
                      "fieldType": "int"
                    }
                  ],
                  "fieldValue": null,
                  "fieldDefaultValue": null
                },
                {
                  "kind": "field",
                  "name": "prefix",
                  "required": false,
                  "desc": "",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            },
            {
              "kind": "field",
              "name": "query_handling_concurrency",
              "required": false,
              "desc": "Number of go routines to concurrently fetch and process data.",
              "fieldValue": null,
              "fieldDefaultValue": 8,
              "fieldFlag": "graphite.querier.query-handling-concurrency",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "split_queries_by_interval",
              "required": false,
              "desc": "Split queries by this interval and execute in parallel, 0 disables query splitting.",
              "fieldValue": null,
              "fieldDefaultValue": 86400000000000,
              "fieldFlag": "graphite.querier.split-queries-by-interval",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "proxy_bad_requests",
              "required": false,
              "desc": "Proxy bad requests to graphite",
              "fieldValue": null,
              "fieldDefaultValue": true,
              "fieldFlag": "graphite.querier.proxy-bad-requests",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "graphite_fallback",
              "required": false,
              "desc": "Graphite http listener fallback address",
              "fieldValue": null,
              "fieldDefaultValue": "http://graphite:80",
              "fieldFlag": "graphite.querier.graphite-fallback",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "metrics_find_cutoff",
              "required": false,
              "desc": "How far into the past we perform index lookups for find calls",
              "fieldValue": null,
              "fieldDefaultValue": "32d",
              "fieldFlag": "graphite.querier.metrics-find-cutoff",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "max_points_per_req_soft",
              "required": false,
              "desc": "Max number of data points a query may return, if number of data points exceeds this limit we aggregate them down to the limit.",
              "fieldValue": null,
              "fieldDefaultValue": 1000000,
              "fieldFlag": "graphite.querier.max-points-per-req-soft",
              "fieldType": "int"
            },
            {
              "kind": "field",
              "name": "max_points_per_req_hard",
              "required": false,
              "desc": "If query results in more data points than this limit we directly cancel it with an error message.",
              "fieldValue": null,
              "fieldDefaultValue": 20000000,
              "fieldFlag": "graphite.querier.max-points-per-req-hard",
              "fieldType": "int"
            },
            {
              "kind": "block",
              "name": "remote_read",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "query_address",
                  "required": false,
                  "desc": "Base URL for queries from upstream Prometheus API. The /api/v1 suffix will be appended to this address. Defaults to http://localhost:80/prometheus.",
                  "fieldValue": null,
                  "fieldDefaultValue": "http://localhost:80/prometheus",
                  "fieldFlag": "graphite.querier.query-address",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "query_timeout",
                  "required": false,
                  "desc": "Timeout for queries to upstream Prometheus API.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "graphite.querier.query-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "query_keep_alive",
                  "required": false,
                  "desc": "KeepAlive for queries to upstream Prometheus API.",
                  "fieldValue": null,
                  "fieldDefaultValue": 30000000000,
                  "fieldFlag": "graphite.querier.query-keep-alive",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "query_max_idle_conns",
                  "required": false,
                  "desc": "Max idle conns for queries to upstream Prometheus API.",
                  "fieldValue": null,
                  "fieldDefaultValue": 10,
                  "fieldFlag": "graphite.querier.query-max-idle-conns",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "query_max_conns",
                  "required": false,
                  "desc": "Max conns per host for queries to upstream Prometheus API.",
                  "fieldValue": null,
                  "fieldDefaultValue": 100,
                  "fieldFlag": "graphite.querier.query-max-conns",
                  "fieldType": "int"
                },
                {
                  "kind": "field",
                  "name": "query_client_name",
                  "required": false,
                  "desc": "Client name to use when identifying requests in Prometheus API.",
                  "fieldValue": null,
                  "fieldDefaultValue": "graphite-querier",
                  "fieldFlag": "graphite.querier.query-client-name",
                  "fieldType": "string"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "field",
          "name": "querier_remote_read_enabled",
          "required": false,
          "desc": "Enable usage of the querier on the read path of graphite, instead of accessing directly the ingesters and the block store.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "graphite.querier.remote-read-enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "block",
          "name": "write_proxy",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "block",
              "name": "distributor_client",
              "required": false,
              "desc": "",
              "blockEntries": [
                {
                  "kind": "field",
                  "name": "address",
                  "required": false,
                  "desc": "GRPC listen address of cortex distributor(s). Must be a DNS address (prefixed with dns:///) to enable client side load balancing.",
                  "fieldValue": null,
                  "fieldDefaultValue": "dns:///:9095",
                  "fieldFlag": "graphite.write-proxy.distributor-client.address",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "connect_timeout",
                  "required": false,
                  "desc": "GRPC connection timeout for cortex distributor(s)",
                  "fieldValue": null,
                  "fieldDefaultValue": 5000000000,
                  "fieldFlag": "graphite.write-proxy.distributor-client.connect-timeout",
                  "fieldType": "duration"
                },
                {
                  "kind": "field",
                  "name": "tls_enabled",
                  "required": false,
                  "desc": "Set to true if distributor connection requires TLS.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-enabled",
                  "fieldType": "boolean"
                },
                {
                  "kind": "field",
                  "name": "tls_cert_path",
                  "required": false,
                  "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-cert-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_key_path",
                  "required": false,
                  "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-key-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_ca_path",
                  "required": false,
                  "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-ca-path",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_server_name",
                  "required": false,
                  "desc": "Override the expected name on the server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": "",
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-server-name",
                  "fieldType": "string"
                },
                {
                  "kind": "field",
                  "name": "tls_insecure_skip_verify",
                  "required": false,
                  "desc": "Skip validating server certificate.",
                  "fieldValue": null,
                  "fieldDefaultValue": false,
                  "fieldFlag": "graphite.write-proxy.distributor-client.tls-insecure-skip-verify",
                  "fieldType": "boolean"
                }
              ],
              "fieldValue": null,
              "fieldDefaultValue": null
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "instrumentation",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "enabled",
          "required": false,
          "desc": "Enable self-monitoring metrics recorded under the system tenant.",
          "fieldValue": null,
          "fieldDefaultValue": false,
          "fieldFlag": "instrumentation.enabled",
          "fieldType": "boolean"
        },
        {
          "kind": "field",
          "name": "flush_period",
          "required": false,
          "desc": "How often to flush self-monitoring metrics to distributor",
          "fieldValue": null,
          "fieldDefaultValue": 15000000000,
          "fieldFlag": "instrumentation.flush-period",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "write_timeout",
          "required": false,
          "desc": "Timeout writing self-monitoring metrics to distributor",
          "fieldValue": null,
          "fieldDefaultValue": 10000000000,
          "fieldFlag": "instrumentation.write-timeout",
          "fieldType": "duration"
        },
        {
          "kind": "block",
          "name": "distributor_client",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "address",
              "required": false,
              "desc": "GRPC listen address of cortex distributor(s). Must be a DNS address (prefixed with dns:///) to enable client side load balancing.",
              "fieldValue": null,
              "fieldDefaultValue": "dns:///:9095",
              "fieldFlag": "instrumentation.distributor-client.address",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "connect_timeout",
              "required": false,
              "desc": "GRPC connection timeout for cortex distributor(s)",
              "fieldValue": null,
              "fieldDefaultValue": 5000000000,
              "fieldFlag": "instrumentation.distributor-client.connect-timeout",
              "fieldType": "duration"
            },
            {
              "kind": "field",
              "name": "tls_enabled",
              "required": false,
              "desc": "Set to true if distributor connection requires TLS.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "instrumentation.distributor-client.tls-enabled",
              "fieldType": "boolean"
            },
            {
              "kind": "field",
              "name": "tls_cert_path",
              "required": false,
              "desc": "Path to the client certificate file, which will be used for authenticating with the server. Also requires the key path to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "instrumentation.distributor-client.tls-cert-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_key_path",
              "required": false,
              "desc": "Path to the key file for the client certificate. Also requires the client certificate to be configured.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "instrumentation.distributor-client.tls-key-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_ca_path",
              "required": false,
              "desc": "Path to the CA certificates file to validate server certificate against. If not set, the host's root CA certificates are used.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "instrumentation.distributor-client.tls-ca-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_server_name",
              "required": false,
              "desc": "Override the expected name on the server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": "",
              "fieldFlag": "instrumentation.distributor-client.tls-server-name",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "tls_insecure_skip_verify",
              "required": false,
              "desc": "Skip validating server certificate.",
              "fieldValue": null,
              "fieldDefaultValue": false,
              "fieldFlag": "instrumentation.distributor-client.tls-insecure-skip-verify",
              "fieldType": "boolean"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        },
        {
          "kind": "block",
          "name": "node_collector",
          "required": false,
          "desc": "",
          "blockEntries": [
            {
              "kind": "field",
              "name": "procfs_path",
              "required": false,
              "desc": "Mount point of the proc filesystem.",
              "fieldValue": null,
              "fieldDefaultValue": "/proc",
              "fieldFlag": "instrumentation.node-collector.procfs-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "rootfs_path",
              "required": false,
              "desc": "Mount point of the root filesystem.",
              "fieldValue": null,
              "fieldDefaultValue": "/",
              "fieldFlag": "instrumentation.node-collector.rootfs-path",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "filesystem_ignored_mount_points",
              "required": false,
              "desc": "Regex pattern of mount points to ignore for the filesystem collector",
              "fieldValue": null,
              "fieldDefaultValue": "^/(dev|proc|sys|var/lib/docker/.+)($|/)",
              "fieldFlag": "instrumentation.node-collector.filesystem-ignored-mount-points",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "filesystem_ignored_fs_types",
              "required": false,
              "desc": "Regex pattern of filesystem types to ignore for the filesystem collector",
              "fieldValue": null,
              "fieldDefaultValue": "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$",
              "fieldFlag": "instrumentation.node-collector.filesystem-ignored-fs-types",
              "fieldType": "string"
            },
            {
              "kind": "field",
              "name": "diskstats_ignored_devices",
              "required": false,
              "desc": "Regex pattern of devices to ignore for the disktstats collector",
              "fieldValue": null,
              "fieldDefaultValue": "^(ram|loop|fd|(h|s|v|xv)d[a-z]|nvme\\d+n\\d+p)\\d+$",
              "fieldFlag": "instrumentation.node-collector.diskstats-ignored-devices",
              "fieldType": "string"
            }
          ],
          "fieldValue": null,
          "fieldDefaultValue": null
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "license",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "type",
          "required": false,
          "desc": "Type of license.",
          "fieldValue": null,
          "fieldDefaultValue": "jwt",
          "fieldFlag": "license.type",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "path",
          "required": false,
          "desc": "Filepath to license jwt file.",
          "fieldValue": null,
          "fieldDefaultValue": "./license.jwt",
          "fieldFlag": "license.path",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "sync_interval",
          "required": false,
          "desc": "Interval to check for new or existing licenses.",
          "fieldValue": null,
          "fieldDefaultValue": 3600000000000,
          "fieldFlag": "license.sync-interval",
          "fieldType": "duration"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "tokengen",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "access_policy",
          "required": false,
          "desc": "The name of the access policy to generate a token for. It defaults to the built-in admin policy.",
          "fieldValue": null,
          "fieldDefaultValue": "__admin__",
          "fieldFlag": "tokengen.access-policy",
          "fieldType": "string"
        },
        {
          "kind": "field",
          "name": "token_file",
          "required": false,
          "desc": "If set, the generated token will be printed to a file at the provided path instead of stdout.",
          "fieldValue": null,
          "fieldDefaultValue": "",
          "fieldFlag": "tokengen.token-file",
          "fieldType": "string"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    },
    {
      "kind": "block",
      "name": "usage_reporting",
      "required": false,
      "desc": "",
      "blockEntries": [
        {
          "kind": "field",
          "name": "collect_interval",
          "required": false,
          "desc": "How often to collect usage to internal buffer",
          "fieldValue": null,
          "fieldDefaultValue": 900000000000,
          "fieldFlag": "usage-reporting.collect-interval",
          "fieldType": "duration"
        },
        {
          "kind": "field",
          "name": "report_interval",
          "required": false,
          "desc": "How often to report usage and store reports",
          "fieldValue": null,
          "fieldDefaultValue": 3600000000000,
          "fieldFlag": "usage-reporting.report-interval",
          "fieldType": "duration"
        }
      ],
      "fieldValue": null,
      "fieldDefaultValue": null
    }
  ],
  "fieldValue": null,
  "fieldDefaultValue": null
}
