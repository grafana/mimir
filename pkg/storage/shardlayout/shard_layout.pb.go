// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shard_layout.proto

package shardlayoutpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IndexHeaderMeta struct {
	BlockID     int64  `protobuf:"varint,1,opt,name=BlockID,proto3" json:"BlockID,omitempty"`
	TenantIDRef uint32 `protobuf:"varint,2,opt,name=TenantIDRef,proto3" json:"TenantIDRef,omitempty"`
	SizeMiB     int64  `protobuf:"varint,3,opt,name=SizeMiB,proto3" json:"SizeMiB,omitempty"`
}

func (m *IndexHeaderMeta) Reset()      { *m = IndexHeaderMeta{} }
func (*IndexHeaderMeta) ProtoMessage() {}
func (*IndexHeaderMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6656a020f14941, []int{0}
}
func (m *IndexHeaderMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexHeaderMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexHeaderMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexHeaderMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexHeaderMeta.Merge(m, src)
}
func (m *IndexHeaderMeta) XXX_Size() int {
	return m.Size()
}
func (m *IndexHeaderMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexHeaderMeta.DiscardUnknown(m)
}

var xxx_messageInfo_IndexHeaderMeta proto.InternalMessageInfo

func (m *IndexHeaderMeta) GetBlockID() int64 {
	if m != nil {
		return m.BlockID
	}
	return 0
}

func (m *IndexHeaderMeta) GetTenantIDRef() uint32 {
	if m != nil {
		return m.TenantIDRef
	}
	return 0
}

func (m *IndexHeaderMeta) GetSizeMiB() int64 {
	if m != nil {
		return m.SizeMiB
	}
	return 0
}

type IndexHeaderPartition struct {
	IndexHeaders []IndexHeaderMeta `protobuf:"bytes,1,rep,name=IndexHeaders,proto3" json:"IndexHeaders"`
	TotalSizeMiB int64             `protobuf:"varint,2,opt,name=TotalSizeMiB,proto3" json:"TotalSizeMiB,omitempty"`
}

func (m *IndexHeaderPartition) Reset()      { *m = IndexHeaderPartition{} }
func (*IndexHeaderPartition) ProtoMessage() {}
func (*IndexHeaderPartition) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6656a020f14941, []int{1}
}
func (m *IndexHeaderPartition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexHeaderPartition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexHeaderPartition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexHeaderPartition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexHeaderPartition.Merge(m, src)
}
func (m *IndexHeaderPartition) XXX_Size() int {
	return m.Size()
}
func (m *IndexHeaderPartition) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexHeaderPartition.DiscardUnknown(m)
}

var xxx_messageInfo_IndexHeaderPartition proto.InternalMessageInfo

func (m *IndexHeaderPartition) GetIndexHeaders() []IndexHeaderMeta {
	if m != nil {
		return m.IndexHeaders
	}
	return nil
}

func (m *IndexHeaderPartition) GetTotalSizeMiB() int64 {
	if m != nil {
		return m.TotalSizeMiB
	}
	return 0
}

type IndexHeaderPartitions struct {
	Partitions      []IndexHeaderPartition `protobuf:"bytes,1,rep,name=Partitions,proto3" json:"Partitions"`
	TenantIDLookups []uint32               `protobuf:"varint,3,rep,packed,name=TenantIDLookups,proto3" json:"TenantIDLookups,omitempty"`
}

func (m *IndexHeaderPartitions) Reset()      { *m = IndexHeaderPartitions{} }
func (*IndexHeaderPartitions) ProtoMessage() {}
func (*IndexHeaderPartitions) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6656a020f14941, []int{2}
}
func (m *IndexHeaderPartitions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexHeaderPartitions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexHeaderPartitions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexHeaderPartitions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexHeaderPartitions.Merge(m, src)
}
func (m *IndexHeaderPartitions) XXX_Size() int {
	return m.Size()
}
func (m *IndexHeaderPartitions) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexHeaderPartitions.DiscardUnknown(m)
}

var xxx_messageInfo_IndexHeaderPartitions proto.InternalMessageInfo

func (m *IndexHeaderPartitions) GetPartitions() []IndexHeaderPartition {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (m *IndexHeaderPartitions) GetTenantIDLookups() []uint32 {
	if m != nil {
		return m.TenantIDLookups
	}
	return nil
}

func init() {
	proto.RegisterType((*IndexHeaderMeta)(nil), "shardlayoutpb.IndexHeaderMeta")
	proto.RegisterType((*IndexHeaderPartition)(nil), "shardlayoutpb.IndexHeaderPartition")
	proto.RegisterType((*IndexHeaderPartitions)(nil), "shardlayoutpb.IndexHeaderPartitions")
}

func init() { proto.RegisterFile("shard_layout.proto", fileDescriptor_5c6656a020f14941) }

var fileDescriptor_5c6656a020f14941 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x31, 0x4b, 0xf3, 0x40,
	0x18, 0xc7, 0xef, 0x9a, 0x97, 0x57, 0xb8, 0xb6, 0x14, 0x0e, 0x85, 0xe0, 0xf0, 0x18, 0xe2, 0x92,
	0xc5, 0x14, 0xf4, 0x1b, 0xc4, 0x0e, 0x0d, 0x58, 0x90, 0xd8, 0xc9, 0x45, 0x2e, 0xed, 0x35, 0x0d,
	0xad, 0xb9, 0x92, 0x5c, 0x40, 0x9d, 0x1c, 0x1c, 0x1d, 0xfc, 0x18, 0x7e, 0x94, 0x8e, 0x1d, 0x3b,
	0x89, 0xbd, 0x2e, 0x8e, 0xfd, 0x08, 0xe2, 0xb5, 0xd5, 0xa4, 0xe8, 0x76, 0xff, 0x1f, 0xcf, 0x9f,
	0xfb, 0xdd, 0x3d, 0x84, 0x66, 0x43, 0x96, 0xf6, 0x6f, 0xc6, 0xec, 0x5e, 0xe4, 0xd2, 0x9d, 0xa4,
	0x42, 0x0a, 0x5a, 0xd7, 0x6c, 0x8d, 0x26, 0xe1, 0xe1, 0x49, 0x14, 0xcb, 0x61, 0x1e, 0xba, 0x3d,
	0x71, 0xdb, 0x8c, 0x44, 0x24, 0x9a, 0x7a, 0x2a, 0xcc, 0x07, 0x3a, 0xe9, 0xa0, 0x4f, 0xeb, 0xb6,
	0x1d, 0x91, 0x86, 0x9f, 0xf4, 0xf9, 0x5d, 0x9b, 0xb3, 0x3e, 0x4f, 0x3b, 0x5c, 0x32, 0x6a, 0x92,
	0x3d, 0x6f, 0x2c, 0x7a, 0x23, 0xbf, 0x65, 0x62, 0x0b, 0x3b, 0x46, 0xb0, 0x8d, 0xd4, 0x22, 0xd5,
	0x2e, 0x4f, 0x58, 0x22, 0xfd, 0x56, 0xc0, 0x07, 0x66, 0xc5, 0xc2, 0x4e, 0x3d, 0x28, 0xa2, 0xaf,
	0xee, 0x55, 0xfc, 0xc0, 0x3b, 0xb1, 0x67, 0x1a, 0xeb, 0xee, 0x26, 0xda, 0x4f, 0x98, 0xec, 0x17,
	0x6e, 0xba, 0x64, 0xa9, 0x8c, 0x65, 0x2c, 0x12, 0xda, 0x26, 0xb5, 0x02, 0xcf, 0x4c, 0x6c, 0x19,
	0x4e, 0xf5, 0x14, 0xdc, 0xd2, 0xb3, 0xdc, 0x1d, 0x49, 0xef, 0xdf, 0xf4, 0xed, 0x08, 0x05, 0xa5,
	0x26, 0xb5, 0x49, 0xad, 0x2b, 0x24, 0x1b, 0x6f, 0x0d, 0x2a, 0xda, 0xa0, 0xc4, 0xec, 0x67, 0x4c,
	0x0e, 0x7e, 0xd3, 0xc8, 0xa8, 0x4f, 0xc8, 0x4f, 0xda, 0x58, 0x1c, 0xff, 0x6d, 0xf1, 0x3d, 0xbb,
	0x51, 0x29, 0x94, 0xa9, 0x43, 0x1a, 0xdb, 0x4f, 0xb9, 0x10, 0x62, 0x94, 0x4f, 0x32, 0xd3, 0xb0,
	0x0c, 0xa7, 0x1e, 0xec, 0x62, 0xef, 0x7c, 0xb6, 0x00, 0x34, 0x5f, 0x00, 0x5a, 0x2d, 0x00, 0x3f,
	0x2a, 0xc0, 0xaf, 0x0a, 0xf0, 0x54, 0x01, 0x9e, 0x29, 0xc0, 0xef, 0x0a, 0xf0, 0x87, 0x02, 0xb4,
	0x52, 0x80, 0x5f, 0x96, 0x80, 0x66, 0x4b, 0x40, 0xf3, 0x25, 0xa0, 0xeb, 0xf2, 0xca, 0xc3, 0xff,
	0x7a, 0x95, 0x67, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xef, 0x8a, 0x79, 0xd3, 0x1e, 0x02, 0x00,
	0x00,
}

func (this *IndexHeaderMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IndexHeaderMeta)
	if !ok {
		that2, ok := that.(IndexHeaderMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BlockID != that1.BlockID {
		return false
	}
	if this.TenantIDRef != that1.TenantIDRef {
		return false
	}
	if this.SizeMiB != that1.SizeMiB {
		return false
	}
	return true
}
func (this *IndexHeaderPartition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IndexHeaderPartition)
	if !ok {
		that2, ok := that.(IndexHeaderPartition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IndexHeaders) != len(that1.IndexHeaders) {
		return false
	}
	for i := range this.IndexHeaders {
		if !this.IndexHeaders[i].Equal(&that1.IndexHeaders[i]) {
			return false
		}
	}
	if this.TotalSizeMiB != that1.TotalSizeMiB {
		return false
	}
	return true
}
func (this *IndexHeaderPartitions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IndexHeaderPartitions)
	if !ok {
		that2, ok := that.(IndexHeaderPartitions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Partitions) != len(that1.Partitions) {
		return false
	}
	for i := range this.Partitions {
		if !this.Partitions[i].Equal(&that1.Partitions[i]) {
			return false
		}
	}
	if len(this.TenantIDLookups) != len(that1.TenantIDLookups) {
		return false
	}
	for i := range this.TenantIDLookups {
		if this.TenantIDLookups[i] != that1.TenantIDLookups[i] {
			return false
		}
	}
	return true
}
func (this *IndexHeaderMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&shardlayoutpb.IndexHeaderMeta{")
	s = append(s, "BlockID: "+fmt.Sprintf("%#v", this.BlockID)+",\n")
	s = append(s, "TenantIDRef: "+fmt.Sprintf("%#v", this.TenantIDRef)+",\n")
	s = append(s, "SizeMiB: "+fmt.Sprintf("%#v", this.SizeMiB)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IndexHeaderPartition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&shardlayoutpb.IndexHeaderPartition{")
	if this.IndexHeaders != nil {
		vs := make([]IndexHeaderMeta, len(this.IndexHeaders))
		for i := range vs {
			vs[i] = this.IndexHeaders[i]
		}
		s = append(s, "IndexHeaders: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "TotalSizeMiB: "+fmt.Sprintf("%#v", this.TotalSizeMiB)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IndexHeaderPartitions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&shardlayoutpb.IndexHeaderPartitions{")
	if this.Partitions != nil {
		vs := make([]IndexHeaderPartition, len(this.Partitions))
		for i := range vs {
			vs[i] = this.Partitions[i]
		}
		s = append(s, "Partitions: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "TenantIDLookups: "+fmt.Sprintf("%#v", this.TenantIDLookups)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringShardLayout(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *IndexHeaderMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexHeaderMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexHeaderMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SizeMiB != 0 {
		i = encodeVarintShardLayout(dAtA, i, uint64(m.SizeMiB))
		i--
		dAtA[i] = 0x18
	}
	if m.TenantIDRef != 0 {
		i = encodeVarintShardLayout(dAtA, i, uint64(m.TenantIDRef))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockID != 0 {
		i = encodeVarintShardLayout(dAtA, i, uint64(m.BlockID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IndexHeaderPartition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexHeaderPartition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexHeaderPartition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalSizeMiB != 0 {
		i = encodeVarintShardLayout(dAtA, i, uint64(m.TotalSizeMiB))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IndexHeaders) > 0 {
		for iNdEx := len(m.IndexHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IndexHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShardLayout(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IndexHeaderPartitions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexHeaderPartitions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexHeaderPartitions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TenantIDLookups) > 0 {
		dAtA2 := make([]byte, len(m.TenantIDLookups)*10)
		var j1 int
		for _, num := range m.TenantIDLookups {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintShardLayout(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Partitions) > 0 {
		for iNdEx := len(m.Partitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Partitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShardLayout(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintShardLayout(dAtA []byte, offset int, v uint64) int {
	offset -= sovShardLayout(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IndexHeaderMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockID != 0 {
		n += 1 + sovShardLayout(uint64(m.BlockID))
	}
	if m.TenantIDRef != 0 {
		n += 1 + sovShardLayout(uint64(m.TenantIDRef))
	}
	if m.SizeMiB != 0 {
		n += 1 + sovShardLayout(uint64(m.SizeMiB))
	}
	return n
}

func (m *IndexHeaderPartition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IndexHeaders) > 0 {
		for _, e := range m.IndexHeaders {
			l = e.Size()
			n += 1 + l + sovShardLayout(uint64(l))
		}
	}
	if m.TotalSizeMiB != 0 {
		n += 1 + sovShardLayout(uint64(m.TotalSizeMiB))
	}
	return n
}

func (m *IndexHeaderPartitions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Partitions) > 0 {
		for _, e := range m.Partitions {
			l = e.Size()
			n += 1 + l + sovShardLayout(uint64(l))
		}
	}
	if len(m.TenantIDLookups) > 0 {
		l = 0
		for _, e := range m.TenantIDLookups {
			l += sovShardLayout(uint64(e))
		}
		n += 1 + sovShardLayout(uint64(l)) + l
	}
	return n
}

func sovShardLayout(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShardLayout(x uint64) (n int) {
	return sovShardLayout(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *IndexHeaderMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IndexHeaderMeta{`,
		`BlockID:` + fmt.Sprintf("%v", this.BlockID) + `,`,
		`TenantIDRef:` + fmt.Sprintf("%v", this.TenantIDRef) + `,`,
		`SizeMiB:` + fmt.Sprintf("%v", this.SizeMiB) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IndexHeaderPartition) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIndexHeaders := "[]IndexHeaderMeta{"
	for _, f := range this.IndexHeaders {
		repeatedStringForIndexHeaders += strings.Replace(strings.Replace(f.String(), "IndexHeaderMeta", "IndexHeaderMeta", 1), `&`, ``, 1) + ","
	}
	repeatedStringForIndexHeaders += "}"
	s := strings.Join([]string{`&IndexHeaderPartition{`,
		`IndexHeaders:` + repeatedStringForIndexHeaders + `,`,
		`TotalSizeMiB:` + fmt.Sprintf("%v", this.TotalSizeMiB) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IndexHeaderPartitions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPartitions := "[]IndexHeaderPartition{"
	for _, f := range this.Partitions {
		repeatedStringForPartitions += strings.Replace(strings.Replace(f.String(), "IndexHeaderPartition", "IndexHeaderPartition", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPartitions += "}"
	s := strings.Join([]string{`&IndexHeaderPartitions{`,
		`Partitions:` + repeatedStringForPartitions + `,`,
		`TenantIDLookups:` + fmt.Sprintf("%v", this.TenantIDLookups) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringShardLayout(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *IndexHeaderMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardLayout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexHeaderMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexHeaderMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockID", wireType)
			}
			m.BlockID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardLayout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantIDRef", wireType)
			}
			m.TenantIDRef = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardLayout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantIDRef |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeMiB", wireType)
			}
			m.SizeMiB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardLayout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeMiB |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShardLayout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShardLayout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexHeaderPartition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardLayout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexHeaderPartition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexHeaderPartition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardLayout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardLayout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardLayout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexHeaders = append(m.IndexHeaders, IndexHeaderMeta{})
			if err := m.IndexHeaders[len(m.IndexHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSizeMiB", wireType)
			}
			m.TotalSizeMiB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardLayout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSizeMiB |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShardLayout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShardLayout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexHeaderPartitions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardLayout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexHeaderPartitions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexHeaderPartitions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardLayout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardLayout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardLayout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partitions = append(m.Partitions, IndexHeaderPartition{})
			if err := m.Partitions[len(m.Partitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardLayout
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TenantIDLookups = append(m.TenantIDLookups, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardLayout
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShardLayout
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthShardLayout
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TenantIDLookups) == 0 {
					m.TenantIDLookups = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShardLayout
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TenantIDLookups = append(m.TenantIDLookups, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantIDLookups", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShardLayout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShardLayout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShardLayout(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShardLayout
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShardLayout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShardLayout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShardLayout
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShardLayout
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShardLayout
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShardLayout        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShardLayout          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShardLayout = fmt.Errorf("proto: unexpected end of group")
)
