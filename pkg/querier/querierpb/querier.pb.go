// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: querier.proto

package querierpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_grafana_mimir_pkg_mimirpb "github.com/grafana/mimir/pkg/mimirpb"
	mimirpb "github.com/grafana/mimir/pkg/mimirpb"
	planning "github.com/grafana/mimir/pkg/streamingpromql/planning"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EvaluateQueryRequest struct {
	Plan  planning.EncodedQueryPlan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan"`
	Nodes []EvaluationNode          `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes"`
}

func (m *EvaluateQueryRequest) Reset()      { *m = EvaluateQueryRequest{} }
func (*EvaluateQueryRequest) ProtoMessage() {}
func (*EvaluateQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{0}
}
func (m *EvaluateQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateQueryRequest.Merge(m, src)
}
func (m *EvaluateQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateQueryRequest proto.InternalMessageInfo

func (m *EvaluateQueryRequest) GetPlan() planning.EncodedQueryPlan {
	if m != nil {
		return m.Plan
	}
	return planning.EncodedQueryPlan{}
}

func (m *EvaluateQueryRequest) GetNodes() []EvaluationNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type EvaluationNode struct {
	NodeIndex int64                          `protobuf:"varint,1,opt,name=nodeIndex,proto3" json:"nodeIndex,omitempty"`
	TimeRange planning.EncodedQueryTimeRange `protobuf:"bytes,2,opt,name=timeRange,proto3" json:"timeRange"`
}

func (m *EvaluationNode) Reset()      { *m = EvaluationNode{} }
func (*EvaluationNode) ProtoMessage() {}
func (*EvaluationNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{1}
}
func (m *EvaluationNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluationNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluationNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluationNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluationNode.Merge(m, src)
}
func (m *EvaluationNode) XXX_Size() int {
	return m.Size()
}
func (m *EvaluationNode) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluationNode.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluationNode proto.InternalMessageInfo

func (m *EvaluationNode) GetNodeIndex() int64 {
	if m != nil {
		return m.NodeIndex
	}
	return 0
}

func (m *EvaluationNode) GetTimeRange() planning.EncodedQueryTimeRange {
	if m != nil {
		return m.TimeRange
	}
	return planning.EncodedQueryTimeRange{}
}

type EvaluateQueryResponse struct {
	// Types that are valid to be assigned to Message:
	//	*EvaluateQueryResponse_Error
	//	*EvaluateQueryResponse_SeriesMetadata
	//	*EvaluateQueryResponse_StringValue
	//	*EvaluateQueryResponse_ScalarValue
	//	*EvaluateQueryResponse_InstantVectorSeriesData
	//	*EvaluateQueryResponse_RangeVectorData
	Message isEvaluateQueryResponse_Message `protobuf_oneof:"message"`
}

func (m *EvaluateQueryResponse) Reset()      { *m = EvaluateQueryResponse{} }
func (*EvaluateQueryResponse) ProtoMessage() {}
func (*EvaluateQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{2}
}
func (m *EvaluateQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateQueryResponse.Merge(m, src)
}
func (m *EvaluateQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateQueryResponse proto.InternalMessageInfo

type isEvaluateQueryResponse_Message interface {
	isEvaluateQueryResponse_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EvaluateQueryResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
}
type EvaluateQueryResponse_SeriesMetadata struct {
	SeriesMetadata *EvaluateQueryResponseSeriesMetadata `protobuf:"bytes,2,opt,name=seriesMetadata,proto3,oneof" json:"seriesMetadata,omitempty"`
}
type EvaluateQueryResponse_StringValue struct {
	StringValue *EvaluateQueryResponseStringValue `protobuf:"bytes,3,opt,name=stringValue,proto3,oneof" json:"stringValue,omitempty"`
}
type EvaluateQueryResponse_ScalarValue struct {
	ScalarValue *EvaluateQueryResponseScalarValue `protobuf:"bytes,4,opt,name=scalarValue,proto3,oneof" json:"scalarValue,omitempty"`
}
type EvaluateQueryResponse_InstantVectorSeriesData struct {
	InstantVectorSeriesData *EvaluateQueryResponseInstantVectorSeriesData `protobuf:"bytes,5,opt,name=instantVectorSeriesData,proto3,oneof" json:"instantVectorSeriesData,omitempty"`
}
type EvaluateQueryResponse_RangeVectorData struct {
	RangeVectorData *EvaluateQueryResponseRangeVectorSeriesData `protobuf:"bytes,6,opt,name=rangeVectorData,proto3,oneof" json:"rangeVectorData,omitempty"`
}

func (*EvaluateQueryResponse_Error) isEvaluateQueryResponse_Message()                   {}
func (*EvaluateQueryResponse_SeriesMetadata) isEvaluateQueryResponse_Message()          {}
func (*EvaluateQueryResponse_StringValue) isEvaluateQueryResponse_Message()             {}
func (*EvaluateQueryResponse_ScalarValue) isEvaluateQueryResponse_Message()             {}
func (*EvaluateQueryResponse_InstantVectorSeriesData) isEvaluateQueryResponse_Message() {}
func (*EvaluateQueryResponse_RangeVectorData) isEvaluateQueryResponse_Message()         {}

func (m *EvaluateQueryResponse) GetMessage() isEvaluateQueryResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *EvaluateQueryResponse) GetError() *Error {
	if x, ok := m.GetMessage().(*EvaluateQueryResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (m *EvaluateQueryResponse) GetSeriesMetadata() *EvaluateQueryResponseSeriesMetadata {
	if x, ok := m.GetMessage().(*EvaluateQueryResponse_SeriesMetadata); ok {
		return x.SeriesMetadata
	}
	return nil
}

func (m *EvaluateQueryResponse) GetStringValue() *EvaluateQueryResponseStringValue {
	if x, ok := m.GetMessage().(*EvaluateQueryResponse_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (m *EvaluateQueryResponse) GetScalarValue() *EvaluateQueryResponseScalarValue {
	if x, ok := m.GetMessage().(*EvaluateQueryResponse_ScalarValue); ok {
		return x.ScalarValue
	}
	return nil
}

func (m *EvaluateQueryResponse) GetInstantVectorSeriesData() *EvaluateQueryResponseInstantVectorSeriesData {
	if x, ok := m.GetMessage().(*EvaluateQueryResponse_InstantVectorSeriesData); ok {
		return x.InstantVectorSeriesData
	}
	return nil
}

func (m *EvaluateQueryResponse) GetRangeVectorData() *EvaluateQueryResponseRangeVectorSeriesData {
	if x, ok := m.GetMessage().(*EvaluateQueryResponse_RangeVectorData); ok {
		return x.RangeVectorData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EvaluateQueryResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EvaluateQueryResponse_Error)(nil),
		(*EvaluateQueryResponse_SeriesMetadata)(nil),
		(*EvaluateQueryResponse_StringValue)(nil),
		(*EvaluateQueryResponse_ScalarValue)(nil),
		(*EvaluateQueryResponse_InstantVectorSeriesData)(nil),
		(*EvaluateQueryResponse_RangeVectorData)(nil),
	}
}

type EvaluateQueryResponseSeriesMetadata struct {
	NodeIndex int64            `protobuf:"varint,1,opt,name=nodeIndex,proto3" json:"nodeIndex,omitempty"`
	Series    []SeriesMetadata `protobuf:"bytes,2,rep,name=series,proto3" json:"series"`
}

func (m *EvaluateQueryResponseSeriesMetadata) Reset()      { *m = EvaluateQueryResponseSeriesMetadata{} }
func (*EvaluateQueryResponseSeriesMetadata) ProtoMessage() {}
func (*EvaluateQueryResponseSeriesMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{3}
}
func (m *EvaluateQueryResponseSeriesMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateQueryResponseSeriesMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateQueryResponseSeriesMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateQueryResponseSeriesMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateQueryResponseSeriesMetadata.Merge(m, src)
}
func (m *EvaluateQueryResponseSeriesMetadata) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateQueryResponseSeriesMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateQueryResponseSeriesMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateQueryResponseSeriesMetadata proto.InternalMessageInfo

func (m *EvaluateQueryResponseSeriesMetadata) GetNodeIndex() int64 {
	if m != nil {
		return m.NodeIndex
	}
	return 0
}

func (m *EvaluateQueryResponseSeriesMetadata) GetSeries() []SeriesMetadata {
	if m != nil {
		return m.Series
	}
	return nil
}

type SeriesMetadata struct {
	Labels []github_com_grafana_mimir_pkg_mimirpb.LabelAdapter `protobuf:"bytes,1,rep,name=labels,proto3,customtype=github.com/grafana/mimir/pkg/mimirpb.LabelAdapter" json:"labels"`
}

func (m *SeriesMetadata) Reset()      { *m = SeriesMetadata{} }
func (*SeriesMetadata) ProtoMessage() {}
func (*SeriesMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{4}
}
func (m *SeriesMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeriesMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeriesMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeriesMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeriesMetadata.Merge(m, src)
}
func (m *SeriesMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SeriesMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SeriesMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SeriesMetadata proto.InternalMessageInfo

type EvaluateQueryResponseStringValue struct {
	NodeIndex int64  `protobuf:"varint,1,opt,name=nodeIndex,proto3" json:"nodeIndex,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EvaluateQueryResponseStringValue) Reset()      { *m = EvaluateQueryResponseStringValue{} }
func (*EvaluateQueryResponseStringValue) ProtoMessage() {}
func (*EvaluateQueryResponseStringValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{5}
}
func (m *EvaluateQueryResponseStringValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateQueryResponseStringValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateQueryResponseStringValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateQueryResponseStringValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateQueryResponseStringValue.Merge(m, src)
}
func (m *EvaluateQueryResponseStringValue) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateQueryResponseStringValue) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateQueryResponseStringValue.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateQueryResponseStringValue proto.InternalMessageInfo

func (m *EvaluateQueryResponseStringValue) GetNodeIndex() int64 {
	if m != nil {
		return m.NodeIndex
	}
	return 0
}

func (m *EvaluateQueryResponseStringValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EvaluateQueryResponseScalarValue struct {
	NodeIndex int64   `protobuf:"varint,1,opt,name=nodeIndex,proto3" json:"nodeIndex,omitempty"`
	Value     float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EvaluateQueryResponseScalarValue) Reset()      { *m = EvaluateQueryResponseScalarValue{} }
func (*EvaluateQueryResponseScalarValue) ProtoMessage() {}
func (*EvaluateQueryResponseScalarValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{6}
}
func (m *EvaluateQueryResponseScalarValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateQueryResponseScalarValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateQueryResponseScalarValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateQueryResponseScalarValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateQueryResponseScalarValue.Merge(m, src)
}
func (m *EvaluateQueryResponseScalarValue) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateQueryResponseScalarValue) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateQueryResponseScalarValue.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateQueryResponseScalarValue proto.InternalMessageInfo

func (m *EvaluateQueryResponseScalarValue) GetNodeIndex() int64 {
	if m != nil {
		return m.NodeIndex
	}
	return 0
}

func (m *EvaluateQueryResponseScalarValue) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type EvaluateQueryResponseInstantVectorSeriesData struct {
	NodeIndex int64                     `protobuf:"varint,1,opt,name=nodeIndex,proto3" json:"nodeIndex,omitempty"`
	Data      []InstantVectorSeriesData `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (m *EvaluateQueryResponseInstantVectorSeriesData) Reset() {
	*m = EvaluateQueryResponseInstantVectorSeriesData{}
}
func (*EvaluateQueryResponseInstantVectorSeriesData) ProtoMessage() {}
func (*EvaluateQueryResponseInstantVectorSeriesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{7}
}
func (m *EvaluateQueryResponseInstantVectorSeriesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateQueryResponseInstantVectorSeriesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateQueryResponseInstantVectorSeriesData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateQueryResponseInstantVectorSeriesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateQueryResponseInstantVectorSeriesData.Merge(m, src)
}
func (m *EvaluateQueryResponseInstantVectorSeriesData) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateQueryResponseInstantVectorSeriesData) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateQueryResponseInstantVectorSeriesData.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateQueryResponseInstantVectorSeriesData proto.InternalMessageInfo

func (m *EvaluateQueryResponseInstantVectorSeriesData) GetNodeIndex() int64 {
	if m != nil {
		return m.NodeIndex
	}
	return 0
}

func (m *EvaluateQueryResponseInstantVectorSeriesData) GetData() []InstantVectorSeriesData {
	if m != nil {
		return m.Data
	}
	return nil
}

type InstantVectorSeriesData struct {
	Floats     []mimirpb.Sample             `protobuf:"bytes,1,rep,name=floats,proto3" json:"floats"`
	Histograms []mimirpb.FloatHistogramPair `protobuf:"bytes,2,rep,name=histograms,proto3" json:"histograms"`
}

func (m *InstantVectorSeriesData) Reset()      { *m = InstantVectorSeriesData{} }
func (*InstantVectorSeriesData) ProtoMessage() {}
func (*InstantVectorSeriesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{8}
}
func (m *InstantVectorSeriesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstantVectorSeriesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstantVectorSeriesData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstantVectorSeriesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstantVectorSeriesData.Merge(m, src)
}
func (m *InstantVectorSeriesData) XXX_Size() int {
	return m.Size()
}
func (m *InstantVectorSeriesData) XXX_DiscardUnknown() {
	xxx_messageInfo_InstantVectorSeriesData.DiscardUnknown(m)
}

var xxx_messageInfo_InstantVectorSeriesData proto.InternalMessageInfo

func (m *InstantVectorSeriesData) GetFloats() []mimirpb.Sample {
	if m != nil {
		return m.Floats
	}
	return nil
}

func (m *InstantVectorSeriesData) GetHistograms() []mimirpb.FloatHistogramPair {
	if m != nil {
		return m.Histograms
	}
	return nil
}

type EvaluateQueryResponseRangeVectorSeriesData struct {
	NodeIndex int64 `protobuf:"varint,1,opt,name=nodeIndex,proto3" json:"nodeIndex,omitempty"`
}

func (m *EvaluateQueryResponseRangeVectorSeriesData) Reset() {
	*m = EvaluateQueryResponseRangeVectorSeriesData{}
}
func (*EvaluateQueryResponseRangeVectorSeriesData) ProtoMessage() {}
func (*EvaluateQueryResponseRangeVectorSeriesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{9}
}
func (m *EvaluateQueryResponseRangeVectorSeriesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateQueryResponseRangeVectorSeriesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateQueryResponseRangeVectorSeriesData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateQueryResponseRangeVectorSeriesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateQueryResponseRangeVectorSeriesData.Merge(m, src)
}
func (m *EvaluateQueryResponseRangeVectorSeriesData) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateQueryResponseRangeVectorSeriesData) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateQueryResponseRangeVectorSeriesData.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateQueryResponseRangeVectorSeriesData proto.InternalMessageInfo

func (m *EvaluateQueryResponseRangeVectorSeriesData) GetNodeIndex() int64 {
	if m != nil {
		return m.NodeIndex
	}
	return 0
}

type Error struct {
	// TODO: some kind of error code?
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Error) Reset()      { *m = Error{} }
func (*Error) ProtoMessage() {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{10}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*EvaluateQueryRequest)(nil), "querierpb.EvaluateQueryRequest")
	proto.RegisterType((*EvaluationNode)(nil), "querierpb.EvaluationNode")
	proto.RegisterType((*EvaluateQueryResponse)(nil), "querierpb.EvaluateQueryResponse")
	proto.RegisterType((*EvaluateQueryResponseSeriesMetadata)(nil), "querierpb.EvaluateQueryResponseSeriesMetadata")
	proto.RegisterType((*SeriesMetadata)(nil), "querierpb.SeriesMetadata")
	proto.RegisterType((*EvaluateQueryResponseStringValue)(nil), "querierpb.EvaluateQueryResponseStringValue")
	proto.RegisterType((*EvaluateQueryResponseScalarValue)(nil), "querierpb.EvaluateQueryResponseScalarValue")
	proto.RegisterType((*EvaluateQueryResponseInstantVectorSeriesData)(nil), "querierpb.EvaluateQueryResponseInstantVectorSeriesData")
	proto.RegisterType((*InstantVectorSeriesData)(nil), "querierpb.InstantVectorSeriesData")
	proto.RegisterType((*EvaluateQueryResponseRangeVectorSeriesData)(nil), "querierpb.EvaluateQueryResponseRangeVectorSeriesData")
	proto.RegisterType((*Error)(nil), "querierpb.Error")
}

func init() { proto.RegisterFile("querier.proto", fileDescriptor_7edfe438abd6b96f) }

var fileDescriptor_7edfe438abd6b96f = []byte{
	// 719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x4f, 0x4f, 0xd4, 0x4e,
	0x18, 0xc7, 0x3b, 0xb0, 0xbb, 0xbf, 0xec, 0x43, 0x7e, 0x48, 0x2a, 0x86, 0x95, 0x90, 0x82, 0xf5,
	0x42, 0xd4, 0x74, 0x15, 0x25, 0xc4, 0xc4, 0x44, 0x5d, 0xc5, 0x2c, 0xc6, 0x3f, 0x58, 0x0c, 0x31,
	0xde, 0x66, 0xb7, 0x43, 0x69, 0x6c, 0x67, 0xca, 0xcc, 0x2c, 0xc1, 0xc4, 0x83, 0x89, 0x37, 0x13,
	0x13, 0x5f, 0x82, 0x47, 0x5f, 0x0a, 0x47, 0x8e, 0xc4, 0x03, 0x91, 0x72, 0xf1, 0xc8, 0x4b, 0x30,
	0x9d, 0xb6, 0x74, 0x77, 0xdd, 0xa5, 0xcb, 0x69, 0x3b, 0x33, 0xdf, 0xef, 0xe7, 0x99, 0x67, 0x9e,
	0x67, 0x66, 0xe1, 0xff, 0x9d, 0x0e, 0xe1, 0x1e, 0xe1, 0x56, 0xc8, 0x99, 0x64, 0x7a, 0x35, 0x1d,
	0x86, 0xad, 0xd9, 0x69, 0x97, 0xb9, 0x4c, 0xcd, 0xd6, 0xe3, 0xaf, 0x44, 0x30, 0x7b, 0xdb, 0xf5,
	0xe4, 0x76, 0xa7, 0x65, 0xb5, 0x59, 0x50, 0x77, 0x39, 0xde, 0xc2, 0x14, 0xd7, 0x03, 0x2f, 0xf0,
	0x78, 0x3d, 0xfc, 0xe0, 0x26, 0x5f, 0x61, 0x2b, 0xf9, 0x4d, 0x1d, 0x8f, 0xce, 0x75, 0x08, 0xc9,
	0x09, 0x0e, 0x3c, 0xea, 0x86, 0x9c, 0x05, 0x3b, 0x7e, 0x3d, 0xf4, 0x31, 0xa5, 0x1e, 0x75, 0xd5,
	0x47, 0x42, 0x30, 0xbf, 0x20, 0x98, 0x5e, 0xdd, 0xc5, 0x7e, 0x07, 0x4b, 0xf2, 0xa6, 0x43, 0xf8,
	0x47, 0x9b, 0xec, 0x74, 0x88, 0x90, 0xfa, 0x3d, 0x28, 0xc5, 0xb2, 0x1a, 0x5a, 0x40, 0x8b, 0x13,
	0x4b, 0xb3, 0x56, 0x66, 0xb6, 0x56, 0x69, 0x9b, 0x39, 0xc4, 0x51, 0xe2, 0x75, 0x1f, 0xd3, 0x46,
	0x69, 0xff, 0x68, 0x5e, 0xb3, 0x95, 0x5a, 0x5f, 0x86, 0x32, 0x65, 0x0e, 0x11, 0xb5, 0xb1, 0x85,
	0xf1, 0xc5, 0x89, 0xa5, 0xab, 0xd6, 0x59, 0xce, 0x56, 0x1a, 0xc5, 0x63, 0xf4, 0x15, 0x73, 0x48,
	0xea, 0x4a, 0xd4, 0xa6, 0x80, 0xc9, 0xde, 0x65, 0x7d, 0x0e, 0xaa, 0xf1, 0xd2, 0x1a, 0x75, 0xc8,
	0x9e, 0xda, 0xc3, 0xb8, 0x9d, 0x4f, 0xe8, 0x4f, 0xa0, 0x2a, 0xbd, 0x80, 0xd8, 0x98, 0xba, 0xa4,
	0x36, 0xa6, 0x76, 0x38, 0x3f, 0x78, 0x87, 0x6f, 0x33, 0x59, 0x1a, 0x30, 0xf7, 0x99, 0x3f, 0x4a,
	0x70, 0xa5, 0x2f, 0x75, 0x11, 0x32, 0x2a, 0x88, 0xbe, 0x08, 0x65, 0xc2, 0x39, 0xe3, 0x69, 0xf2,
	0x53, 0xdd, 0x59, 0xc4, 0xf3, 0x4d, 0xcd, 0x4e, 0x04, 0xfa, 0x3b, 0x98, 0x14, 0xf1, 0x92, 0x78,
	0x49, 0x24, 0x76, 0xb0, 0xc4, 0xe9, 0x6e, 0xac, 0x7f, 0x13, 0xef, 0x8d, 0xb1, 0xd1, 0xe3, 0x6a,
	0x6a, 0x76, 0x1f, 0x47, 0x7f, 0x0d, 0x13, 0x42, 0x72, 0x8f, 0xba, 0x9b, 0xd8, 0xef, 0x90, 0xda,
	0xb8, 0xc2, 0xde, 0x2c, 0xc4, 0xe6, 0x96, 0xa6, 0x66, 0x77, 0x13, 0x14, 0xb0, 0x8d, 0x7d, 0xcc,
	0x13, 0x60, 0x69, 0x44, 0x60, 0x6e, 0x51, 0xc0, 0x7c, 0xa8, 0x0b, 0x98, 0xf1, 0xa8, 0x90, 0x98,
	0xca, 0x4d, 0xd2, 0x96, 0x8c, 0x27, 0x29, 0x3d, 0x8d, 0x0f, 0xa1, 0xac, 0xe0, 0x2b, 0x45, 0xf0,
	0xb5, 0xc1, 0xf6, 0xa6, 0x66, 0x0f, 0x23, 0xeb, 0x18, 0x2e, 0xf1, 0xb8, 0x7a, 0xc9, 0x82, 0x0a,
	0x56, 0x51, 0xc1, 0x96, 0x8b, 0x82, 0xd9, 0xb9, 0xad, 0x27, 0x54, 0x3f, 0xaf, 0x51, 0x85, 0xff,
	0x02, 0x22, 0x04, 0x76, 0x89, 0xf9, 0x09, 0xae, 0x8f, 0x50, 0xbd, 0x82, 0x66, 0x5d, 0x81, 0x4a,
	0x52, 0xdb, 0x01, 0x97, 0xa2, 0x17, 0x94, 0xf6, 0x68, 0x2a, 0x37, 0xf7, 0x60, 0xb2, 0x2f, 0xd0,
	0x16, 0x54, 0x7c, 0xdc, 0x22, 0xbe, 0xa8, 0x21, 0x85, 0xba, 0x6c, 0xb5, 0x19, 0x97, 0x64, 0x2f,
	0x6c, 0x59, 0x2f, 0xe2, 0xf9, 0x75, 0xec, 0xf1, 0xc6, 0xfd, 0x18, 0xf2, 0xeb, 0x68, 0xfe, 0xce,
	0x28, 0xcf, 0x49, 0xe2, 0x7b, 0xec, 0xe0, 0x50, 0x12, 0x6e, 0xa7, 0x74, 0x73, 0x13, 0x16, 0x8a,
	0xda, 0xab, 0x20, 0xe9, 0x69, 0x28, 0xef, 0xaa, 0x3e, 0x8b, 0xef, 0x43, 0xd5, 0x4e, 0x06, 0xc3,
	0xb9, 0x5d, 0x6d, 0x75, 0x01, 0x2e, 0xca, 0xb8, 0x5f, 0x11, 0xdc, 0xba, 0x48, 0x87, 0x15, 0x04,
	0x79, 0x00, 0xa5, 0xf4, 0x2e, 0xc7, 0x87, 0x6c, 0x76, 0xd5, 0x6b, 0x08, 0x2f, 0x7b, 0x03, 0x63,
	0x97, 0xf9, 0x0d, 0xc1, 0xcc, 0xb0, 0xb8, 0x16, 0x54, 0xb6, 0x7c, 0x86, 0x65, 0x56, 0xc0, 0xa9,
	0xbc, 0x80, 0x1b, 0x38, 0x08, 0xfd, 0xec, 0x99, 0x4a, 0x55, 0x7a, 0x03, 0x60, 0xdb, 0x13, 0x92,
	0xb9, 0x1c, 0x07, 0x59, 0xff, 0xcc, 0xe5, 0x9e, 0x67, 0xb1, 0xaa, 0x99, 0x09, 0x54, 0xf5, 0x13,
	0x7f, 0x97, 0xcb, 0x7c, 0x0e, 0x37, 0x46, 0xbf, 0x10, 0xe7, 0x9f, 0x8c, 0x79, 0x0d, 0xca, 0xea,
	0x05, 0xd4, 0x6b, 0x67, 0x97, 0x44, 0x89, 0xaa, 0x76, 0x36, 0x6c, 0x3c, 0x3c, 0x38, 0x36, 0xb4,
	0xc3, 0x63, 0x43, 0x3b, 0x3d, 0x36, 0xd0, 0xe7, 0xc8, 0x40, 0x3f, 0x23, 0x03, 0xed, 0x47, 0x06,
	0x3a, 0x88, 0x0c, 0xf4, 0x3b, 0x32, 0xd0, 0x9f, 0xc8, 0xd0, 0x4e, 0x23, 0x03, 0x7d, 0x3f, 0x31,
	0xb4, 0x83, 0x13, 0x43, 0x3b, 0x3c, 0x31, 0xb4, 0xf7, 0xf9, 0x9f, 0x63, 0xab, 0xa2, 0xfe, 0x99,
	0xee, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x26, 0x87, 0xc0, 0xae, 0x3f, 0x07, 0x00, 0x00,
}

func (this *EvaluateQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryRequest)
	if !ok {
		that2, ok := that.(EvaluateQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Plan.Equal(&that1.Plan) {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(&that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *EvaluationNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluationNode)
	if !ok {
		that2, ok := that.(EvaluationNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeIndex != that1.NodeIndex {
		return false
	}
	if !this.TimeRange.Equal(&that1.TimeRange) {
		return false
	}
	return true
}
func (this *EvaluateQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryResponse)
	if !ok {
		that2, ok := that.(EvaluateQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *EvaluateQueryResponse_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryResponse_Error)
	if !ok {
		that2, ok := that.(EvaluateQueryResponse_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *EvaluateQueryResponse_SeriesMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryResponse_SeriesMetadata)
	if !ok {
		that2, ok := that.(EvaluateQueryResponse_SeriesMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SeriesMetadata.Equal(that1.SeriesMetadata) {
		return false
	}
	return true
}
func (this *EvaluateQueryResponse_StringValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryResponse_StringValue)
	if !ok {
		that2, ok := that.(EvaluateQueryResponse_StringValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StringValue.Equal(that1.StringValue) {
		return false
	}
	return true
}
func (this *EvaluateQueryResponse_ScalarValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryResponse_ScalarValue)
	if !ok {
		that2, ok := that.(EvaluateQueryResponse_ScalarValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScalarValue.Equal(that1.ScalarValue) {
		return false
	}
	return true
}
func (this *EvaluateQueryResponse_InstantVectorSeriesData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryResponse_InstantVectorSeriesData)
	if !ok {
		that2, ok := that.(EvaluateQueryResponse_InstantVectorSeriesData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InstantVectorSeriesData.Equal(that1.InstantVectorSeriesData) {
		return false
	}
	return true
}
func (this *EvaluateQueryResponse_RangeVectorData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryResponse_RangeVectorData)
	if !ok {
		that2, ok := that.(EvaluateQueryResponse_RangeVectorData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RangeVectorData.Equal(that1.RangeVectorData) {
		return false
	}
	return true
}
func (this *EvaluateQueryResponseSeriesMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryResponseSeriesMetadata)
	if !ok {
		that2, ok := that.(EvaluateQueryResponseSeriesMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeIndex != that1.NodeIndex {
		return false
	}
	if len(this.Series) != len(that1.Series) {
		return false
	}
	for i := range this.Series {
		if !this.Series[i].Equal(&that1.Series[i]) {
			return false
		}
	}
	return true
}
func (this *SeriesMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SeriesMetadata)
	if !ok {
		that2, ok := that.(SeriesMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if !this.Labels[i].Equal(that1.Labels[i]) {
			return false
		}
	}
	return true
}
func (this *EvaluateQueryResponseStringValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryResponseStringValue)
	if !ok {
		that2, ok := that.(EvaluateQueryResponseStringValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeIndex != that1.NodeIndex {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *EvaluateQueryResponseScalarValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryResponseScalarValue)
	if !ok {
		that2, ok := that.(EvaluateQueryResponseScalarValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeIndex != that1.NodeIndex {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *EvaluateQueryResponseInstantVectorSeriesData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryResponseInstantVectorSeriesData)
	if !ok {
		that2, ok := that.(EvaluateQueryResponseInstantVectorSeriesData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeIndex != that1.NodeIndex {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(&that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *InstantVectorSeriesData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstantVectorSeriesData)
	if !ok {
		that2, ok := that.(InstantVectorSeriesData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Floats) != len(that1.Floats) {
		return false
	}
	for i := range this.Floats {
		if !this.Floats[i].Equal(&that1.Floats[i]) {
			return false
		}
	}
	if len(this.Histograms) != len(that1.Histograms) {
		return false
	}
	for i := range this.Histograms {
		if !this.Histograms[i].Equal(&that1.Histograms[i]) {
			return false
		}
	}
	return true
}
func (this *EvaluateQueryResponseRangeVectorSeriesData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateQueryResponseRangeVectorSeriesData)
	if !ok {
		that2, ok := that.(EvaluateQueryResponseRangeVectorSeriesData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeIndex != that1.NodeIndex {
		return false
	}
	return true
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *EvaluateQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querierpb.EvaluateQueryRequest{")
	s = append(s, "Plan: "+strings.Replace(this.Plan.GoString(), `&`, ``, 1)+",\n")
	if this.Nodes != nil {
		vs := make([]EvaluationNode, len(this.Nodes))
		for i := range vs {
			vs[i] = this.Nodes[i]
		}
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluationNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querierpb.EvaluationNode{")
	s = append(s, "NodeIndex: "+fmt.Sprintf("%#v", this.NodeIndex)+",\n")
	s = append(s, "TimeRange: "+strings.Replace(this.TimeRange.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&querierpb.EvaluateQueryResponse{")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateQueryResponse_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&querierpb.EvaluateQueryResponse_Error{` +
		`Error:` + fmt.Sprintf("%#v", this.Error) + `}`}, ", ")
	return s
}
func (this *EvaluateQueryResponse_SeriesMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&querierpb.EvaluateQueryResponse_SeriesMetadata{` +
		`SeriesMetadata:` + fmt.Sprintf("%#v", this.SeriesMetadata) + `}`}, ", ")
	return s
}
func (this *EvaluateQueryResponse_StringValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&querierpb.EvaluateQueryResponse_StringValue{` +
		`StringValue:` + fmt.Sprintf("%#v", this.StringValue) + `}`}, ", ")
	return s
}
func (this *EvaluateQueryResponse_ScalarValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&querierpb.EvaluateQueryResponse_ScalarValue{` +
		`ScalarValue:` + fmt.Sprintf("%#v", this.ScalarValue) + `}`}, ", ")
	return s
}
func (this *EvaluateQueryResponse_InstantVectorSeriesData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&querierpb.EvaluateQueryResponse_InstantVectorSeriesData{` +
		`InstantVectorSeriesData:` + fmt.Sprintf("%#v", this.InstantVectorSeriesData) + `}`}, ", ")
	return s
}
func (this *EvaluateQueryResponse_RangeVectorData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&querierpb.EvaluateQueryResponse_RangeVectorData{` +
		`RangeVectorData:` + fmt.Sprintf("%#v", this.RangeVectorData) + `}`}, ", ")
	return s
}
func (this *EvaluateQueryResponseSeriesMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querierpb.EvaluateQueryResponseSeriesMetadata{")
	s = append(s, "NodeIndex: "+fmt.Sprintf("%#v", this.NodeIndex)+",\n")
	if this.Series != nil {
		vs := make([]SeriesMetadata, len(this.Series))
		for i := range vs {
			vs[i] = this.Series[i]
		}
		s = append(s, "Series: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SeriesMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&querierpb.SeriesMetadata{")
	s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateQueryResponseStringValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querierpb.EvaluateQueryResponseStringValue{")
	s = append(s, "NodeIndex: "+fmt.Sprintf("%#v", this.NodeIndex)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateQueryResponseScalarValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querierpb.EvaluateQueryResponseScalarValue{")
	s = append(s, "NodeIndex: "+fmt.Sprintf("%#v", this.NodeIndex)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateQueryResponseInstantVectorSeriesData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querierpb.EvaluateQueryResponseInstantVectorSeriesData{")
	s = append(s, "NodeIndex: "+fmt.Sprintf("%#v", this.NodeIndex)+",\n")
	if this.Data != nil {
		vs := make([]InstantVectorSeriesData, len(this.Data))
		for i := range vs {
			vs[i] = this.Data[i]
		}
		s = append(s, "Data: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InstantVectorSeriesData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querierpb.InstantVectorSeriesData{")
	if this.Floats != nil {
		vs := make([]mimirpb.Sample, len(this.Floats))
		for i := range vs {
			vs[i] = this.Floats[i]
		}
		s = append(s, "Floats: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.Histograms != nil {
		vs := make([]mimirpb.FloatHistogramPair, len(this.Histograms))
		for i := range vs {
			vs[i] = this.Histograms[i]
		}
		s = append(s, "Histograms: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateQueryResponseRangeVectorSeriesData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&querierpb.EvaluateQueryResponseRangeVectorSeriesData{")
	s = append(s, "NodeIndex: "+fmt.Sprintf("%#v", this.NodeIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&querierpb.Error{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringQuerier(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EvaluateQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EvaluationNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluationNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluationNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TimeRange.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.NodeIndex != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.NodeIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateQueryResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EvaluateQueryResponse_SeriesMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryResponse_SeriesMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SeriesMetadata != nil {
		{
			size, err := m.SeriesMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EvaluateQueryResponse_StringValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryResponse_StringValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StringValue != nil {
		{
			size, err := m.StringValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EvaluateQueryResponse_ScalarValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryResponse_ScalarValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScalarValue != nil {
		{
			size, err := m.ScalarValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *EvaluateQueryResponse_InstantVectorSeriesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryResponse_InstantVectorSeriesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InstantVectorSeriesData != nil {
		{
			size, err := m.InstantVectorSeriesData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *EvaluateQueryResponse_RangeVectorData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryResponse_RangeVectorData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RangeVectorData != nil {
		{
			size, err := m.RangeVectorData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *EvaluateQueryResponseSeriesMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateQueryResponseSeriesMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryResponseSeriesMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Series) > 0 {
		for iNdEx := len(m.Series) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Series[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NodeIndex != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.NodeIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeriesMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeriesMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Labels[iNdEx].Size()
				i -= size
				if _, err := m.Labels[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateQueryResponseStringValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateQueryResponseStringValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryResponseStringValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.NodeIndex != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.NodeIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateQueryResponseScalarValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateQueryResponseScalarValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryResponseScalarValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if m.NodeIndex != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.NodeIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateQueryResponseInstantVectorSeriesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateQueryResponseInstantVectorSeriesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryResponseInstantVectorSeriesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NodeIndex != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.NodeIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InstantVectorSeriesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstantVectorSeriesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstantVectorSeriesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Histograms) > 0 {
		for iNdEx := len(m.Histograms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Histograms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Floats) > 0 {
		for iNdEx := len(m.Floats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Floats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateQueryResponseRangeVectorSeriesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateQueryResponseRangeVectorSeriesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateQueryResponseRangeVectorSeriesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeIndex != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.NodeIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EvaluateQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Plan.Size()
	n += 1 + l + sovQuerier(uint64(l))
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *EvaluationNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeIndex != 0 {
		n += 1 + sovQuerier(uint64(m.NodeIndex))
	}
	l = m.TimeRange.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func (m *EvaluateQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *EvaluateQueryResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}
func (m *EvaluateQueryResponse_SeriesMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeriesMetadata != nil {
		l = m.SeriesMetadata.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}
func (m *EvaluateQueryResponse_StringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StringValue != nil {
		l = m.StringValue.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}
func (m *EvaluateQueryResponse_ScalarValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScalarValue != nil {
		l = m.ScalarValue.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}
func (m *EvaluateQueryResponse_InstantVectorSeriesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstantVectorSeriesData != nil {
		l = m.InstantVectorSeriesData.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}
func (m *EvaluateQueryResponse_RangeVectorData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeVectorData != nil {
		l = m.RangeVectorData.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}
func (m *EvaluateQueryResponseSeriesMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeIndex != 0 {
		n += 1 + sovQuerier(uint64(m.NodeIndex))
	}
	if len(m.Series) > 0 {
		for _, e := range m.Series {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *SeriesMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *EvaluateQueryResponseStringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeIndex != 0 {
		n += 1 + sovQuerier(uint64(m.NodeIndex))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *EvaluateQueryResponseScalarValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeIndex != 0 {
		n += 1 + sovQuerier(uint64(m.NodeIndex))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *EvaluateQueryResponseInstantVectorSeriesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeIndex != 0 {
		n += 1 + sovQuerier(uint64(m.NodeIndex))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *InstantVectorSeriesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Floats) > 0 {
		for _, e := range m.Floats {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if len(m.Histograms) > 0 {
		for _, e := range m.Histograms {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *EvaluateQueryResponseRangeVectorSeriesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeIndex != 0 {
		n += 1 + sovQuerier(uint64(m.NodeIndex))
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EvaluateQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]EvaluationNode{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(strings.Replace(f.String(), "EvaluationNode", "EvaluationNode", 1), `&`, ``, 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&EvaluateQueryRequest{`,
		`Plan:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Plan), "EncodedQueryPlan", "planning.EncodedQueryPlan", 1), `&`, ``, 1) + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluationNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluationNode{`,
		`NodeIndex:` + fmt.Sprintf("%v", this.NodeIndex) + `,`,
		`TimeRange:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TimeRange), "EncodedQueryTimeRange", "planning.EncodedQueryTimeRange", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateQueryResponse{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateQueryResponse_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateQueryResponse_Error{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateQueryResponse_SeriesMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateQueryResponse_SeriesMetadata{`,
		`SeriesMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SeriesMetadata), "EvaluateQueryResponseSeriesMetadata", "EvaluateQueryResponseSeriesMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateQueryResponse_StringValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateQueryResponse_StringValue{`,
		`StringValue:` + strings.Replace(fmt.Sprintf("%v", this.StringValue), "EvaluateQueryResponseStringValue", "EvaluateQueryResponseStringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateQueryResponse_ScalarValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateQueryResponse_ScalarValue{`,
		`ScalarValue:` + strings.Replace(fmt.Sprintf("%v", this.ScalarValue), "EvaluateQueryResponseScalarValue", "EvaluateQueryResponseScalarValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateQueryResponse_InstantVectorSeriesData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateQueryResponse_InstantVectorSeriesData{`,
		`InstantVectorSeriesData:` + strings.Replace(fmt.Sprintf("%v", this.InstantVectorSeriesData), "EvaluateQueryResponseInstantVectorSeriesData", "EvaluateQueryResponseInstantVectorSeriesData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateQueryResponse_RangeVectorData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateQueryResponse_RangeVectorData{`,
		`RangeVectorData:` + strings.Replace(fmt.Sprintf("%v", this.RangeVectorData), "EvaluateQueryResponseRangeVectorSeriesData", "EvaluateQueryResponseRangeVectorSeriesData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateQueryResponseSeriesMetadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSeries := "[]SeriesMetadata{"
	for _, f := range this.Series {
		repeatedStringForSeries += strings.Replace(strings.Replace(f.String(), "SeriesMetadata", "SeriesMetadata", 1), `&`, ``, 1) + ","
	}
	repeatedStringForSeries += "}"
	s := strings.Join([]string{`&EvaluateQueryResponseSeriesMetadata{`,
		`NodeIndex:` + fmt.Sprintf("%v", this.NodeIndex) + `,`,
		`Series:` + repeatedStringForSeries + `,`,
		`}`,
	}, "")
	return s
}
func (this *SeriesMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SeriesMetadata{`,
		`Labels:` + fmt.Sprintf("%v", this.Labels) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateQueryResponseStringValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateQueryResponseStringValue{`,
		`NodeIndex:` + fmt.Sprintf("%v", this.NodeIndex) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateQueryResponseScalarValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateQueryResponseScalarValue{`,
		`NodeIndex:` + fmt.Sprintf("%v", this.NodeIndex) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateQueryResponseInstantVectorSeriesData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]InstantVectorSeriesData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(strings.Replace(f.String(), "InstantVectorSeriesData", "InstantVectorSeriesData", 1), `&`, ``, 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&EvaluateQueryResponseInstantVectorSeriesData{`,
		`NodeIndex:` + fmt.Sprintf("%v", this.NodeIndex) + `,`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstantVectorSeriesData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFloats := "[]Sample{"
	for _, f := range this.Floats {
		repeatedStringForFloats += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForFloats += "}"
	repeatedStringForHistograms := "[]FloatHistogramPair{"
	for _, f := range this.Histograms {
		repeatedStringForHistograms += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForHistograms += "}"
	s := strings.Join([]string{`&InstantVectorSeriesData{`,
		`Floats:` + repeatedStringForFloats + `,`,
		`Histograms:` + repeatedStringForHistograms + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateQueryResponseRangeVectorSeriesData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateQueryResponseRangeVectorSeriesData{`,
		`NodeIndex:` + fmt.Sprintf("%v", this.NodeIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQuerier(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EvaluateQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, EvaluationNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluationNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluationNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluationNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIndex", wireType)
			}
			m.NodeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvaluateQueryResponse_Error{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvaluateQueryResponseSeriesMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvaluateQueryResponse_SeriesMetadata{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvaluateQueryResponseStringValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvaluateQueryResponse_StringValue{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalarValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvaluateQueryResponseScalarValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvaluateQueryResponse_ScalarValue{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantVectorSeriesData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvaluateQueryResponseInstantVectorSeriesData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvaluateQueryResponse_InstantVectorSeriesData{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeVectorData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvaluateQueryResponseRangeVectorSeriesData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvaluateQueryResponse_RangeVectorData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateQueryResponseSeriesMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateQueryResponseSeriesMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateQueryResponseSeriesMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIndex", wireType)
			}
			m.NodeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Series = append(m.Series, SeriesMetadata{})
			if err := m.Series[len(m.Series)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, github_com_grafana_mimir_pkg_mimirpb.LabelAdapter{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateQueryResponseStringValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateQueryResponseStringValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateQueryResponseStringValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIndex", wireType)
			}
			m.NodeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateQueryResponseScalarValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateQueryResponseScalarValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateQueryResponseScalarValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIndex", wireType)
			}
			m.NodeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateQueryResponseInstantVectorSeriesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateQueryResponseInstantVectorSeriesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateQueryResponseInstantVectorSeriesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIndex", wireType)
			}
			m.NodeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, InstantVectorSeriesData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstantVectorSeriesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstantVectorSeriesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstantVectorSeriesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Floats = append(m.Floats, mimirpb.Sample{})
			if err := m.Floats[len(m.Floats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Histograms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Histograms = append(m.Histograms, mimirpb.FloatHistogramPair{})
			if err := m.Histograms[len(m.Histograms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateQueryResponseRangeVectorSeriesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateQueryResponseRangeVectorSeriesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateQueryResponseRangeVectorSeriesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIndex", wireType)
			}
			m.NodeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
