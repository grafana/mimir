// SPDX-License-Identifier: AGPL-3.0-only
// Provenance-includes-location: https://github.com/cortexproject/cortex/blob/master/pkg/querier/queryrange/queryrange.proto
// Provenance-includes-license: Apache-2.0
// Provenance-includes-copyright: The Cortex Authors.

syntax = "proto3";

// Uses queryrange package to offer backwards compatibility with cached extents.
package queryrange;

option go_package = "querymiddleware";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "github.com/grafana/mimir/pkg/mimirpb/mimir.proto";
import "google/protobuf/any.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

message PrometheusRangeQueryRequest {
  string path = 1;
  int64 start = 2;
  int64 end = 3;
  int64 step = 4;
  google.protobuf.Duration timeout = 5 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
  string query = 6;
  Options options = 7 [(gogoproto.nullable) = false];

  // ID of the request used to correlate downstream requests and responses.
  int64 id = 8;

  // Hints that could be optionally attached to the request to pass down the stack.
  // These hints can be used to optimize the query execution.
  Hints hints = 9 [(gogoproto.nullable) = true];
}

message PrometheusInstantQueryRequest {
  string path = 1;
  int64 time = 2;
  string query = 3;
  Options options = 4 [(gogoproto.nullable) = false];

  // ID of the request used to correlate downstream requests and responses.
  int64 id = 5;

  // Hints that could be optionally attached to the request to pass down the stack.
  // These hints can be used to optimize the query execution.
  Hints hints = 6 [(gogoproto.nullable) = true];
}

message LabelMatchers {
  repeated LabelMatcher matcherSet = 1;
}

enum MatchType {
  EQUAL = 0;
  NOT_EQUAL = 1;
  REGEX_MATCH = 2;
  REGEX_NO_MATCH = 3;
}

message LabelMatcher {
  MatchType type = 1;
  string name = 2;
  string value = 3;
}

message PrometheusLabelNamesQueryRequest {
  string path = 1;

  int64 start = 2;
  int64 end = 3;

  // labelMatcherSets is a repeated field here in order to enable the representation
  // of labels queries which have not yet been split; the prometheus querier code
  // will eventually split requests like `?match[]=up&match[]=process_start_time_seconds{job="prometheus"}`
  // into separate queries, one for each matcher set
  repeated string labelMatcherSets = 4;

  // ID of the request used to correlate downstream requests and responses.
  int64 id = 5;
}

message PrometheusLabelValuesQueryRequest {
  string path = 1;

  string labelName = 2;

  int64 start = 3;
  int64 end = 4;

  // labelMatcherSets is a repeated field here in order to enable the representation
  // of labels queries which have not yet been split; the prometheus querier code
  // will eventually split requests like `?match[]=up&match[]=process_start_time_seconds{job="prometheus"}`
  // into separate queries, one for each matcher set
  repeated string labelMatcherSets = 5;

  // ID of the request used to correlate downstream requests and responses.
  int64 id = 6;
}

message PrometheusResponseHeader {
  string Name = 1 [(gogoproto.jsontag) = "-"];
  repeated string Values = 2 [(gogoproto.jsontag) = "-"];
}

message PrometheusResponse {
  string Status = 1 [(gogoproto.jsontag) = "status"];
  PrometheusData Data = 2 [(gogoproto.jsontag) = "data,omitempty"];
  string ErrorType = 3 [(gogoproto.jsontag) = "errorType,omitempty"];
  string Error = 4 [(gogoproto.jsontag) = "error,omitempty"];
  repeated PrometheusResponseHeader Headers = 5 [(gogoproto.jsontag) = "-"];
  repeated string Warnings = 6 [(gogoproto.jsontag) = "warnings,omitempty"];
}

message PrometheusData {
  string ResultType = 1 [(gogoproto.jsontag) = "resultType"];
  repeated SampleStream Result = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "result"];
}

message SampleStream {
  repeated cortexpb.LabelPair labels = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "metric", (gogoproto.customtype) = "github.com/grafana/mimir/pkg/mimirpb.LabelAdapter"];
  repeated cortexpb.Sample samples = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "values"];
  repeated cortexpb.FloatHistogramPair histograms = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "histograms"];
}

message CachedResponse  {
  string key = 1 [(gogoproto.jsontag) = "key"];

  // List of cached responses; non-overlapping and in order.
  repeated Extent extents = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "extents"];
}

message Extent  {
  int64 start = 1 [(gogoproto.jsontag) = "start"];
  int64 end = 2 [(gogoproto.jsontag) = "end"];
  // reserved the previous key to ensure cache transition
  reserved 3;
  string trace_id = 4 [(gogoproto.jsontag) = "-"];
  google.protobuf.Any response = 5 [(gogoproto.jsontag) = "response"];
  // Unix timestamp when the query with this response was executed.
  // If the response is combination of multiple queries over time, all of which had timestamp set, this is the timestamp of oldest query.
  // When merging extents and some of them have 0 query timestamp, we keep non-zero timestamp, if possible.
  int64 query_timestamp_ms = 6;
}

message Options {
  bool CacheDisabled = 1;
  bool ShardingDisabled = 2;
  int32 TotalShards = 3;
  bool InstantSplitDisabled = 4;
  // Instant split by time interval unit stored in nanoseconds (time.Duration unit in int64)
  int64 InstantSplitInterval = 5;
}

message Hints {
  // Total number of queries that are expected to to be executed to serve the original request.
  int32 TotalQueries = 1;
  // Estimated total number of series that a request might return.
  // This is a `oneof` instead of an `optional` because our tooling is on a version
  // that does not yet support optional fields in proto3.
  oneof CardinalityEstimate {
    uint64 EstimatedSeriesCount = 2;
  }
}

message QueryStatistics {
  uint64 EstimatedSeriesCount = 1;
}

// CachedHTTPResponse holds a generic HTTP response in the query results cache.
message CachedHTTPResponse  {
  // cacheKey contains the non-hashed cache key, used to guarantee there haven't
  // been any hashed cache key collision.
  string cache_key = 1;

  // statusCode contains the HTTP response status code.
  int32 status_code = 2;

  // headers contains the HTTP response headers.
  repeated CachedHTTPHeader headers = 3;

  // body contains the HTTP response body.
  bytes body = 4;
}

// CachedHTTPHeader holds a HTTP header.
message CachedHTTPHeader {
  string name = 1;
  string value = 2;
}
