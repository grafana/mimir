diff --git a/pkg/alertmanager/alertmanagerpb/alertmanager.pb.go b/pkg/alertmanager/alertmanagerpb/alertmanager.pb.go
index 506d8b74f8..ddce30b4a3 100644
--- a/pkg/alertmanager/alertmanagerpb/alertmanager.pb.go
+++ b/pkg/alertmanager/alertmanagerpb/alertmanager.pb.go
@@ -11,7 +11,6 @@ import (
 	proto "github.com/gogo/protobuf/proto"
 	httpgrpc "github.com/grafana/dskit/httpgrpc"
 	clusterpb "github.com/prometheus/alertmanager/cluster/clusterpb"
-	mimirpb "github.com/grafana/mimir/pkg/mimirpb"
 	grpc "google.golang.org/grpc"
 	codes "google.golang.org/grpc/codes"
 	status "google.golang.org/grpc/status"
@@ -232,8 +231,6 @@ func (m *ReadStateResponse) GetState() *clusterpb.FullState {
 
 // Copied from clusterpb to add mimirpb.BufferHolder.
 type Part struct {
-	mimirpb.BufferHolder
-
 	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
 	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
 }
@@ -488,7 +485,7 @@ const _ = grpc.SupportPackageIsVersion4
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
 type AlertmanagerClient interface {
-	HandleRequest(ctx context.Context, in *mimirpb.HTTPRequest, opts ...grpc.CallOption) (*httpgrpc.HTTPResponse, error)
+	HandleRequest(ctx context.Context, in *httpgrpc.HTTPRequest, opts ...grpc.CallOption) (*httpgrpc.HTTPResponse, error)
 	UpdateState(ctx context.Context, in *Part, opts ...grpc.CallOption) (*UpdateStateResponse, error)
 	ReadState(ctx context.Context, in *ReadStateRequest, opts ...grpc.CallOption) (*ReadStateResponse, error)
 }
@@ -501,7 +498,7 @@ func NewAlertmanagerClient(cc *grpc.ClientConn) AlertmanagerClient {
 	return &alertmanagerClient{cc}
 }
 
-func (c *alertmanagerClient) HandleRequest(ctx context.Context, in *mimirpb.HTTPRequest, opts ...grpc.CallOption) (*httpgrpc.HTTPResponse, error) {
+func (c *alertmanagerClient) HandleRequest(ctx context.Context, in *httpgrpc.HTTPRequest, opts ...grpc.CallOption) (*httpgrpc.HTTPResponse, error) {
 	out := new(httpgrpc.HTTPResponse)
 	err := c.cc.Invoke(ctx, "/alertmanagerpb.Alertmanager/HandleRequest", in, out, opts...)
 	if err != nil {
@@ -530,7 +527,7 @@ func (c *alertmanagerClient) ReadState(ctx context.Context, in *ReadStateRequest
 
 // AlertmanagerServer is the server API for Alertmanager service.
 type AlertmanagerServer interface {
-	HandleRequest(context.Context, *mimirpb.HTTPRequest) (*httpgrpc.HTTPResponse, error)
+	HandleRequest(context.Context, *httpgrpc.HTTPRequest) (*httpgrpc.HTTPResponse, error)
 	UpdateState(context.Context, *Part) (*UpdateStateResponse, error)
 	ReadState(context.Context, *ReadStateRequest) (*ReadStateResponse, error)
 }
@@ -539,7 +536,7 @@ type AlertmanagerServer interface {
 type UnimplementedAlertmanagerServer struct {
 }
 
-func (*UnimplementedAlertmanagerServer) HandleRequest(ctx context.Context, req *mimirpb.HTTPRequest) (*httpgrpc.HTTPResponse, error) {
+func (*UnimplementedAlertmanagerServer) HandleRequest(ctx context.Context, req *httpgrpc.HTTPRequest) (*httpgrpc.HTTPResponse, error) {
 	return nil, status.Errorf(codes.Unimplemented, "method HandleRequest not implemented")
 }
 func (*UnimplementedAlertmanagerServer) UpdateState(ctx context.Context, req *Part) (*UpdateStateResponse, error) {
@@ -554,7 +551,7 @@ func RegisterAlertmanagerServer(s *grpc.Server, srv AlertmanagerServer) {
 }
 
 func _Alertmanager_HandleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
-	in := new(mimirpb.HTTPRequest)
+	in := new(httpgrpc.HTTPRequest)
 	if err := dec(in); err != nil {
 		return nil, err
 	}
@@ -566,7 +563,7 @@ func _Alertmanager_HandleRequest_Handler(srv interface{}, ctx context.Context, d
 		FullMethod: "/alertmanagerpb.Alertmanager/HandleRequest",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
-		return srv.(AlertmanagerServer).HandleRequest(ctx, req.(*mimirpb.HTTPRequest))
+		return srv.(AlertmanagerServer).HandleRequest(ctx, req.(*httpgrpc.HTTPRequest))
 	}
 	return interceptor(ctx, in, info, handler)
 }
