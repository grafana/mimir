load 5m
	http_requests{job="api-server", instance="0", group="production"}	0+10x10
	http_requests{job="api-server", instance="1", group="production"}	0+20x10
	http_requests{job="api-server", instance="0", group="canary"}		0+30x10
	http_requests{job="api-server", instance="1", group="canary"}		0+40x10
	http_requests{job="api-server", instance="2", group="canary"}		0+50x10
	http_requests{job="api-server", instance="3", group="canary"}		0+60x10
	http_requests{job="api-server", instance="histogram_1", group="canary"}       {{schema:0 sum:10 count:10}}x11
	http_requests{job="api-server", instance="histogram_2", group="canary"}       {{schema:0 sum:20 count:20}}x11
	mixed{instance="1"}       {{schema:0 sum:20 count:20}}x2 0+10x5 {{schema:0 sum:20 count:20}}x2 0+10x2
	mixed{instance="2"}       0+10x5 {{schema:0 sum:20 count:20}}x2 0+10x2 {{schema:0 sum:20 count:20}}x2
	missing{instance="1"}       0+10x5 _ _ _ _ _ 0+10x2 _
	missing{instance="2"}       _ _ _ _ _ 0+10x5 _ 0+10x2 _
	nans{instance="1"}        NaN -NaN 0+10x5 NaN -NaN
	nans{instance="2"}        0+10x5 NaN -NaN NaN -NaN
	foo 1+1x10
	bar 0 1 0 -1 0 1 0 -1 0 1 0

eval instant at 50m count(limitk by (group) (0, http_requests))
    expect no_info
    expect no_warn
    # empty

eval instant at 50m count(limitk by (group) (-1, http_requests))
    expect no_info
    expect no_warn
    # empty

# Exercise k==1 special case (as sample is added before the main series loop).
eval instant at 50m count(limitk by (group) (1, http_requests) and http_requests)
    {} 2

eval instant at 50m count(limitk by (group) (2, http_requests) and http_requests)
    {} 4

eval instant at 50m count(limitk(100, http_requests) and http_requests)
    {} 8

# Test for histograms.
# k==1: verify that histogram is included in the result.
eval instant at 50m limitk(1, http_requests{instance="histogram_1"})
    {__name__="http_requests", group="canary", instance="histogram_1", job="api-server"} {{count:10 sum:10}}

eval range from 0 to 50m step 5m limitk(1, http_requests{instance="histogram_1"})
    {__name__="http_requests", group="canary", instance="histogram_1", job="api-server"} {{count:10 sum:10}}x10

# Histogram is included with mix of floats as well.
eval instant at 50m limitk(8, http_requests{instance=~"(histogram_2|0)"})
    {__name__="http_requests", group="canary", instance="histogram_2", job="api-server"} {{count:20 sum:20}}
    {__name__="http_requests", group="production", instance="0", job="api-server"} 100
    {__name__="http_requests", group="canary", instance="0", job="api-server"} 300

eval range from 0 to 50m step 5m limitk(8, http_requests{instance=~"(histogram_2|0)"})
    {__name__="http_requests", group="canary", instance="histogram_2", job="api-server"} {{count:20 sum:20}}x10
    {__name__="http_requests", group="production", instance="0", job="api-server"} 0+10x10
    {__name__="http_requests", group="canary", instance="0", job="api-server"} 0+30x10

# Test target a specific mixed series and validate a mixture of histogram and float points
eval instant at 0m limitk(1, mixed{instance="1"})
     {__name__="mixed", instance="1"} {{schema:0 sum:20 count:20}}

eval instant at 20m limitk(1, mixed{instance="1"})
     {__name__="mixed", instance="1"} 10

eval instant at 25m limitk(1, mixed{instance="1"})
      {__name__="mixed", instance="1"} 20

eval instant at 50m limitk(1, mixed{instance="1"})
       {__name__="mixed", instance="1"} {{schema:0 sum:20 count:20}}

eval instant at 0m count(limitk(1, mixed))
     {} 1

eval instant at 0m count(limitk(2, mixed))
     {} 2

eval instant at 20m count(limitk(1, mixed))
     {} 1

eval instant at 20m count(limitk(2, mixed))
     {} 2

eval instant at 50m count(limitk(1, mixed))
     {} 1

eval instant at 50m count(limitk(2, mixed))
     {} 2

eval instant at 0m limitk(1, missing{instance="1"})
     {__name__="missing", instance="1"} 0

eval instant at 0m limitk(1, missing{instance="2"})
     # no data

eval instant at 0m count(limitk(1, missing))
     {} 1

eval instant at 0m count(limitk(2, missing))
     {} 1

eval instant at 0m count(limitk(20, missing))
  {} 1

eval instant at 40m count(limitk(1, missing))
     {} 1

eval instant at 40m count(limitk(2, missing))
     {} 1

# A point where we have a value in both series
eval instant at 60m count(limitk(2, missing))
     {} 2

# No special treatment for nans
eval instant at 0m limitk(1, nans{instance="1"})
     {__name__="nans", instance="1"} NaN

eval instant at 0m count(limitk(2, nans))
    {} 2

eval instant at 50m count(limitk(2, http_requests{instance=~"histogram_[0-9]"}))
    {} 2

eval range from 0 to 50m step 5m count(limitk(2, http_requests{instance=~"histogram_[0-9]"}))
    {} 2+0x10

eval instant at 50m count(limitk(1000, http_requests{instance=~"histogram_[0-9]"}))
    {} 2

eval range from 0 to 50m step 5m count(limitk(1000, http_requests{instance=~"histogram_[0-9]"}))
    {} 2+0x10

# Bug #15971.
eval range from 0m to 50m step 5m count(limitk(scalar(foo), http_requests))
	{} 1 2 3 4 5 6 7 8 8 8 8


# limitk(2, ...) should always return a 2-count subset of the timeseries (hence the AND'ing)
eval range from 0 to 50m step 5m count(limitk(2, http_requests) and http_requests)
    {} 2+0x10