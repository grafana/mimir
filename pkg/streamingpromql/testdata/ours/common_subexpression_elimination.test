# SPDX-License-Identifier: AGPL-3.0-only

# The goal of these tests is not to ensure that common subexpressions are correctly identified
# (this is tested in the tests for the optimization pass), but to ensure that expressions containing
# common subexpressions are correctly evaluated.

load 1m
  float_metric{idx="1"} 1+1x10
  float_metric{idx="2"} 2+2x10
  float_metric{idx="3"} 3+3x10
  float_metric{idx="4"} 4+4x10
  float_metric{idx="5"} 5+5x10
  histogram_metric{idx="1"} {{count:1}}+{{count:1}}x10
  histogram_metric{idx="2"} {{count:2}}+{{count:2}}x10
  histogram_metric{idx="3"} {{count:3}}+{{count:3}}x10
  histogram_metric{idx="4"} {{count:4}}+{{count:4}}x10
  histogram_metric{idx="5"} {{count:5}}+{{count:5}}x10

# Floats
eval instant at 0 float_metric + float_metric
  {idx="1"} 2
  {idx="2"} 4
  {idx="3"} 6
  {idx="4"} 8
  {idx="5"} 10

eval range from 0 to 10m step 1m float_metric + float_metric
  {idx="1"} 2+2x10
  {idx="2"} 4+4x10
  {idx="3"} 6+6x10
  {idx="4"} 8+8x10
  {idx="5"} 10+10x10

# Histograms
eval instant at 0 histogram_metric + histogram_metric
  {idx="1"} {{count:2}}
  {idx="2"} {{count:4}}
  {idx="3"} {{count:6}}
  {idx="4"} {{count:8}}
  {idx="5"} {{count:10}}

eval range from 0 to 10m step 1m histogram_metric + histogram_metric
  {idx="1"} {{count:2}}+{{count:2}}x10
  {idx="2"} {{count:4}}+{{count:4}}x10
  {idx="3"} {{count:6}}+{{count:6}}x10
  {idx="4"} {{count:8}}+{{count:8}}x10
  {idx="5"} {{count:10}}+{{count:10}}x10

# Function over instant vector
eval instant at 0 ln(float_metric) + ln(float_metric)
  {idx="1"} 0
  {idx="2"} 1.3862943611198906
  {idx="3"} 2.197224577336219
  {idx="4"} 2.772588722239781
  {idx="5"} 3.2188758248682006

# Function over range vector
eval instant at 4m increase(float_metric[3m]) + increase(float_metric[3m])
  {idx="1"} 6
  {idx="2"} 12
  {idx="3"} 18
  {idx="4"} 24
  {idx="5"} 30

# Subquery where surrounding expression is also common
eval instant at 4m increase(float_metric[3m:30s]) + increase(float_metric[3m:30s])
  {idx="1"} 7.199999999999999
  {idx="2"} 14.399999999999999
  {idx="3"} 21.599999999999998
  {idx="4"} 28.799999999999997
  {idx="5"} 36

# Subquery where surrounding expression is not common
eval instant at 4m increase(float_metric[3m:30s]) + last_over_time(float_metric[3m:30s])
  {idx="1"} 8.6
  {idx="2"} 17.2
  {idx="3"} 25.799999999999997
  {idx="4"} 34.4
  {idx="5"} 43

# Test case where labels from common expression are modified to ensure that label slices aren't shared
eval instant at 0 label_replace(float_metric, "lhs", "$1", "idx", "(.*)") or (label_replace(float_metric, "rhs", "$1", "idx", "(.*)"))
  float_metric{lhs="1", idx="1"} 1
  float_metric{lhs="2", idx="2"} 2
  float_metric{lhs="3", idx="3"} 3
  float_metric{lhs="4", idx="4"} 4
  float_metric{lhs="5", idx="5"} 5
  float_metric{rhs="1", idx="1"} 1
  float_metric{rhs="2", idx="2"} 2
  float_metric{rhs="3", idx="3"} 3
  float_metric{rhs="4", idx="4"} 4
  float_metric{rhs="5", idx="5"} 5
