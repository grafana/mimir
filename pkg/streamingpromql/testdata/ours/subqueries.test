# SPDX-License-Identifier: AGPL-3.0-only

# Most cases for functions are covered already in the upstream test cases.
# These test cases cover scenarios not covered by the upstream test cases, such as range queries, or edge cases that are uniquely likely to cause issues in the streaming engine.

load 1m
  metric 0 4 3 6 -1 10

# Test that both ends of the time range selected are inclusive.
eval instant at 4m59s count_over_time(metric[4m:30s])
  {} 8

eval instant at 5m count_over_time(metric[4m:30s])
  {} 9

eval instant at 5m count_over_time(metric[3m59s:30s])
  {} 8

eval range from 4m59s to 5m step 1s count_over_time(metric[4m:30s])
  {} 8 9

eval range from 5m to 5m1s step 1s count_over_time(metric[3m59s:30s])
  {} 8 8

# Evaluation step should be aligned to T=0, not the query evaluation time.
eval instant at 5m max_over_time(metric[4m:3m])
  {} 6

eval range from 0 to 14m step 1m max_over_time(metric[4m:3m])
  {} 0 0 0 6 6 6 10 10 10 10 10 10 10 10 _

# Subquery with @
eval instant at 5m max_over_time(metric[2m:1m] @ 1m)
  {} 4

eval range from 0 to 5m step 1m max_over_time(metric[2m:1m] @ 1m)
  {} 4 4 4 4 4 4

eval instant at 4m max_over_time(metric[2m:1m] @ start())
  {} 6

eval range from 0 to 5m step 1m max_over_time(metric[2m:1m] @ start())
  {} 0 0 0 0 0 0

eval instant at 3m max_over_time(metric[2m:1m] @ end())
  {} 6

eval range from 0 to 5m step 1m max_over_time(metric[2m:1m] @ end())
  {} 10 10 10 10 10 10

# Subquery with 'offset'
# Start with query without offset to show non-offset results
eval range from 0 to 5m step 1m max_over_time(metric[2m:1m])
  {} 0 4 4 6 6 10

eval instant at 5m max_over_time(metric[2m:1m] offset 1m)
  {} 6

eval range from 0 to 5m step 1m max_over_time(metric[2m:1m] offset 1m)
  {} _ 0 4 4 6 6

# Subquery range smaller than subquery step
eval instant at 5m max_over_time(metric[1m:2m])
  {} -1

eval range from 0 to 5m step 1m max_over_time(metric[1m:2m])
  {} 0 0 3 3 -1 -1

# Nesting
#
# max_over_time[2m:1m] produces these results:
# T=0m     T=1m     T=2m     T=3m     T=4m     T=5m
# 0        4        4        6        6        10

eval instant at 5m sum_over_time(max_over_time(metric[2m:1m])[5m:90s])
  {} 16

eval range from 0 to 5m step 1m sum_over_time(max_over_time(metric[2m:1m])[5m:90s])
  {} 0 0 4 10 10 16
