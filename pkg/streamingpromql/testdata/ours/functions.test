# SPDX-License-Identifier: AGPL-3.0-only

# Most cases for functions are covered already in the upstream test cases.
# These test cases cover scenarios not covered by the upstream test cases, such as range queries, or edge cases that are uniquely likely to cause issues in the streaming engine.

load 1m
  some_metric{env="prod", cluster="eu"} 0+60x4
  some_metric{env="prod", cluster="us"} 0+120x4
  some_metric{env="test", cluster="eu"} 0+180x4
  some_metric{env="test", cluster="us"} 0+240x4
  some_metric_with_gaps 0 60 120 180 240 _ 2000 2120 2240
  some_metric_with_stale_marker 0 60 120 stale 240 300

# Range query with rate.
eval range from 0 to 4m step 1m rate(some_metric[1m])
  {env="prod", cluster="eu"} _ 1 1 1 1
  {env="prod", cluster="us"} _ 2 2 2 2
  {env="test", cluster="eu"} _ 3 3 3 3
  {env="test", cluster="us"} _ 4 4 4 4

# If no series are matched, we shouldn't return any results.
eval range from 0 to 4m step 1m rate(some_nonexistent_metric[1m])
  # Should return no results.

# Ensure we don't include points outside the range of each individual step.
#
# When evaluating a range selector, if there is no point with timestamp equal to the end of the range,
# the next point (from outside the range) will be included in the ring buffer passed to rate().
# So we need to ensure we ignore this.
#
# The first query below (with 1m) tests that we correctly skip evaluating rate() when there aren't enough points in the range.
# The second query below (with 2m) tests that we correctly pick the last point from the buffer if the last point in the buffer is outside the range.
eval range from 0 to 8m step 1m rate(some_metric_with_gaps[1m])
  {} _ 1 1 1 1 _ _ 2 2

eval range from 0 to 8m step 1m rate(some_metric_with_gaps[2m])
  {} _ 0.5 1 1 1 1 14.666666666666666 2 2

# Test that we handle staleness markers correctly.
eval range from 0 to 5m step 1m rate(some_metric_with_stale_marker[2m])
  {} _ 0.5 1 1 1 1

clear

# Test simple functions not covered by the upstream tests
load 1m
  some_metric{env="prod"} 0 0.5 -0.5 NaN -NaN 2.1 -2.1

eval range from 0 to 4m step 1m abs(some_metric)
  {env="prod"} 0 0.5 0.5 NaN NaN

eval range from 0 to 4m step 1m acos(some_metric)
  {env="prod"} 1.5707963267948966 1.0471975511965976 2.0943951023931957 NaN NaN

eval range from 0 to 4m step 1m asin(some_metric)
  {env="prod"} 0 0.5235987755982989 -0.5235987755982989 NaN NaN

eval range from 0 to 4m step 1m atanh(some_metric)
  {env="prod"} 0 0.5493061443340548 -0.5493061443340548 NaN NaN

eval range from 0 to 6m step 1m ceil(some_metric)
  {env="prod"} 0 1 -0 NaN -NaN 3 -2

eval range from 0 to 6m step 1m floor(some_metric)
  {env="prod"} 0 0 -1 NaN -NaN 2 -3

clear

load 1m
  some_metric{foo="bar"} 0 1 2 3 _ _ {{schema:3 sum:4 count:4 buckets:[1 2 1]}} {{schema:3 sum:5 count:3 buckets:[2 5 4]}}
  some_nhcb_metric{baz="bar"} {{schema:-53 sum:1 count:5 custom_values:[5 10] buckets:[1 4]}} {{schema:-53 sum:15 count:2 custom_values:[5 10] buckets:[0 2]}} {{schema:-53 sum:3 count:15 custom_values:[5 10] buckets:[7 8]}}
  some_inf_and_nan_metric{foo="baz"} 0 1 2 3 Inf Inf Inf NaN NaN NaN NaN 8 7 6

eval range from 0 to 7m step 1m count_over_time(some_metric[3m])
  {foo="bar"} 1 2 3 4 3 2 2 2

eval range from 0 to 7m step 1m count_over_time(some_metric[5s])
  {foo="bar"} 1 1 1 1 _ _ 1 1

eval range from 0 to 7m step 1m last_over_time(some_metric[3m])
  some_metric{foo="bar"} 0 1 2 3 3 3 {{schema:3 sum:4 count:4 buckets:[1 2 1]}} {{schema:3 sum:5 count:3 buckets:[2 5 4]}}

eval range from 0 to 7m step 1m last_over_time(some_metric[5s])
  some_metric{foo="bar"} 0 1 2 3 _ _ {{schema:3 sum:4 count:4 buckets:[1 2 1]}} {{schema:3 sum:5 count:3 buckets:[2 5 4]}}

eval range from 0 to 7m step 1m present_over_time(some_metric[3m])
  {foo="bar"} 1 1 1 1 1 1 1 1

eval range from 0 to 7m step 1m present_over_time(some_metric[5s])
  {foo="bar"} 1 1 1 1 _ _ 1 1

eval range from 0 to 7m step 1m min_over_time(some_metric[3m])
  {foo="bar"} 0 0 0 0 1 2 3 _

eval range from 0 to 7m step 1m min_over_time(some_metric[5s])
  {foo="bar"} 0 1 2 3 _ _ _ _

eval range from 0 to 16m step 1m min_over_time(some_inf_and_nan_metric[3m])
  {foo="baz"} 0 0 0 0 1 2 3 Inf Inf Inf NaN 8 7 6 6 6 6

eval range from 0 to 7m step 1m max_over_time(some_metric[3m])
  {foo="bar"} 0 1 2 3 3 3 3 _

eval range from 0 to 7m step 1m max_over_time(some_metric[5s])
  {foo="bar"} 0 1 2 3 _ _ _ _

eval range from 0 to 16m step 1m max_over_time(some_inf_and_nan_metric[3m])
  {foo="baz"} 0 1 2 3 Inf Inf Inf Inf Inf Inf NaN 8 8 8 8 7 6

eval_warn range from 0 to 10m step 1m sum_over_time(some_metric[3m])
  {foo="bar"} 0 1 3 6 6 5 _ {{schema:3 sum:9 count:7 buckets:[3 7 5]}} {{schema:3 sum:9 count:7 buckets:[3 7 5]}} {{schema:3 sum:9 count:7 buckets:[3 7 5]}} {{schema:3 sum:5 count:3 buckets:[2 5 4]}}

eval range from 0 to 5m step 1m sum_over_time(some_metric[3m])
  {foo="bar"} 0 1 3 6 6 5

eval range from 7m to 10m step 1m sum_over_time(some_metric[3m])
  {foo="bar"} {{schema:3 sum:9 count:7 buckets:[3 7 5]}} {{schema:3 sum:9 count:7 buckets:[3 7 5]}} {{schema:3 sum:9 count:7 buckets:[3 7 5]}} {{schema:3 sum:5 count:3 buckets:[2 5 4]}}

eval range from 0 to 7m step 1m sum_over_time(some_metric[5s])
  {foo="bar"} 0 1 2 3 _ _ {{schema:3 sum:4 count:4 buckets:[1 2 1]}} {{schema:3 sum:5 count:3 buckets:[2 5 4]}}

eval range from 0 to 2m step 1m sum_over_time(some_nhcb_metric[3m])
  {baz="bar"} {{schema:-53 sum:1 count:5 custom_values:[5 10] buckets:[1 4]}} {{schema:-53 sum:16 count:7 custom_values:[5 10] buckets:[1 6]}} {{schema:-53 sum:19 count:22 custom_values:[5 10] buckets:[8 14]}}

eval range from 0 to 16m step 1m sum_over_time(some_inf_and_nan_metric[3m])
  {foo="baz"} 0 1 3 6 Inf Inf Inf NaN NaN NaN NaN NaN NaN NaN 21 13 6

eval_warn range from 0 to 10m step 1m avg_over_time(some_metric[3m])
  {foo="bar"} 0 0.5 1 1.5 2 2.5 _ {{schema:3 sum:4.5 count:3.5 buckets:[1.5 3.5 2.5]}} {{schema:3 sum:4.5 count:3.5 buckets:[1.5 3.5 2.5]}} {{schema:3 sum:4.5 count:3.5 buckets:[1.5 3.5 2.5]}} {{schema:3 sum:5 count:3 buckets:[2 5 4]}}

eval range from 0 to 5m step 1m avg_over_time(some_metric[3m])
  {foo="bar"} 0 0.5 1 1.5 2 2.5

eval range from 7m to 10m step 1m avg_over_time(some_metric[3m])
  {foo="bar"} {{schema:3 sum:4.5 count:3.5 buckets:[1.5 3.5 2.5]}} {{schema:3 sum:4.5 count:3.5 buckets:[1.5 3.5 2.5]}} {{schema:3 sum:4.5 count:3.5 buckets:[1.5 3.5 2.5]}} {{schema:3 sum:5 count:3 buckets:[2 5 4]}}

eval range from 0 to 7m step 1m avg_over_time(some_metric[5s])
  {foo="bar"} 0 1 2 3 _ _ {{schema:3 sum:4 count:4 buckets:[1 2 1]}} {{schema:3 sum:5 count:3 buckets:[2 5 4]}}

eval range from 0 to 2m step 1m avg_over_time(some_nhcb_metric[3m])
  {baz="bar"} {{schema:-53 sum:1 count:5 custom_values:[5 10] buckets:[1 4]}} {{schema:-53 sum:8 count:3.5 custom_values:[5 10] buckets:[0.5 3]}} {{schema:-53 sum:6.333333333333334 count:7.333333333333333 custom_values:[5 10] buckets:[2.666666666666667 4.666666666666666]}}

eval range from 0 to 16m step 1m avg_over_time(some_inf_and_nan_metric[3m])
  {foo="baz"} 0 0.5 1 1.5 Inf Inf Inf NaN NaN NaN NaN NaN NaN NaN 7 6.5 6
