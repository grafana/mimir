# SPDX-License-Identifier: AGPL-3.0-only
# Provenance-includes-location: https://github.com/prometheus/prometheus/tree/main/promql/testdata/native_histograms.test
# Provenance-includes-license: Apache-2.0
# Provenance-includes-copyright: The Prometheus Authors

# buckets:[1 2 1] means 1 observation in the 1st bucket, 2 observations in the 2nd and 1 observation in the 3rd (total 4).
load 5m
	single_histogram {{schema:0 sum:5 count:4 buckets:[1 2 1]}} {{schema:0 sum:20 count:7 buckets:[9 10 1]}}

eval instant at 5m single_histogram
	{__name__="single_histogram"} {{schema:0 sum:20 count:7 buckets:[9 10 1]}}

eval range from 0 to 5m step 1m single_histogram
	{__name__="single_histogram"} {{schema:0 sum:5 count:4 buckets:[1 2 1]}} {{schema:0 sum:5 count:4 buckets:[1 2 1]}} {{schema:0 sum:5 count:4 buckets:[1 2 1]}} {{schema:0 sum:5 count:4 buckets:[1 2 1]}} {{schema:0 sum:5 count:4 buckets:[1 2 1]}} {{schema:0 sum:20 count:7 buckets:[9 10 1]}}

# histogram_count extracts the count property from the histogram.
eval range from 0 to 5m step 1m  histogram_count(single_histogram)
	{} 4 4 4 4 4 7

# histogram_sum extracts the sum property from the histogram.
eval range from 0 to 5m step 1m  histogram_sum(single_histogram)
	{} 5 5 5 5 5 20

clear

# Test metric with mixed floats and histograms
load 1m
	mixed_metric 1 2 3 {{schema:0 sum:5 count:4 buckets:[1 2 1]}} {{schema:0 sum:8 count:6 buckets:[1 4 1]}}

eval range from 0 to 5m step 1m mixed_metric
	{__name__="mixed_metric"} 1 2 3 {{count:4 sum:5 buckets:[1 2 1]}} {{count:6 sum:8 buckets:[1 4 1]}} {{count:6 sum:8 buckets:[1 4 1]}}

eval instant at 3m histogram_count(mixed_metric)
	{} 4

eval instant at 4m histogram_sum(mixed_metric)
	{} 8

eval range from 0 to 5m step 1m histogram_count(mixed_metric)
{} _ _ _ 4 6 6

eval range from 0 to 5m step 1m histogram_sum(mixed_metric)
{} _ _ _ 5 8 8

# histogram_count ignores any float values
eval instant at 2m histogram_count(mixed_metric)

# histogram_sum ignores any float values
eval instant at 2m histogram_sum(mixed_metric)

clear

# Test multiple histograms
load 5m
	route{path="one"} {{schema:0 sum:5 count:4 buckets:[1 2 1]}}
	route{path="two"} {{schema:0 sum:10 count:20 buckets:[9 10 1]}}
	route{path="three"} {{schema:0 sum:12 count:10 buckets:[3 2 5]}}

eval instant at 5m route
	route{path="one"} {{schema:0 sum:5 count:4 buckets:[1 2 1]}}
	route{path="two"} {{schema:0 sum:10 count:20 buckets:[9 10 1]}}
	route{path="three"} {{schema:0 sum:12 count:10 buckets:[3 2 5]}}

eval instant at 5m histogram_count(route)
	{path="one"} 4
	{path="two"} 20
	{path="three"} 10

eval instant at 5m histogram_sum(route)
	{path="one"} 5
	{path="two"} 10
	{path="three"} 12

clear

# TODO: Verify if these tests are correct. At the moment they match promql engine.
# See: https://github.com/prometheus/prometheus/issues/14172

# Test metric with mixed floats and histograms
load 1m
	mixed_metric 1 2 3 {{schema:0 sum:5 count:4 buckets:[1 2 1]}} {{schema:0 sum:8 count:6 buckets:[1 4 1]}} 4 5 {{schema:0 sum:18 count:10 buckets:[3 4 3]}}

# This is what we would expect, but it currently fails (disabled)
# eval range from 0 to 8m step 1m mixed_metric
#	{__name__="mixed_metric"} 1 2 3 {{count:4 sum:5 buckets:[1 2 1]}} {{count:6 sum:8 buckets:[1 4 1]}} 4 5 {{schema:0 sum:18 count:10 buckets:[3 4 3]}} {{schema:0 sum:18 count:10 buckets:[3 4 3]}}

# eval range from 0 to 8m step 1m histogram_count(mixed_metric)
# {} _ _ _ 4 6 _ _ 10 10

# eval range from 0 to 8m step 1m histogram_sum(mixed_metric)
# {} _ _ _ 5 8 _ _ 18 18

# Instead this is what we get from both engines.
eval range from 0 to 8m step 1m mixed_metric
	{__name__="mixed_metric"} 1 2 3 3 3 4 5 {{schema:0 sum:18 count:10 buckets:[3 4 3]}} {{schema:0 sum:18 count:10 buckets:[3 4 3]}}

eval range from 0 to 8m step 1m histogram_count(mixed_metric)
{} _ _ _ _ _ _ _ 10 10

eval range from 0 to 8m step 1m histogram_sum(mixed_metric)
{} _ _ _ _ _ _ _ 18 18

clear

# Test mixed schema rate
load 1m
	incr_histogram	{{schema:3 sum:4 count:4 buckets:[1 2 1]}}+{{schema:5 sum:2 count:1 buckets:[1] offset:1}}x10

eval instant at 5m rate(incr_histogram[5m])
	{} {{schema:3 count:0.016666666666666666 sum:0.03333333333333333 offset:1 buckets:[0.016666666666666666]}}

clear

# Test mixed metrics
load 1m
	incr_histogram	1 2 3 4 {{schema:5 sum:2 count:1 buckets:[1] offset:1}}

# Each element in v that contains a mix of float and native histogram samples within the range, will be missing from the result vector.
eval_warn instant at 5m rate(incr_histogram[5m])
  # We expect no results.

clear

# Test mixed metrics and range query
load 1m
	incr_histogram	1 2 {{schema:3 sum:4 count:4 buckets:[1 2 1]}}+{{schema:5 sum:2 count:1 buckets:[1] offset:1}}x3

# - The first value isn't enough to calculate a rate
# - The second value is a rate from two floats
# - The third value is a rate across a float and histogram (so no value returned)
# - The remaining values contain the rate across two histograms in the vector
eval_warn range from 0 to 4m step 1m rate(incr_histogram[1m])
	{} _ 0.016666666666666666 _ {{schema:3 count:0.016666666666666666 sum:0.03333333333333333 offset:1 buckets:[0.016666666666666666]}} {{schema:3 count:0.016666666666666666 sum:0.03333333333333333 offset:1 buckets:[0.016666666666666666]}}

clear

# Test multiple output samples covering the same input samples.
load 1m
	incr_histogram{env="a"}	{{sum:4 count:3 buckets:[1 2 1]}}+{{sum:2 count:1 buckets:[1] offset:1}}x10
	incr_histogram{env="a",cluster="a"}	{{sum:4 count:3 buckets:[1 2 1]}}+{{sum:2 count:1 buckets:[1] offset:1}}x10
	incr_histogram{env="b"}	{{sum:4 count:3 buckets:[1 2 1]}}+{{sum:2 count:1 buckets:[1] offset:1}}x10
	incr_histogram{env="b",cluster="a"}	{{sum:4 count:3 buckets:[1 2 1]}}+{{sum:2 count:1 buckets:[1] offset:1}}x10

eval range from 0 to 4m step 1m sum by (env) (rate(incr_histogram[5m]))
	{env="a"}	_ {{count:0.01 sum:0.02 offset:1 buckets:[0.01]}} {{count:0.016666666666666666 sum:0.03333333333333333 offset:1 buckets:[0.016666666666666666]}} {{count:0.023333333333333334 sum:0.04666666666666667 offset:1 buckets:[0.023333333333333334]}} {{count:0.03333333333333333 sum:0.06666666666666667 offset:1 buckets:[0.03333333333333333]}}
	{env="b"}	_ {{count:0.01 sum:0.02 offset:1 buckets:[0.01]}} {{count:0.016666666666666666 sum:0.03333333333333333 offset:1 buckets:[0.016666666666666666]}} {{count:0.023333333333333334 sum:0.04666666666666667 offset:1 buckets:[0.023333333333333334]}} {{count:0.03333333333333333 sum:0.06666666666666667 offset:1 buckets:[0.03333333333333333]}}

clear

# Test mixing exponential and custom buckets.
load 6m
  metric{series="exponential"}         {{sum:4 count:5 buckets:[1 3 1]}}  _                                                                 {{sum:4 count:5 buckets:[1 3 1]}}                                 {{sum:4 count:5 buckets:[1 3 1]}}  _
  metric{series="other-exponential"}   {{sum:3 count:4 buckets:[1 2 1]}}  _                                                                 {{sum:3 count:4 buckets:[1 2 1]}}                                 {{sum:3 count:4 buckets:[1 2 1]}}  _
  metric{series="custom"}              _                                  {{schema:-53 sum:1 count:1 custom_values:[5 10] buckets:[1 0]}}   {{schema:-53 sum:1 count:1 custom_values:[5 10] buckets:[1 0]}}   _                                  {{schema:-53 sum:2 count:1 custom_values:[5 10] buckets:[1 0]}}
  metric{series="other-custom"}        _                                  {{schema:-53 sum:15 count:2 custom_values:[5 10] buckets:[0 2]}}  {{schema:-53 sum:15 count:2 custom_values:[5 10] buckets:[0 2]}}  _                                  {{schema:-53 sum:16 count:2 custom_values:[5 10] buckets:[0 2]}}

# T=0: only exponential
# T=6: only custom
# T=12: mixed, should be ignored and emit a warning
# T=18: only exponential
# T=24: only custom
eval_warn range from 0 to 24m step 6m sum(metric)
  {} {{sum:7 count:9 buckets:[2 5 2]}} {{schema:-53 sum:16 count:3 custom_values:[5 10] buckets:[1 2]}} _ {{sum:7 count:9 buckets:[2 5 2]}} {{schema:-53 sum:18 count:3 custom_values:[5 10] buckets:[1 2]}}

clear

# Test incompatible custom bucket schemas.
load 6m
  metric{series="1"} _                                                               {{schema:-53 sum:1 count:1 custom_values:[5 10] buckets:[1 2]}} {{schema:-53 sum:1 count:1 custom_values:[5 10] buckets:[1 4]}}  {{schema:-53 sum:1 count:1 custom_values:[3] buckets:[1]}}
  metric{series="2"} {{schema:-53 sum:1 count:1 custom_values:[2] buckets:[1]}}      _                                                               {{schema:-53 sum:1 count:1 custom_values:[2] buckets:[1]}}       {{schema:-53 sum:1.5 count:3 custom_values:[3] buckets:[3]}}
  metric{series="3"} {{schema:-53 sum:1 count:1 custom_values:[5 10] buckets:[1 2]}} {{schema:-53 sum:1 count:1 custom_values:[5 10] buckets:[1 2]}} {{schema:-53 sum:1 count:1 custom_values:[5 10] buckets:[1 4]}}  {{schema:-53 sum:1.3 count:2 custom_values:[3] buckets:[2]}}

# T=0: incompatible, should be ignored and emit a warning
# T=6: compatible
# T=12: incompatible followed by compatible, should be ignored and emit a warning
# T=18: compatible
eval_warn range from 0 to 18m step 6m sum(metric)
  {} _ {{schema:-53 sum:2 count:2 custom_values:[5 10] buckets:[2 4]}} _ {{schema:-53 sum:3.8 count:6 custom_values:[3] buckets:[6]}}
