# SPDX-License-Identifier: AGPL-3.0-only

# Most cases for aggregation operators are covered already in the upstream test cases.
# These test cases cover scenarios not covered by the upstream test cases, such as range queries, or edge cases that are uniquely likely to cause issues in the streaming engine.

# Throughout this file, we use a 6m step to avoid the default 5m lookback window.

# Basic arithmetic operations, and atan2
load 6m
  left_side 11 21 32 42
  right_side 1 2 3 4

eval range from 0 to 24m step 6m left_side + right_side
  {} 12 23 35 46

eval range from 0 to 24m step 6m left_side - right_side
  {} 10 19 29 38

eval range from 0 to 24m step 6m left_side * right_side
  {} 11 42 96 168

eval range from 0 to 24m step 6m left_side / right_side
  {} 11 10.5 10.66666 10.5

eval range from 0 to 24m step 6m left_side % right_side
  {} 0 1 2 2

eval range from 0 to 24m step 6m left_side ^ right_side
  {} 11 441 32768 3111696

eval range from 0 to 24m step 6m left_side atan2 right_side
  {} 1.4801364395941514 1.4758446204521403 1.477319545636307 1.4758446204521403

clear

# One-to-one matching with all labels
load 6m
  left_side{env="prod", pod="pod-abc123"}     1    2    3    4
  left_side{env="dev", pod="pod-abc123"}     10   20   30   40
  left_side{env="dev", pod="pod-xyz456"}      9    9    9    9
  right_side{env="prod", pod="pod-abc123"}  100  200  300  400
  right_side{env="dev", pod="pod-abc123"}  1000 2000 3000 4000
  right_side{env="dev", pod="pod-mno789"}     5    5    5    5

# Matches on both sides: returns results for matching series, ignores non-matching series
eval range from 0 to 24m step 6m left_side - right_side
  {env="dev", pod="pod-abc123"} -990 -1980 -2970 -3960
  {env="prod", pod="pod-abc123"} -99 -198 -297 -396

# No series on either side: returns no results
eval range from 0 to 24m step 6m left_side_that_doesnt_exist + right_side_that_doesnt_exist

# No series on left side: returns no results
eval range from 0 to 24m step 6m left_side_that_doesnt_exist + right_side

# No series on right side: returns no results
eval range from 0 to 24m step 6m left_side + right_side_that_doesnt_exist

clear

# Series match on both sides, but points don't align
load 6m
  partial_left_side  1 2 _ _
  partial_right_side _ _ 3 4

eval range from 0 to 24m step 6m partial_left_side + partial_right_side

clear

# One-to-one matching with "on" and "ignoring"
load 6m
  left_side{env="test", pod="a"} 1 2 3
  left_side{env="prod", pod="b"} 4 5 6
  right_side{env="prod", pod="a"} 10 20 30
  right_side{env="test", pod="b"} 40 50 60

eval range from 0 to 24m step 6m left_side - on(env) right_side
  {env="prod"} -6 -15 -24
  {env="test"} -39 -48 -57

eval range from 0 to 24m step 6m left_side - ignoring(pod) right_side
  {env="prod"} -6 -15 -24
  {env="test"} -39 -48 -57

clear

# One-to-one matching with "on" and "ignoring" with multiple labels.
load 6m
  left_side{env="test", pod="a", group="foo"} 1 2 3
  left_side{env="test", pod="b", group="bar"} 4 5 6
  left_side{env="prod", pod="a", group="baz"} 7 8 9
  right_side{env="test", pod="a", group="bar"} 10 20 30
  right_side{env="test", pod="b", group="baz"} 40 50 60
  right_side{env="prod", pod="a", group="foo"} 70 80 90

eval range from 0 to 24m step 6m left_side - on(env, pod) right_side
  {env="prod", pod="a"} -63 -72 -81
  {env="test", pod="a"} -9 -18 -27
  {env="test", pod="b"} -36 -45 -54

eval range from 0 to 24m step 6m left_side - ignoring(env, pod) right_side
  {group="baz"} -33 -42 -51
  {group="bar"} -6 -15 -24
  {group="foo"} -69 -78 -87

clear

# One-to-one matching, but different series match at different time steps, or not at all
load 6m
  left_side{env="test", bar="a"}  1 _ 3 _ _ 6 _
  left_side{env="test", bar="b"}  _ 2 _ 4 _ _ _
  right_side{env="test", foo="0"} 2 2 _ _ _ _ 2
  right_side{env="test", foo="1"} _ _ 3 3 _ _ _

eval range from 0 to 42m step 6m left_side - on (env) right_side
  {env="test"} -1 0 0 1 _ _ _

clear

# One-to-one matching with multiple matches on left side
load 6m
  left_side{env="test", pod="a"} 1 2 3
  left_side{env="test", pod="b"} 4 5 6
  left_side{env="test", pod="c"} 7 8 9
  left_side{env="test", pod="d"} _ 10 11
  right_side{env="test"} 100 200 300

eval_fail range from 0 to 42m step 6m left_side * on (env) right_side
  expected_fail_regexp (multiple matches for labels: many-to-one matching must be explicit \(group_left/group_right\)|found duplicate series for the match group \{env="test"\} on the left side of the operation at timestamp 1970-01-01T00:00:00Z: \{__name__="left_side", env="test", pod="a"\} and \{__name__="left_side", env="test", pod="b"\})

clear

# One-to-one matching with multiple matches on right side
load 6m
  left_side{env="test"} 100 200 300
  right_side{env="test", pod="a"} 1 2 3
  right_side{env="test", pod="b"} 4 5 6
  right_side{env="test", pod="c"} 7 8 9
  right_side{env="test", pod="d"} _ 10 11

eval_fail range from 0 to 42m step 6m left_side * on (env) right_side
  expected_fail_regexp (found duplicate series for the match group \{env="test"\} on the right hand-side of the operation: \[\{__name__="right_side", env="test", pod="(a|b|c)"\}, \{__name__="right_side", env="test", pod="(a|b|c)"\}\];many-to-many matching not allowed: matching labels must be unique on one side|found duplicate series for the match group \{env="test"\} on the right side of the operation at timestamp 1970-01-01T00:00:00Z: \{__name__="right_side", env="test", pod="a"\} and \{__name__="right_side", env="test", pod="b"\})

clear

# One-to-one matching with more series on left side than right (and vice-versa)
# We have an optimsation that favours the smaller side, these tests ensure it behaves correctly.
load 1m
  single_series{env="prod"} 100 200 300
  many_series{env="canary"} 10 20 30
  many_series{env="prod"} 40 50 60
  many_series{env="test"} 70 80 90

eval range from 0 to 2m step 1m single_series - many_series
  {env="prod"} 60 150 240

eval range from 0 to 2m step 1m many_series - single_series
  {env="prod"} -60 -150 -240

clear

# Binary operations on native histograms
load 5m
  first_histogram{job="test"}    {{schema:0 sum:5 count:4 buckets:[1 2 1]}}
  second_histogram{job="test"}   {{schema:0 sum:10 count:6 buckets:[1 2 1]}}
  third_histogram{job="control"} {{schema:0 sum:15 count:5 buckets:[3 4 2]}}
  metric{job="test"}             2

eval instant at 5m first_histogram + second_histogram
  {job="test"} {{schema:0 sum:15 count:10 buckets:[2 4 2]}}

eval instant at 5m second_histogram - first_histogram
  {job="test"} {{schema:0 sum:5 count:2 buckets:[0 0 0]}}

# Two histograms multiplied together result in a float 0
eval instant at 5m first_histogram * second_histogram
  {job="test"} 0

# Cannot divide a histogram by a histogram
eval instant at 5m first_histogram / second_histogram
  {job="test"} NaN

# Histogram multiplied by float
eval instant at 5m first_histogram * metric
  {job="test"} {{schema:0 count:8 sum:10 buckets:[2 4 2]}}

# Works in either order
eval instant at 5m metric * first_histogram
  {job="test"} {{schema:0 count:8 sum:10 buckets:[2 4 2]}}

# Histogram divide by float
eval instant at 5m first_histogram / metric
  {job="test"} {{schema:0 count:2 sum:2.5 buckets:[0.5 1 0.5]}}

# Float divided by histogram is equivalent to "float / 0"
eval instant at 5m metric / first_histogram
  {job="test"} +Inf

# Histogram + float is equivalent to "0 + float"
eval instant at 5m first_histogram + metric
  {job="test"} 2

# Histogram - float is equivalent to "0 - float"
eval instant at 5m first_histogram - metric
  {job="test"} -2

# Histogram atan2 float is equivalent to "0 atan2 float"
eval instant at 5m first_histogram atan2 metric
  {job="test"} 0

# Histogram to the power of a histogram is equivalent to "0 ^ 0"
eval instant at 5m first_histogram ^ second_histogram
  {job="test"} 1

# Histogram to power of a float is equivalent to "0 ^ float"
eval instant at 5m first_histogram ^ metric
  {job="test"} 0

# Float to power of histogram is equivalent to "float ^ 0"
eval instant at 5m metric ^ first_histogram
  {job="test"} 1

# Histogram mod histogram is equivalent to "0 % 0"
eval instant at 5m first_histogram % second_histogram
  {job="test"} NaN

# Histogram mod float is equivalent to "0 % float"
eval instant at 5m first_histogram % metric
  {job="test"} 0

# Float mod histogram is equivalent to "float % 0"
eval instant at 5m metric % first_histogram
  {job="test"} NaN


clear

# One-to-one matching with all labels
load 5m
  first_histogram{env="prod",pod="pod-abc123"}    {{schema:0 sum:5 count:4 buckets:[1 2 1]}}
  first_histogram{env="dev",pod="pod-abc123"}     {{schema:0 sum:10 count:5 buckets:[2 3 2]}}
  first_histogram{env="dev",pod="pod-xyz456"}     {{schema:0 sum:9 count:5 buckets:[2 3 1]}}
  second_histogram{env="prod",pod="pod-abc123"}   {{schema:0 sum:5 count:4 buckets:[1 2 1]}}
  second_histogram{env="dev",pod="pod-abc123"}    {{schema:0 sum:10 count:5 buckets:[2 3 2]}}
  second_histogram{env="dev",pod="pod-mno789"}    {{schema:0 sum:5 count:4 buckets:[1 1 1]}}

eval instant at 5m first_histogram + second_histogram
  {env="prod",pod="pod-abc123"} {{schema:0 sum:10 count:8 buckets:[2 4 2]}}
  {env="dev",pod="pod-abc123"}  {{schema:0 sum:20 count:10 buckets:[4 6 4]}}

eval instant at 5m second_histogram - first_histogram
  {env="prod",pod="pod-abc123"} {{schema:0 sum:0 count:0 buckets:[0 0 0]}}
  {env="dev",pod="pod-abc123"}  {{schema:0 sum:0 count:0 buckets:[0 0 0]}}

clear

load 5m
  first_histogram{job="test"}    {{schema:0 sum:6 count:3 buckets:[1 2 3]}} {{schema:0 sum:12 count:6 buckets:[2 4 6]}} {{schema:0 sum:18 count:9 buckets:[3 6 9]}} {{schema:0 sum:24 count:12 buckets:[4 8 12]}}
  second_histogram{job="test"}   {{schema:0 sum:6 count:3 buckets:[1 2 3]}} {{schema:0 sum:12 count:6 buckets:[2 4 6]}} {{schema:0 sum:18 count:9 buckets:[3 6 9]}} {{schema:0 sum:24 count:12 buckets:[4 8 12]}}

# Test range query with native histograms
eval range from 0 to 15m step 5m first_histogram + second_histogram
  {job="test"} {{schema:0 sum:12 count:6 buckets:[2 4 6]}} {{schema:0 sum:24 count:12 buckets:[4 8 12]}} {{schema:0 sum:36 count:18 buckets:[6 12 18]}} {{schema:0 sum:48 count:24 buckets:[8 16 24]}}

clear

# Mixed float and histogram metrics
# These tests are affected by https://github.com/prometheus/prometheus/issues/14172
# whereby the histograms followed by a float are ignored and the lookback float value is used.
# For example, in "another_mixed", at T=5m it has the lookback value of 10, and at T=5min the lookback value is _.
load 5m
  mixed_metric{job="test"}  10 1                                           2                                           3                                            {{schema:0 sum:6 count:3 buckets:[1 2 3]}} {{schema:0 sum:12 count:6 buckets:[2 4 6]}}
  another_mixed{job="test"} 10 {{schema:0 sum:12 count:6 buckets:[2 4 6]}} {{schema:0 sum:12 count:6 buckets:[2 4 6]}} 4                                            5                                          {{schema:0 sum:12 count:6 buckets:[2 4 6]}}
#                           @0 @5m                                         @10m                                        @15m                                         @20m                                       @25m

eval range from 0 to 25m step 5m mixed_metric + another_mixed
  {job="test"}              20 11                                          _                                           7                                            5                                          {{schema:0 sum:24 count:12 buckets:[4 8 12]}}

eval range from 0 to 25m step 5m mixed_metric - another_mixed
  {job="test"}              0  -9                                          _                                           -1                                           -5                                         {{schema:0 sum:0 count:0}}

eval range from 0 to 25m step 5m mixed_metric * another_mixed
  {job="test"}              100 10                                         _                                           12                                           {{schema:0 sum:30 count:15 buckets:[5 10 15]}} 0

eval range from 0 to 25m step 5m mixed_metric / another_mixed
  {job="test"}              1  0.1                                         _                                           0.75                                         {{schema:0 sum:1.2 count:0.6 buckets:[0.2 0.4 0.6]}} NAN

clear

# Test mixtures of histograms with exponential and custom buckets.
load 1m
  left   {{schema:0 sum:1 count:1 buckets:[1]}}  {{schema:0 sum:1 count:1 buckets:[1]}}                           {{schema:-53 sum:1 count:3 custom_values:[2 3] buckets:[1 2]}}   {{schema:-53 sum:1 count:3 custom_values:[2 3] buckets:[1 2]}}
  right  {{schema:0 sum:3 count:4 buckets:[4]}}  {{schema:-53 sum:1 count:3 custom_values:[5 10] buckets:[1 2]}}  {{schema:-53 sum:1 count:3 custom_values:[5 10] buckets:[1 2]}}  {{schema:-53 sum:2 count:6 custom_values:[2 3] buckets:[5 2]}}

eval_warn range from 0 to 3m step 1m left + right
  {}     {{schema:0 sum:4 count:5 buckets:[5]}}  _                                                                _                                                                {{schema:-53 sum:3 count:9 custom_values:[2 3] buckets:[6 4]}}
