// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eliminate_common_subexpressions.proto

package plan

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DuplicateDetails struct {
}

func (m *DuplicateDetails) Reset()      { *m = DuplicateDetails{} }
func (*DuplicateDetails) ProtoMessage() {}
func (*DuplicateDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_34955519bdf25afe, []int{0}
}
func (m *DuplicateDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DuplicateDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DuplicateDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DuplicateDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DuplicateDetails.Merge(m, src)
}
func (m *DuplicateDetails) XXX_Size() int {
	return m.Size()
}
func (m *DuplicateDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_DuplicateDetails.DiscardUnknown(m)
}

var xxx_messageInfo_DuplicateDetails proto.InternalMessageInfo

func (*DuplicateDetails) XXX_MessageName() string {
	return "plan.DuplicateDetails"
}
func init() {
	proto.RegisterType((*DuplicateDetails)(nil), "plan.DuplicateDetails")
}

func init() {
	proto.RegisterFile("eliminate_common_subexpressions.proto", fileDescriptor_34955519bdf25afe)
}

var fileDescriptor_34955519bdf25afe = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x24, 0xcc, 0x31, 0x0a, 0xc2, 0x30,
	0x18, 0x05, 0xe0, 0x04, 0xc4, 0xa1, 0x93, 0x74, 0x74, 0xf8, 0x07, 0xc1, 0xd1, 0x76, 0x70, 0x71,
	0x96, 0xde, 0xa3, 0x24, 0x25, 0xd6, 0x40, 0x92, 0x3f, 0x34, 0x09, 0x38, 0x7a, 0x04, 0x8f, 0xe1,
	0x51, 0x3a, 0x76, 0xec, 0x68, 0x93, 0xc5, 0xb1, 0x47, 0x10, 0xe2, 0xf6, 0x3e, 0x1e, 0xef, 0x15,
	0x47, 0xa1, 0xa4, 0x96, 0x86, 0x79, 0xd1, 0x76, 0xa8, 0x35, 0x9a, 0xd6, 0x05, 0x2e, 0x1e, 0x76,
	0x10, 0xce, 0x49, 0x34, 0xae, 0xb2, 0x03, 0x7a, 0x2c, 0x37, 0x56, 0x31, 0xb3, 0x3f, 0xf5, 0xd2,
	0xdf, 0x03, 0xaf, 0x3a, 0xd4, 0x75, 0x8f, 0x3d, 0xd6, 0xb9, 0xe4, 0xe1, 0x96, 0x95, 0x91, 0xd3,
	0x7f, 0x74, 0x28, 0x8b, 0x5d, 0x13, 0xac, 0x92, 0x1d, 0xf3, 0xa2, 0x11, 0x9e, 0x49, 0xe5, 0xae,
	0x97, 0x69, 0x01, 0x32, 0x2f, 0x40, 0xd6, 0x05, 0xe8, 0x33, 0x02, 0x7d, 0x47, 0x20, 0x63, 0x04,
	0x3a, 0x45, 0xa0, 0x9f, 0x08, 0xf4, 0x1b, 0x81, 0xac, 0x11, 0xe8, 0x2b, 0x01, 0x19, 0x13, 0xd0,
	0x29, 0x01, 0x99, 0x13, 0x10, 0xbe, 0xcd, 0xa7, 0xe7, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa7,
	0x42, 0x37, 0x56, 0xb2, 0x00, 0x00, 0x00,
}

func (this *DuplicateDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&plan.DuplicateDetails{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEliminateCommonSubexpressions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DuplicateDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DuplicateDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DuplicateDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintEliminateCommonSubexpressions(dAtA []byte, offset int, v uint64) int {
	offset -= sovEliminateCommonSubexpressions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DuplicateDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovEliminateCommonSubexpressions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEliminateCommonSubexpressions(x uint64) (n int) {
	return sovEliminateCommonSubexpressions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DuplicateDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DuplicateDetails{`,
		`}`,
	}, "")
	return s
}
func valueToStringEliminateCommonSubexpressions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DuplicateDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEliminateCommonSubexpressions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DuplicateDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DuplicateDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEliminateCommonSubexpressions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEliminateCommonSubexpressions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEliminateCommonSubexpressions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEliminateCommonSubexpressions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEliminateCommonSubexpressions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEliminateCommonSubexpressions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEliminateCommonSubexpressions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEliminateCommonSubexpressions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEliminateCommonSubexpressions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEliminateCommonSubexpressions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEliminateCommonSubexpressions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEliminateCommonSubexpressions = fmt.Errorf("proto: unexpected end of group")
)
