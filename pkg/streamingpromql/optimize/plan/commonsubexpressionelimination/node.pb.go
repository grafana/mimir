// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package commonsubexpressionelimination

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DuplicateDetails struct {
}

func (m *DuplicateDetails) Reset()      { *m = DuplicateDetails{} }
func (*DuplicateDetails) ProtoMessage() {}
func (*DuplicateDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}
func (m *DuplicateDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DuplicateDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DuplicateDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DuplicateDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DuplicateDetails.Merge(m, src)
}
func (m *DuplicateDetails) XXX_Size() int {
	return m.Size()
}
func (m *DuplicateDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_DuplicateDetails.DiscardUnknown(m)
}

var xxx_messageInfo_DuplicateDetails proto.InternalMessageInfo

func (*DuplicateDetails) XXX_MessageName() string {
	return "commonsubexpressionelimination.DuplicateDetails"
}
func init() {
	proto.RegisterType((*DuplicateDetails)(nil), "commonsubexpressionelimination.DuplicateDetails")
}

func init() { proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7) }

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x24, 0xcc, 0x21, 0x92, 0x83, 0x30,
	0x18, 0xc5, 0xf1, 0xc4, 0xac, 0x40, 0xed, 0x20, 0x57, 0x3c, 0xb1, 0x7e, 0x41, 0xac, 0xa9, 0xee,
	0x70, 0x11, 0x42, 0x53, 0x9a, 0x19, 0x92, 0x8f, 0x21, 0xc9, 0x4c, 0x65, 0x8f, 0xd0, 0x63, 0xf4,
	0x28, 0x48, 0x24, 0xb2, 0x7c, 0x31, 0x95, 0x1c, 0xa1, 0x33, 0xa9, 0x7b, 0x7f, 0xf1, 0x7e, 0x45,
	0xe1, 0xe8, 0xa4, 0xab, 0x71, 0xa2, 0x40, 0x25, 0x3a, 0xb2, 0x96, 0x9c, 0x8f, 0x4a, 0x5f, 0xc7,
	0x49, 0x7b, 0x6f, 0xc8, 0xe9, 0xc1, 0x58, 0xe3, 0xda, 0x60, 0xc8, 0xfd, 0xfc, 0xf5, 0x26, 0x5c,
	0xa2, 0xaa, 0x3a, 0xb2, 0x75, 0x4f, 0x3d, 0xd5, 0xf9, 0xa6, 0xe2, 0x39, 0x57, 0x8e, 0xbc, 0x3e,
	0xdc, 0x6f, 0x59, 0x7c, 0x37, 0x71, 0x1c, 0x4c, 0xd7, 0x06, 0xdd, 0xe8, 0xd0, 0x9a, 0xc1, 0x1f,
	0x0f, 0xcb, 0x06, 0xb1, 0x6e, 0x10, 0xfb, 0x06, 0x79, 0x63, 0xc8, 0x07, 0x43, 0xcc, 0x0c, 0xb9,
	0x30, 0xe4, 0x93, 0x21, 0x5f, 0x0c, 0xb1, 0x33, 0xe4, 0x3d, 0x41, 0xcc, 0x09, 0x72, 0x49, 0x10,
	0x6b, 0x82, 0x50, 0x5f, 0x19, 0xfd, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x02, 0x93, 0x1e, 0x60,
	0xb1, 0x00, 0x00, 0x00,
}

func (this *DuplicateDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&commonsubexpressionelimination.DuplicateDetails{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DuplicateDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DuplicateDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DuplicateDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DuplicateDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DuplicateDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DuplicateDetails{`,
		`}`,
	}, "")
	return s
}
func valueToStringNode(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DuplicateDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DuplicateDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DuplicateDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
