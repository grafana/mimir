// SPDX-License-Identifier: AGPL-3.0-only
// Provenance-includes-location: https://github.com/thanos-io/thanos/blob/main/pkg/store/storepb/prompb/types.proto
// Provenance-includes-license: Apache-2.0
// Provenance-includes-copyright: The Thanos Authors.
// Provenance-includes-location: https://github.com/prometheus/prometheus
// Provenance-includes-license: Apache-2.0
// Provenance-includes-copyright: The Prometheus Authors.

syntax = "proto3";
package prometheus_copy;

option go_package = "prompb";

import "gogoproto/gogo.proto";
import "github.com/grafana/mimir/pkg/storegateway/labelpb/types.proto";

// Do not generate XXX fields to reduce memory footprint and opening a door
// for zero-copy casts to/from prometheus data types.
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

message MetricMetadata {
  enum MetricType {
    MetricType_UNKNOWN = 0;
    MetricType_COUNTER = 1;
    MetricType_GAUGE = 2;
    MetricType_HISTOGRAM = 3;
    MetricType_GAUGEHISTOGRAM = 4;
    MetricType_SUMMARY = 5;
    MetricType_INFO = 6;
    MetricType_STATESET = 7;
  }

  // Represents the metric type, these match the set from Prometheus.
  // Refer to pkg/textparse/interface.go for details.
  MetricType type = 1;
  string metric_family_name = 2;
  string help = 4;
  string unit = 5;
}

message Sample {
  double value = 1;
  int64 timestamp = 2;
}

message Exemplar {
  // Optional, can be empty.
  repeated thanos.Label labels = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/grafana/mimir/pkg/storegateway/labelpb.ZLabel"];
  double value = 2;
  // timestamp is in ms format, see pkg/timestamp/timestamp.go for
  // conversion from time.Time to Prometheus timestamp.
  int64 timestamp = 3;
}

// TimeSeries represents samples and labels for a single time series.
message TimeSeries {
  // Labels have to be sorted by label names and without duplicated label names.
  // TODO(bwplotka): Don't use zero copy ZLabels, see https://github.com/thanos-io/thanos/pull/3279 for details.
  repeated thanos.Label labels = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/grafana/mimir/pkg/storegateway/labelpb.ZLabel"];
  repeated Sample samples = 2 [(gogoproto.nullable) = false];
  repeated Exemplar exemplars = 3 [(gogoproto.nullable) = false];
}

// Matcher specifies a rule, which can match or set of labels or not.
message LabelMatcher {
  enum Type {
    LabelMatcher_EQ = 0;
    LabelMatcher_NEQ = 1;
    LabelMatcher_RE = 2;
    LabelMatcher_NRE = 3;
  }
  Type type = 1;
  string name = 2;
  string value = 3;
}

message ReadHints {
  int64 step_ms = 1;  // Query step size in milliseconds.
  string func = 2;    // String representation of surrounding function or aggregation.
  int64 start_ms = 3; // Start time in milliseconds.
  int64 end_ms = 4;   // End time in milliseconds.
  repeated string grouping = 5; // List of label names used in aggregation.
  bool by = 6; // Indicate whether it is without or by.
  int64 range_ms = 7; // Range vector selector range in milliseconds.
}

// Chunk represents a TSDB chunk.
// Time range [min, max] is inclusive.
message Chunk {
  int64 min_time_ms = 1;
  int64 max_time_ms = 2;

  // We require this to match chunkenc.Encoding.
  enum Encoding {
    Chunk_UNKNOWN = 0;
    Chunk_XOR = 1;
  }
  Encoding type = 3;
  bytes data = 4;
}

// ChunkedSeries represents single, encoded time series.
message ChunkedSeries {
  // Labels should be sorted.
  repeated thanos.Label labels = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/grafana/mimir/pkg/storegateway/labelpb.ZLabel"];
  // Chunks will be in start time order and may overlap.
  repeated Chunk chunks = 2 [(gogoproto.nullable) = false];
}
