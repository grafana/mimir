// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: indexheader.proto

package storepb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HeadersLazyLoadedTrackerState struct {
	LazyLoadedBlocks map[string]int64 `protobuf:"bytes,1,rep,name=lazy_loaded_blocks,json=lazyLoadedBlocks,proto3" json:"lazy_loaded_blocks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	UserId           string           `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Checksum         int32            `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *HeadersLazyLoadedTrackerState) Reset()      { *m = HeadersLazyLoadedTrackerState{} }
func (*HeadersLazyLoadedTrackerState) ProtoMessage() {}
func (*HeadersLazyLoadedTrackerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bb3ac7de06266d4, []int{0}
}
func (m *HeadersLazyLoadedTrackerState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeadersLazyLoadedTrackerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeadersLazyLoadedTrackerState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeadersLazyLoadedTrackerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeadersLazyLoadedTrackerState.Merge(m, src)
}
func (m *HeadersLazyLoadedTrackerState) XXX_Size() int {
	return m.Size()
}
func (m *HeadersLazyLoadedTrackerState) XXX_DiscardUnknown() {
	xxx_messageInfo_HeadersLazyLoadedTrackerState.DiscardUnknown(m)
}

var xxx_messageInfo_HeadersLazyLoadedTrackerState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HeadersLazyLoadedTrackerState)(nil), "thanos.HeadersLazyLoadedTrackerState")
	proto.RegisterMapType((map[string]int64)(nil), "thanos.HeadersLazyLoadedTrackerState.LazyLoadedBlocksEntry")
}

func init() { proto.RegisterFile("indexheader.proto", fileDescriptor_9bb3ac7de06266d4) }

var fileDescriptor_9bb3ac7de06266d4 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xb1, 0x4a, 0xc3, 0x40,
	0x1c, 0xc6, 0xef, 0x1a, 0xda, 0xea, 0xb9, 0xd4, 0x43, 0x31, 0x14, 0xfc, 0x53, 0x9c, 0xba, 0x98,
	0x82, 0x2e, 0xa2, 0x93, 0x15, 0x41, 0xa1, 0x53, 0x74, 0x72, 0x29, 0x97, 0xe4, 0x6c, 0x42, 0xd2,
	0x5e, 0xb9, 0xbb, 0x88, 0xe9, 0xe4, 0xe0, 0x03, 0xf8, 0x18, 0x3e, 0x4a, 0xc7, 0x8e, 0x1d, 0xcd,
	0x75, 0x71, 0xec, 0x23, 0x48, 0x2f, 0xa0, 0x20, 0xe2, 0xf6, 0xff, 0x7d, 0x1f, 0xdf, 0xef, 0xe0,
	0xc8, 0x6e, 0x32, 0x89, 0xf8, 0x73, 0xcc, 0x59, 0xc4, 0xa5, 0x37, 0x95, 0x42, 0x0b, 0xda, 0xd0,
	0x31, 0x9b, 0x08, 0xd5, 0x3e, 0x1e, 0x25, 0x3a, 0xce, 0x03, 0x2f, 0x14, 0xe3, 0xde, 0x48, 0x8c,
	0x44, 0xcf, 0xd6, 0x41, 0xfe, 0x68, 0xc9, 0x82, 0xbd, 0xaa, 0xd9, 0xd1, 0x6b, 0x8d, 0x1c, 0xde,
	0x58, 0x8f, 0x1a, 0xb0, 0x59, 0x31, 0x10, 0x2c, 0xe2, 0xd1, 0xbd, 0x64, 0x61, 0xca, 0xe5, 0x9d,
	0x66, 0x9a, 0xd3, 0x84, 0xd0, 0x8c, 0xcd, 0x8a, 0x61, 0x66, 0xab, 0x61, 0x90, 0x89, 0x30, 0x55,
	0x2e, 0xee, 0x38, 0xdd, 0x9d, 0x93, 0x0b, 0xaf, 0x7a, 0xd5, 0xfb, 0x57, 0xe1, 0xfd, 0xc4, 0x7d,
	0xbb, 0xbe, 0x9e, 0x68, 0x59, 0xf8, 0xad, 0xec, 0x57, 0x4c, 0x0f, 0x48, 0x33, 0x57, 0x5c, 0x0e,
	0x93, 0xc8, 0xad, 0x75, 0x70, 0x77, 0xdb, 0x6f, 0x6c, 0xf0, 0x36, 0xa2, 0x6d, 0xb2, 0x15, 0xc6,
	0x3c, 0x4c, 0x55, 0x3e, 0x76, 0x9d, 0x0e, 0xee, 0xd6, 0xfd, 0x6f, 0x6e, 0x5f, 0x91, 0xfd, 0x3f,
	0xfd, 0xb4, 0x45, 0x9c, 0x94, 0x17, 0x2e, 0xb6, 0xa6, 0xcd, 0x49, 0xf7, 0x48, 0xfd, 0x89, 0x65,
	0x39, 0xb7, 0x76, 0xc7, 0xaf, 0xe0, 0xbc, 0x76, 0x86, 0xfb, 0x97, 0xf3, 0x12, 0xd0, 0xa2, 0x04,
	0xb4, 0x2c, 0x01, 0xad, 0x4b, 0xc0, 0x2f, 0x06, 0xf0, 0xbb, 0x01, 0x3c, 0x37, 0x80, 0x17, 0x06,
	0xf0, 0x87, 0x01, 0xfc, 0x69, 0x00, 0xad, 0x0d, 0xe0, 0xb7, 0x15, 0xa0, 0xc5, 0x0a, 0xd0, 0x72,
	0x05, 0xe8, 0xa1, 0xa9, 0xb4, 0x90, 0x7c, 0x1a, 0x04, 0x0d, 0xfb, 0xa1, 0xa7, 0x5f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xc5, 0x64, 0x97, 0x4d, 0x9c, 0x01, 0x00, 0x00,
}

func (this *HeadersLazyLoadedTrackerState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeadersLazyLoadedTrackerState)
	if !ok {
		that2, ok := that.(HeadersLazyLoadedTrackerState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LazyLoadedBlocks) != len(that1.LazyLoadedBlocks) {
		return false
	}
	for i := range this.LazyLoadedBlocks {
		if this.LazyLoadedBlocks[i] != that1.LazyLoadedBlocks[i] {
			return false
		}
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.Checksum != that1.Checksum {
		return false
	}
	return true
}
func (this *HeadersLazyLoadedTrackerState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&storepb.HeadersLazyLoadedTrackerState{")
	keysForLazyLoadedBlocks := make([]string, 0, len(this.LazyLoadedBlocks))
	for k, _ := range this.LazyLoadedBlocks {
		keysForLazyLoadedBlocks = append(keysForLazyLoadedBlocks, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLazyLoadedBlocks)
	mapStringForLazyLoadedBlocks := "map[string]int64{"
	for _, k := range keysForLazyLoadedBlocks {
		mapStringForLazyLoadedBlocks += fmt.Sprintf("%#v: %#v,", k, this.LazyLoadedBlocks[k])
	}
	mapStringForLazyLoadedBlocks += "}"
	if this.LazyLoadedBlocks != nil {
		s = append(s, "LazyLoadedBlocks: "+mapStringForLazyLoadedBlocks+",\n")
	}
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Checksum: "+fmt.Sprintf("%#v", this.Checksum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringIndexheader(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HeadersLazyLoadedTrackerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeadersLazyLoadedTrackerState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeadersLazyLoadedTrackerState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Checksum != 0 {
		i = encodeVarintIndexheader(dAtA, i, uint64(m.Checksum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintIndexheader(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LazyLoadedBlocks) > 0 {
		for k := range m.LazyLoadedBlocks {
			v := m.LazyLoadedBlocks[k]
			baseI := i
			i = encodeVarintIndexheader(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintIndexheader(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintIndexheader(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintIndexheader(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndexheader(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HeadersLazyLoadedTrackerState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LazyLoadedBlocks) > 0 {
		for k, v := range m.LazyLoadedBlocks {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovIndexheader(uint64(len(k))) + 1 + sovIndexheader(uint64(v))
			n += mapEntrySize + 1 + sovIndexheader(uint64(mapEntrySize))
		}
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovIndexheader(uint64(l))
	}
	if m.Checksum != 0 {
		n += 1 + sovIndexheader(uint64(m.Checksum))
	}
	return n
}

func sovIndexheader(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndexheader(x uint64) (n int) {
	return sovIndexheader(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HeadersLazyLoadedTrackerState) String() string {
	if this == nil {
		return "nil"
	}
	keysForLazyLoadedBlocks := make([]string, 0, len(this.LazyLoadedBlocks))
	for k, _ := range this.LazyLoadedBlocks {
		keysForLazyLoadedBlocks = append(keysForLazyLoadedBlocks, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLazyLoadedBlocks)
	mapStringForLazyLoadedBlocks := "map[string]int64{"
	for _, k := range keysForLazyLoadedBlocks {
		mapStringForLazyLoadedBlocks += fmt.Sprintf("%v: %v,", k, this.LazyLoadedBlocks[k])
	}
	mapStringForLazyLoadedBlocks += "}"
	s := strings.Join([]string{`&HeadersLazyLoadedTrackerState{`,
		`LazyLoadedBlocks:` + mapStringForLazyLoadedBlocks + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Checksum:` + fmt.Sprintf("%v", this.Checksum) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIndexheader(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HeadersLazyLoadedTrackerState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexheader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeadersLazyLoadedTrackerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeadersLazyLoadedTrackerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LazyLoadedBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexheader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexheader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexheader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LazyLoadedBlocks == nil {
				m.LazyLoadedBlocks = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIndexheader
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIndexheader
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthIndexheader
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthIndexheader
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIndexheader
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipIndexheader(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthIndexheader
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LazyLoadedBlocks[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexheader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexheader
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexheader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			m.Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexheader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checksum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndexheader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexheader
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndexheader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndexheader(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndexheader
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexheader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexheader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndexheader
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthIndexheader
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIndexheader
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIndexheader(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthIndexheader
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIndexheader = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndexheader   = fmt.Errorf("proto: integer overflow")
)
