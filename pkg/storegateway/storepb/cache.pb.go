// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cache.proto

package storepb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grafana/mimir/pkg/mimirpb"
	github_com_grafana_mimir_pkg_mimirpb "github.com/grafana/mimir/pkg/mimirpb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CachedSeries struct {
	Series      []github_com_grafana_mimir_pkg_mimirpb.PreallocatingMetric `protobuf:"bytes,1,rep,name=series,proto3,customtype=github.com/grafana/mimir/pkg/mimirpb.PreallocatingMetric" json:"series"`
	ShardIndex  uint64                                                     `protobuf:"varint,2,opt,name=shardIndex,proto3" json:"shardIndex,omitempty"`
	ShardCount  uint64                                                     `protobuf:"varint,3,opt,name=shardCount,proto3" json:"shardCount,omitempty"`
	MatchersKey string                                                     `protobuf:"bytes,4,opt,name=matchersKey,proto3" json:"matchersKey,omitempty"`
}

func (m *CachedSeries) Reset()      { *m = CachedSeries{} }
func (*CachedSeries) ProtoMessage() {}
func (*CachedSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{0}
}
func (m *CachedSeries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CachedSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CachedSeries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CachedSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CachedSeries.Merge(m, src)
}
func (m *CachedSeries) XXX_Size() int {
	return m.Size()
}
func (m *CachedSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_CachedSeries.DiscardUnknown(m)
}

var xxx_messageInfo_CachedSeries proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CachedSeries)(nil), "thanos.CachedSeries")
}

func init() { proto.RegisterFile("cache.proto", fileDescriptor_5fca3b110c9bbf3a) }

var fileDescriptor_5fca3b110c9bbf3a = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x50, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0xb6, 0x69, 0x55, 0x84, 0xcb, 0x80, 0x32, 0x45, 0x1d, 0xae, 0x11, 0x53, 0x17, 0x12, 0x04,
	0x0b, 0x23, 0xb4, 0x13, 0x42, 0x48, 0xa8, 0x6c, 0x6c, 0xb6, 0xeb, 0x26, 0x86, 0x26, 0x8e, 0x6c,
	0x57, 0x2a, 0x1b, 0x8f, 0xc0, 0x63, 0xf0, 0x28, 0x1d, 0x3b, 0x56, 0x08, 0x55, 0xc4, 0x5d, 0x18,
	0xfb, 0x08, 0x08, 0x07, 0xa1, 0x8c, 0x4c, 0xf7, 0xfd, 0xdc, 0x77, 0x9f, 0x74, 0xa4, 0xcb, 0x29,
	0xcf, 0x44, 0x5c, 0x6a, 0x65, 0x55, 0xd0, 0xb1, 0x19, 0x2d, 0x94, 0xe9, 0x9d, 0xa4, 0xd2, 0x66,
	0x73, 0x16, 0x73, 0x95, 0x27, 0xa9, 0x4a, 0x55, 0xe2, 0x6d, 0x36, 0x9f, 0x7a, 0xe6, 0x89, 0x47,
	0x75, 0xac, 0x77, 0xda, 0x5c, 0xd7, 0x74, 0x4a, 0x0b, 0x9a, 0xe4, 0x32, 0x97, 0x3a, 0x29, 0x9f,
	0xd2, 0x1a, 0x95, 0xac, 0x9e, 0x75, 0xe2, 0xf8, 0x03, 0x93, 0xc3, 0xd1, 0x4f, 0xf1, 0xe4, 0x5e,
	0x68, 0x29, 0x4c, 0xf0, 0x48, 0x3a, 0xc6, 0xa3, 0x10, 0x47, 0xad, 0x41, 0xf7, 0xec, 0x28, 0xe6,
	0x4a, 0x5b, 0xb1, 0x28, 0x59, 0x7c, 0x2b, 0xac, 0x96, 0x7c, 0x78, 0xb9, 0xdc, 0xf4, 0xd1, 0xfb,
	0xa6, 0x7f, 0xf1, 0x9f, 0xb2, 0xf8, 0x4e, 0x0b, 0x3a, 0x9b, 0x29, 0x4e, 0xad, 0x2c, 0xd2, 0xfa,
	0xc2, 0xf8, 0xb7, 0x21, 0x00, 0x42, 0x4c, 0x46, 0xf5, 0xe4, 0xba, 0x98, 0x88, 0x45, 0xb8, 0x17,
	0xe1, 0x41, 0x7b, 0xdc, 0x50, 0xfe, 0xfc, 0x91, 0x9a, 0x17, 0x36, 0x6c, 0x35, 0x7c, 0xaf, 0x04,
	0x11, 0xe9, 0xe6, 0xd4, 0xf2, 0x4c, 0x68, 0x73, 0x23, 0x9e, 0xc3, 0x76, 0x84, 0x07, 0x07, 0xe3,
	0xa6, 0x34, 0xbc, 0x5a, 0x56, 0x80, 0x56, 0x15, 0xa0, 0x75, 0x05, 0x68, 0x57, 0x01, 0x7e, 0x71,
	0x80, 0xdf, 0x1c, 0xe0, 0xa5, 0x03, 0xbc, 0x72, 0x80, 0x3f, 0x1d, 0xe0, 0x2f, 0x07, 0x68, 0xe7,
	0x00, 0xbf, 0x6e, 0x01, 0xad, 0xb6, 0x80, 0xd6, 0x5b, 0x40, 0x0f, 0xfb, 0xc6, 0x2a, 0x2d, 0x4a,
	0xc6, 0x3a, 0xfe, 0x51, 0xe7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xce, 0x5a, 0x4a, 0xa0,
	0x01, 0x00, 0x00,
}

func (this *CachedSeries) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CachedSeries)
	if !ok {
		that2, ok := that.(CachedSeries)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Series) != len(that1.Series) {
		return false
	}
	for i := range this.Series {
		if !this.Series[i].Equal(that1.Series[i]) {
			return false
		}
	}
	if this.ShardIndex != that1.ShardIndex {
		return false
	}
	if this.ShardCount != that1.ShardCount {
		return false
	}
	if this.MatchersKey != that1.MatchersKey {
		return false
	}
	return true
}
func (this *CachedSeries) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&storepb.CachedSeries{")
	s = append(s, "Series: "+fmt.Sprintf("%#v", this.Series)+",\n")
	s = append(s, "ShardIndex: "+fmt.Sprintf("%#v", this.ShardIndex)+",\n")
	s = append(s, "ShardCount: "+fmt.Sprintf("%#v", this.ShardCount)+",\n")
	s = append(s, "MatchersKey: "+fmt.Sprintf("%#v", this.MatchersKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCache(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CachedSeries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CachedSeries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CachedSeries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MatchersKey) > 0 {
		i -= len(m.MatchersKey)
		copy(dAtA[i:], m.MatchersKey)
		i = encodeVarintCache(dAtA, i, uint64(len(m.MatchersKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.ShardCount != 0 {
		i = encodeVarintCache(dAtA, i, uint64(m.ShardCount))
		i--
		dAtA[i] = 0x18
	}
	if m.ShardIndex != 0 {
		i = encodeVarintCache(dAtA, i, uint64(m.ShardIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Series) > 0 {
		for iNdEx := len(m.Series) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Series[iNdEx].Size()
				i -= size
				if _, err := m.Series[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintCache(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCache(dAtA []byte, offset int, v uint64) int {
	offset -= sovCache(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CachedSeries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Series) > 0 {
		for _, e := range m.Series {
			l = e.Size()
			n += 1 + l + sovCache(uint64(l))
		}
	}
	if m.ShardIndex != 0 {
		n += 1 + sovCache(uint64(m.ShardIndex))
	}
	if m.ShardCount != 0 {
		n += 1 + sovCache(uint64(m.ShardCount))
	}
	l = len(m.MatchersKey)
	if l > 0 {
		n += 1 + l + sovCache(uint64(l))
	}
	return n
}

func sovCache(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCache(x uint64) (n int) {
	return sovCache(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CachedSeries) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CachedSeries{`,
		`Series:` + fmt.Sprintf("%v", this.Series) + `,`,
		`ShardIndex:` + fmt.Sprintf("%v", this.ShardIndex) + `,`,
		`ShardCount:` + fmt.Sprintf("%v", this.ShardCount) + `,`,
		`MatchersKey:` + fmt.Sprintf("%v", this.MatchersKey) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCache(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CachedSeries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CachedSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CachedSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Series = append(m.Series, github_com_grafana_mimir_pkg_mimirpb.PreallocatingMetric{})
			if err := m.Series[len(m.Series)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardIndex", wireType)
			}
			m.ShardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardCount", wireType)
			}
			m.ShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchersKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchersKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCache(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCache
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCache
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCache
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCache
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCache(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCache
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCache = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCache   = fmt.Errorf("proto: integer overflow")
)
