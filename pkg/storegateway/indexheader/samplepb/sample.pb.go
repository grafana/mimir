// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sample.proto

package samplepb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Sample struct {
	Version             int64               `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	IndexVersion        int64               `protobuf:"varint,2,opt,name=indexVersion,proto3" json:"indexVersion,omitempty"`
	Symbols             *Symbols            `protobuf:"bytes,3,opt,name=symbols,proto3" json:"symbols,omitempty"`
	PostingsOffsetTable *PostingOffsetTable `protobuf:"bytes,4,opt,name=postingsOffsetTable,proto3" json:"postingsOffsetTable,omitempty"`
}

func (m *Sample) Reset()      { *m = Sample{} }
func (*Sample) ProtoMessage() {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{0}
}
func (m *Sample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return m.Size()
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Sample) GetIndexVersion() int64 {
	if m != nil {
		return m.IndexVersion
	}
	return 0
}

func (m *Sample) GetSymbols() *Symbols {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *Sample) GetPostingsOffsetTable() *PostingOffsetTable {
	if m != nil {
		return m.PostingsOffsetTable
	}
	return nil
}

type Symbols struct {
	Offsets []int64 `protobuf:"varint,1,rep,packed,name=offsets,proto3" json:"offsets,omitempty"`
	Seen    int64   `protobuf:"varint,2,opt,name=seen,proto3" json:"seen,omitempty"`
}

func (m *Symbols) Reset()      { *m = Symbols{} }
func (*Symbols) ProtoMessage() {}
func (*Symbols) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{1}
}
func (m *Symbols) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Symbols) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Symbols.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Symbols) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Symbols.Merge(m, src)
}
func (m *Symbols) XXX_Size() int {
	return m.Size()
}
func (m *Symbols) XXX_DiscardUnknown() {
	xxx_messageInfo_Symbols.DiscardUnknown(m)
}

var xxx_messageInfo_Symbols proto.InternalMessageInfo

func (m *Symbols) GetOffsets() []int64 {
	if m != nil {
		return m.Offsets
	}
	return nil
}

func (m *Symbols) GetSeen() int64 {
	if m != nil {
		return m.Seen
	}
	return 0
}

type PostingOffsetTable struct {
	Postings map[string]*PostingValueOffsets `protobuf:"bytes,1,rep,name=postings,proto3" json:"postings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PostingOffsetTable) Reset()      { *m = PostingOffsetTable{} }
func (*PostingOffsetTable) ProtoMessage() {}
func (*PostingOffsetTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{2}
}
func (m *PostingOffsetTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostingOffsetTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostingOffsetTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostingOffsetTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostingOffsetTable.Merge(m, src)
}
func (m *PostingOffsetTable) XXX_Size() int {
	return m.Size()
}
func (m *PostingOffsetTable) XXX_DiscardUnknown() {
	xxx_messageInfo_PostingOffsetTable.DiscardUnknown(m)
}

var xxx_messageInfo_PostingOffsetTable proto.InternalMessageInfo

func (m *PostingOffsetTable) GetPostings() map[string]*PostingValueOffsets {
	if m != nil {
		return m.Postings
	}
	return nil
}

type PostingValueOffsets struct {
	Offsets       []*PostingOffset `protobuf:"bytes,1,rep,name=offsets,proto3" json:"offsets,omitempty"`
	LastValOffset int64            `protobuf:"varint,2,opt,name=lastValOffset,proto3" json:"lastValOffset,omitempty"`
}

func (m *PostingValueOffsets) Reset()      { *m = PostingValueOffsets{} }
func (*PostingValueOffsets) ProtoMessage() {}
func (*PostingValueOffsets) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{3}
}
func (m *PostingValueOffsets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostingValueOffsets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostingValueOffsets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostingValueOffsets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostingValueOffsets.Merge(m, src)
}
func (m *PostingValueOffsets) XXX_Size() int {
	return m.Size()
}
func (m *PostingValueOffsets) XXX_DiscardUnknown() {
	xxx_messageInfo_PostingValueOffsets.DiscardUnknown(m)
}

var xxx_messageInfo_PostingValueOffsets proto.InternalMessageInfo

func (m *PostingValueOffsets) GetOffsets() []*PostingOffset {
	if m != nil {
		return m.Offsets
	}
	return nil
}

func (m *PostingValueOffsets) GetLastValOffset() int64 {
	if m != nil {
		return m.LastValOffset
	}
	return 0
}

type PostingOffset struct {
	Value    string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	TableOff int64  `protobuf:"varint,2,opt,name=tableOff,proto3" json:"tableOff,omitempty"`
}

func (m *PostingOffset) Reset()      { *m = PostingOffset{} }
func (*PostingOffset) ProtoMessage() {}
func (*PostingOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{4}
}
func (m *PostingOffset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostingOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostingOffset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostingOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostingOffset.Merge(m, src)
}
func (m *PostingOffset) XXX_Size() int {
	return m.Size()
}
func (m *PostingOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_PostingOffset.DiscardUnknown(m)
}

var xxx_messageInfo_PostingOffset proto.InternalMessageInfo

func (m *PostingOffset) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PostingOffset) GetTableOff() int64 {
	if m != nil {
		return m.TableOff
	}
	return 0
}

func init() {
	proto.RegisterType((*Sample)(nil), "sample.Sample")
	proto.RegisterType((*Symbols)(nil), "sample.Symbols")
	proto.RegisterType((*PostingOffsetTable)(nil), "sample.PostingOffsetTable")
	proto.RegisterMapType((map[string]*PostingValueOffsets)(nil), "sample.PostingOffsetTable.PostingsEntry")
	proto.RegisterType((*PostingValueOffsets)(nil), "sample.postingValueOffsets")
	proto.RegisterType((*PostingOffset)(nil), "sample.postingOffset")
}

func init() { proto.RegisterFile("sample.proto", fileDescriptor_2141552de9bf11d0) }

var fileDescriptor_2141552de9bf11d0 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0xaf, 0xd2, 0x40,
	0x14, 0xed, 0x50, 0xa4, 0x78, 0x0b, 0x91, 0x8c, 0x9a, 0x34, 0xd5, 0x4c, 0x48, 0xe3, 0xa2, 0x2e,
	0x84, 0x58, 0x37, 0x46, 0x13, 0x13, 0x89, 0xee, 0x4c, 0x30, 0xc5, 0x10, 0xe3, 0xae, 0xd5, 0x69,
	0x6d, 0x2c, 0x9d, 0x86, 0x29, 0x44, 0x76, 0xfe, 0x04, 0x7f, 0x86, 0x3f, 0xc0, 0xbd, 0x5b, 0x97,
	0x2c, 0x59, 0x3e, 0xca, 0xe6, 0x2d, 0xf9, 0x09, 0x2f, 0xcc, 0x74, 0x78, 0xf4, 0x7d, 0xec, 0xee,
	0xb9, 0xe7, 0x9e, 0x7b, 0xcf, 0x9c, 0x0c, 0x74, 0x78, 0x30, 0xcb, 0x53, 0x3a, 0xc8, 0xe7, 0xac,
	0x60, 0xb8, 0x25, 0x91, 0xfd, 0x2c, 0x4e, 0x8a, 0xef, 0x8b, 0x70, 0xf0, 0x95, 0xcd, 0x86, 0x31,
	0x8b, 0xd9, 0x50, 0xd0, 0xe1, 0x22, 0x12, 0x48, 0x00, 0x51, 0x49, 0x99, 0xf3, 0x0f, 0x41, 0x6b,
	0x22, 0x94, 0xd8, 0x02, 0x63, 0x49, 0xe7, 0x3c, 0x61, 0x99, 0x85, 0xfa, 0xc8, 0xd5, 0x7d, 0x05,
	0xb1, 0x03, 0x9d, 0x24, 0xfb, 0x46, 0x7f, 0x4e, 0x2b, 0xba, 0x21, 0xe8, 0x5a, 0x0f, 0x3f, 0x05,
	0x83, 0xaf, 0x66, 0x21, 0x4b, 0xb9, 0xa5, 0xf7, 0x91, 0x6b, 0x7a, 0xf7, 0x06, 0x95, 0xbf, 0x89,
	0x6c, 0xfb, 0x8a, 0xc7, 0x1f, 0xe0, 0x7e, 0xce, 0x78, 0x91, 0x64, 0x31, 0x1f, 0x47, 0x11, 0xa7,
	0xc5, 0xa7, 0x20, 0x4c, 0xa9, 0xd5, 0x14, 0x32, 0x5b, 0xc9, 0x3e, 0xca, 0x91, 0x93, 0x09, 0xff,
	0x26, 0x99, 0xf3, 0x1a, 0x8c, 0xea, 0x02, 0x7e, 0x0c, 0x06, 0x13, 0x0c, 0xb7, 0x50, 0x5f, 0x77,
	0xf5, 0x51, 0xa3, 0x87, 0x7c, 0xd5, 0xc2, 0x18, 0x9a, 0x9c, 0x52, 0xe5, 0x5e, 0xd4, 0xce, 0x5f,
	0x04, 0xf8, 0xfa, 0x21, 0xfc, 0x0e, 0xda, 0xea, 0x94, 0xd8, 0x64, 0x7a, 0xee, 0xed, 0xb6, 0x54,
	0x8b, 0xbf, 0xcf, 0x8a, 0xf9, 0xca, 0x3f, 0x2a, 0xed, 0xcf, 0xd0, 0xad, 0x51, 0xb8, 0x07, 0xfa,
	0x0f, 0xba, 0x12, 0xe9, 0xde, 0xf5, 0x0f, 0x25, 0x7e, 0x0e, 0x77, 0x96, 0x41, 0xba, 0xa0, 0xc2,
	0x94, 0xe9, 0x3d, 0x52, 0x57, 0xaa, 0x1d, 0xd3, 0x03, 0x27, 0x4f, 0x71, 0x5f, 0x4e, 0xbe, 0x6a,
	0xbc, 0x44, 0x4e, 0x7a, 0x4c, 0xf0, 0x74, 0x02, 0x0f, 0xeb, 0xef, 0x37, 0xbd, 0x87, 0x57, 0xf6,
	0xc9, 0xc1, 0xcb, 0x48, 0x9e, 0x40, 0x37, 0x0d, 0x78, 0x31, 0x0d, 0x52, 0xc9, 0x54, 0xd9, 0xd4,
	0x9b, 0xce, 0x5b, 0xe8, 0xd6, 0xf4, 0xf8, 0x81, 0x72, 0x2d, 0x5f, 0x22, 0x01, 0xb6, 0xa1, 0x5d,
	0x1c, 0xf2, 0x18, 0x47, 0x51, 0xb5, 0xe7, 0x88, 0x47, 0x6f, 0xd6, 0x5b, 0xa2, 0x6d, 0xb6, 0x44,
	0xdb, 0x6f, 0x09, 0xfa, 0x55, 0x12, 0xf4, 0xa7, 0x24, 0xe8, 0x7f, 0x49, 0xd0, 0xba, 0x24, 0xe8,
	0xac, 0x24, 0xe8, 0xbc, 0x24, 0xda, 0xbe, 0x24, 0xe8, 0xf7, 0x8e, 0x68, 0xeb, 0x1d, 0xd1, 0x36,
	0x3b, 0xa2, 0x7d, 0x69, 0x4b, 0xf7, 0x79, 0x18, 0xb6, 0xc4, 0x6f, 0x7d, 0x71, 0x11, 0x00, 0x00,
	0xff, 0xff, 0xde, 0x50, 0x51, 0x50, 0xf4, 0x02, 0x00, 0x00,
}

func (this *Sample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Sample)
	if !ok {
		that2, ok := that.(Sample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.IndexVersion != that1.IndexVersion {
		return false
	}
	if !this.Symbols.Equal(that1.Symbols) {
		return false
	}
	if !this.PostingsOffsetTable.Equal(that1.PostingsOffsetTable) {
		return false
	}
	return true
}
func (this *Symbols) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Symbols)
	if !ok {
		that2, ok := that.(Symbols)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Offsets) != len(that1.Offsets) {
		return false
	}
	for i := range this.Offsets {
		if this.Offsets[i] != that1.Offsets[i] {
			return false
		}
	}
	if this.Seen != that1.Seen {
		return false
	}
	return true
}
func (this *PostingOffsetTable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PostingOffsetTable)
	if !ok {
		that2, ok := that.(PostingOffsetTable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Postings) != len(that1.Postings) {
		return false
	}
	for i := range this.Postings {
		if !this.Postings[i].Equal(that1.Postings[i]) {
			return false
		}
	}
	return true
}
func (this *PostingValueOffsets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PostingValueOffsets)
	if !ok {
		that2, ok := that.(PostingValueOffsets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Offsets) != len(that1.Offsets) {
		return false
	}
	for i := range this.Offsets {
		if !this.Offsets[i].Equal(that1.Offsets[i]) {
			return false
		}
	}
	if this.LastValOffset != that1.LastValOffset {
		return false
	}
	return true
}
func (this *PostingOffset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PostingOffset)
	if !ok {
		that2, ok := that.(PostingOffset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.TableOff != that1.TableOff {
		return false
	}
	return true
}
func (this *Sample) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&samplepb.Sample{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "IndexVersion: "+fmt.Sprintf("%#v", this.IndexVersion)+",\n")
	if this.Symbols != nil {
		s = append(s, "Symbols: "+fmt.Sprintf("%#v", this.Symbols)+",\n")
	}
	if this.PostingsOffsetTable != nil {
		s = append(s, "PostingsOffsetTable: "+fmt.Sprintf("%#v", this.PostingsOffsetTable)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Symbols) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&samplepb.Symbols{")
	s = append(s, "Offsets: "+fmt.Sprintf("%#v", this.Offsets)+",\n")
	s = append(s, "Seen: "+fmt.Sprintf("%#v", this.Seen)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostingOffsetTable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&samplepb.PostingOffsetTable{")
	keysForPostings := make([]string, 0, len(this.Postings))
	for k, _ := range this.Postings {
		keysForPostings = append(keysForPostings, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPostings)
	mapStringForPostings := "map[string]*PostingValueOffsets{"
	for _, k := range keysForPostings {
		mapStringForPostings += fmt.Sprintf("%#v: %#v,", k, this.Postings[k])
	}
	mapStringForPostings += "}"
	if this.Postings != nil {
		s = append(s, "Postings: "+mapStringForPostings+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostingValueOffsets) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&samplepb.PostingValueOffsets{")
	if this.Offsets != nil {
		s = append(s, "Offsets: "+fmt.Sprintf("%#v", this.Offsets)+",\n")
	}
	s = append(s, "LastValOffset: "+fmt.Sprintf("%#v", this.LastValOffset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostingOffset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&samplepb.PostingOffset{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "TableOff: "+fmt.Sprintf("%#v", this.TableOff)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSample(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Sample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PostingsOffsetTable != nil {
		{
			size, err := m.PostingsOffsetTable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Symbols != nil {
		{
			size, err := m.Symbols.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IndexVersion != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.IndexVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Symbols) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Symbols) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Symbols) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seen != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.Seen))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Offsets) > 0 {
		dAtA4 := make([]byte, len(m.Offsets)*10)
		var j3 int
		for _, num1 := range m.Offsets {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSample(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostingOffsetTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostingOffsetTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostingOffsetTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Postings) > 0 {
		for k := range m.Postings {
			v := m.Postings[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSample(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSample(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSample(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PostingValueOffsets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostingValueOffsets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostingValueOffsets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastValOffset != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.LastValOffset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Offsets) > 0 {
		for iNdEx := len(m.Offsets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Offsets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PostingOffset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostingOffset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostingOffset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TableOff != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.TableOff))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintSample(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSample(dAtA []byte, offset int, v uint64) int {
	offset -= sovSample(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Sample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovSample(uint64(m.Version))
	}
	if m.IndexVersion != 0 {
		n += 1 + sovSample(uint64(m.IndexVersion))
	}
	if m.Symbols != nil {
		l = m.Symbols.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	if m.PostingsOffsetTable != nil {
		l = m.PostingsOffsetTable.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *Symbols) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offsets) > 0 {
		l = 0
		for _, e := range m.Offsets {
			l += sovSample(uint64(e))
		}
		n += 1 + sovSample(uint64(l)) + l
	}
	if m.Seen != 0 {
		n += 1 + sovSample(uint64(m.Seen))
	}
	return n
}

func (m *PostingOffsetTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Postings) > 0 {
		for k, v := range m.Postings {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSample(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSample(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSample(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PostingValueOffsets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offsets) > 0 {
		for _, e := range m.Offsets {
			l = e.Size()
			n += 1 + l + sovSample(uint64(l))
		}
	}
	if m.LastValOffset != 0 {
		n += 1 + sovSample(uint64(m.LastValOffset))
	}
	return n
}

func (m *PostingOffset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.TableOff != 0 {
		n += 1 + sovSample(uint64(m.TableOff))
	}
	return n
}

func sovSample(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSample(x uint64) (n int) {
	return sovSample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Sample) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Sample{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`IndexVersion:` + fmt.Sprintf("%v", this.IndexVersion) + `,`,
		`Symbols:` + strings.Replace(this.Symbols.String(), "Symbols", "Symbols", 1) + `,`,
		`PostingsOffsetTable:` + strings.Replace(this.PostingsOffsetTable.String(), "PostingOffsetTable", "PostingOffsetTable", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Symbols) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Symbols{`,
		`Offsets:` + fmt.Sprintf("%v", this.Offsets) + `,`,
		`Seen:` + fmt.Sprintf("%v", this.Seen) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostingOffsetTable) String() string {
	if this == nil {
		return "nil"
	}
	keysForPostings := make([]string, 0, len(this.Postings))
	for k, _ := range this.Postings {
		keysForPostings = append(keysForPostings, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPostings)
	mapStringForPostings := "map[string]*PostingValueOffsets{"
	for _, k := range keysForPostings {
		mapStringForPostings += fmt.Sprintf("%v: %v,", k, this.Postings[k])
	}
	mapStringForPostings += "}"
	s := strings.Join([]string{`&PostingOffsetTable{`,
		`Postings:` + mapStringForPostings + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostingValueOffsets) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOffsets := "[]*PostingOffset{"
	for _, f := range this.Offsets {
		repeatedStringForOffsets += strings.Replace(fmt.Sprintf("%v", f), "PostingOffset", "PostingOffset", 1) + ","
	}
	repeatedStringForOffsets += "}"
	s := strings.Join([]string{`&PostingValueOffsets{`,
		`Offsets:` + repeatedStringForOffsets + `,`,
		`LastValOffset:` + fmt.Sprintf("%v", this.LastValOffset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostingOffset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostingOffset{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`TableOff:` + fmt.Sprintf("%v", this.TableOff) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSample(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Sample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexVersion", wireType)
			}
			m.IndexVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Symbols == nil {
				m.Symbols = &Symbols{}
			}
			if err := m.Symbols.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostingsOffsetTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PostingsOffsetTable == nil {
				m.PostingsOffsetTable = &PostingOffsetTable{}
			}
			if err := m.PostingsOffsetTable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Symbols) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Symbols: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Symbols: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Offsets = append(m.Offsets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSample
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSample
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Offsets) == 0 {
					m.Offsets = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Offsets = append(m.Offsets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Offsets", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seen", wireType)
			}
			m.Seen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostingOffsetTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostingOffsetTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostingOffsetTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Postings == nil {
				m.Postings = make(map[string]*PostingValueOffsets)
			}
			var mapkey string
			var mapvalue *PostingValueOffsets
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSample
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSample
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSample
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSample
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PostingValueOffsets{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSample(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSample
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Postings[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostingValueOffsets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: postingValueOffsets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: postingValueOffsets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offsets = append(m.Offsets, &PostingOffset{})
			if err := m.Offsets[len(m.Offsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastValOffset", wireType)
			}
			m.LastValOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastValOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostingOffset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: postingOffset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: postingOffset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableOff", wireType)
			}
			m.TableOff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableOff |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSample
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSample
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSample
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSample(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSample
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSample = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSample   = fmt.Errorf("proto: integer overflow")
)
