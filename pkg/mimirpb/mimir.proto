// SPDX-License-Identifier: AGPL-3.0-only
// Provenance-includes-location: https://github.com/cortexproject/cortex/blob/master/pkg/cortexpb/cortex.proto
// Provenance-includes-license: Apache-2.0
// Provenance-includes-copyright: The Cortex Authors.

syntax = "proto3";

package cortexpb;

option go_package = "mimirpb";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

message WriteRequest {
  repeated TimeSeries timeseries = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "PreallocTimeseries"];
  enum SourceEnum {
    API = 0;
    RULE = 1;
  }
  SourceEnum Source = 2;
  repeated MetricMetadata metadata = 3 [(gogoproto.nullable) = true];

  // Mimir-specific fields, using intentionally high field numbers to avoid conflicts with upstream Prometheus.

  // Skip validation of label names.
  bool skip_label_name_validation = 1000;

  // Timeseries that are stored to ephemeral storage only.
  repeated TimeSeries ephemeral_timeseries = 1001 [(gogoproto.nullable) = false, (gogoproto.customtype) = "PreallocTimeseries"];
}

message WriteResponse {}

message TimeSeries {
  repeated LabelPair labels = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "LabelAdapter"];
  // Sorted by time, oldest sample first.
  repeated Sample samples = 2 [(gogoproto.nullable) = false];
  repeated Exemplar exemplars = 3 [(gogoproto.nullable) = false];
  repeated Histogram histograms = 4 [(gogoproto.nullable) = false];
}

message LabelPair {
  bytes name  = 1;
  bytes value = 2;
}

message Sample {
  int64 timestamp_ms = 2;
  double value       = 1;
}

message MetricMetadata {
  enum MetricType {
    UNKNOWN        = 0;
    COUNTER        = 1;
    GAUGE          = 2;
    HISTOGRAM      = 3;
    GAUGEHISTOGRAM = 4;
    SUMMARY        = 5;
    INFO           = 6;
    STATESET       = 7;
  }

  MetricType type = 1;
  string metric_family_name = 2;
  string help = 4;
  string unit = 5;
}

message Metric {
  repeated LabelPair labels = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "LabelAdapter"];
}

message Exemplar {
  // Exemplar labels, different than series labels
  repeated LabelPair labels = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "LabelAdapter"];
  double value = 2;
  int64 timestamp_ms = 3;
}

message Histogram {
  enum ResetHint {
    option (gogoproto.goproto_enum_prefix) = true;
    UNKNOWN = 0;
    YES     = 1;
    NO      = 2;
    GAUGE   = 3;
  }

  oneof count {
    uint64 count_int   = 1;
    double count_float = 2;
  }
  double sum = 3;
  sint32 schema             = 4;
  double zero_threshold     = 5;
  oneof zero_count {
    uint64 zero_count_int     = 6;
    double zero_count_float   = 7;
  }

  repeated BucketSpan negative_spans =  8;
  repeated sint64 negative_deltas    =  9;
  repeated double negative_counts    = 10;

  repeated BucketSpan positive_spans = 11;
  repeated sint64 positive_deltas    = 12;
  repeated double positive_counts    = 13;

  ResetHint reset_hint               = 14;
  int64 timestamp = 15;
}

message BucketSpan {
  sint32 offset = 1;
  uint32 length = 2;
}

message SampleHistogram {
  double count = 1;
  double sum = 2;
  repeated HistogramBucket buckets = 3;
}

message HistogramBucket {
  int32 boundaries = 1;
  double lower = 2;
  double upper = 3;
  double count = 4;
}

message SampleHistogramPair {
  int64 timestamp = 2;
  SampleHistogram histogram = 1;
}
