diff --git a/pkg/mimirpb/mimir.pb.go b/pkg/mimirpb/mimir.pb.go
index e7d3c6a439..dda8609298 100644
--- a/pkg/mimirpb/mimir.pb.go
+++ b/pkg/mimirpb/mimir.pb.go
@@ -14,7 +14,6 @@ import (
 	math "math"
 	math_bits "math/bits"
 	reflect "reflect"
-	slices "slices"
 	strconv "strconv"
 	strings "strings"
 )
@@ -288,9 +287,6 @@ func (MetadataRW2_MetricType) EnumDescriptor() ([]byte, []int) {
 }
 
 type WriteRequest struct {
-	// Keep reference to buffer for unsafe references.
-	BufferHolder
-
 	Timeseries []PreallocTimeseries    `protobuf:"bytes,1,rep,name=timeseries,proto3,customtype=PreallocTimeseries" json:"timeseries"`
 	Source     WriteRequest_SourceEnum `protobuf:"varint,2,opt,name=Source,proto3,enum=cortexpb.WriteRequest_SourceEnum" json:"Source,omitempty"`
 	Metadata   []*MetricMetadata       `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
@@ -302,16 +298,6 @@ type WriteRequest struct {
 	SkipLabelValidation bool `protobuf:"varint,1000,opt,name=skip_label_validation,json=skipLabelValidation,proto3" json:"skip_label_validation,omitempty"`
 	// Skip label count validation.
 	SkipLabelCountValidation bool `protobuf:"varint,1001,opt,name=skip_label_count_validation,json=skipLabelCountValidation,proto3" json:"skip_label_count_validation,omitempty"`
-
-	// Skip unmarshaling of exemplars.
-	skipUnmarshalingExemplars bool
-	// Skip normalization of metadata metric names when unmarshalling the request.
-	skipNormalizeMetadataMetricName bool
-	// Skip deduplication of metric metadata by family name.
-	skipDeduplicateMetadata bool
-	// Unmarshal from Remote Write 2.0. if rw2symbols is not nil.
-	unmarshalFromRW2 bool
-	rw2symbols       rw2PagedSymbols
 }
 
 func (m *WriteRequest) Reset()      { *m = WriteRequest{} }
@@ -474,11 +460,6 @@ func (m *ErrorDetails) GetSoft() bool {
 	return false
 }
 
-// # DO NOT SHALLOW-COPY
-//
-// Data referenced from a PreallocTimeseries may change once the timeseries is
-// returned to the shared pool. This includes usually immutable references, like
-// strings. If needed, use DeepCopyTimeseries instead.
 type TimeSeries struct {
 	Labels []UnsafeMutableLabel `protobuf:"bytes,1,rep,name=labels,proto3,customtype=UnsafeMutableLabel" json:"labels"`
 	// Sorted by time, oldest sample first.
@@ -491,9 +472,6 @@ type TimeSeries struct {
 	// Zero value means value not set. If you need to use exactly zero value for
 	// the timestamp, use 1 millisecond before or after.
 	CreatedTimestamp int64 `protobuf:"varint,6,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
-
-	// Skip unmarshaling of exemplars.
-	SkipUnmarshalingExemplars bool
 }
 
 func (m *TimeSeries) Reset()      { *m = TimeSeries{} }
@@ -5963,25 +5941,19 @@ func (m *TimeSeriesRW2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
 		}
 	}
 	if len(m.LabelsRefs) > 0 {
-		// Modified code.
-		// Normally we move backward through the message, but varint encoding requires moving forward, due to the bit math/continuation bits.
-		// The generator normally allocates a new buffer for the varint slice, moves foward through it, and copies it into dAtA at the end.
-		// We avoid the buffer allocation by instead encoding the value in-place, but backward, and then reversing the bits at the end.
+		dAtA22 := make([]byte, len(m.LabelsRefs)*10)
 		var j21 int
-		start := i
 		for _, num := range m.LabelsRefs {
 			for num >= 1<<7 {
-				dAtA[i-1] = uint8(uint64(num)&0x7f | 0x80)
+				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
 				num >>= 7
-				i--
 				j21++
 			}
-			dAtA[i-1] = uint8(num)
-			i--
+			dAtA22[j21] = uint8(num)
 			j21++
 		}
-		slices.Reverse(dAtA[i:start])
-		// End modified code.
+		i -= j21
+		copy(dAtA[i:], dAtA22[:j21])
 		i = encodeVarintMimir(dAtA, i, uint64(j21))
 		i--
 		dAtA[i] = 0xa
@@ -6021,25 +5993,19 @@ func (m *ExemplarRW2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
 		dAtA[i] = 0x11
 	}
 	if len(m.LabelsRefs) > 0 {
-		// Modified code.
-		// Normally we move backward through the message, but varint encoding requires moving forward, due to the bit math/continuation bits.
-		// The generator normally allocates a new buffer for the varint slice, moves foward through it, and copies it into dAtA at the end.
-		// We avoid the buffer allocation by instead encoding the value in-place, but backward, and then reversing the bits at the end.
+		dAtA24 := make([]byte, len(m.LabelsRefs)*10)
 		var j23 int
-		start := i
 		for _, num := range m.LabelsRefs {
 			for num >= 1<<7 {
-				dAtA[i-1] = uint8(uint64(num)&0x7f | 0x80)
+				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
 				num >>= 7
-				i--
 				j23++
 			}
-			dAtA[i-1] = uint8(num)
-			i--
+			dAtA24[j23] = uint8(num)
 			j23++
 		}
-		slices.Reverse(dAtA[i:start])
-		// End modified code.
+		i -= j23
+		copy(dAtA[i:], dAtA24[:j23])
 		i = encodeVarintMimir(dAtA, i, uint64(j23))
 		i--
 		dAtA[i] = 0xa
@@ -7387,9 +7353,6 @@ func valueToStringMimir(v interface{}) string {
 	return fmt.Sprintf("*%v", pv)
 }
 func (m *WriteRequest) Unmarshal(dAtA []byte) error {
-	var metadata metadataSet
-	seenFirstSymbol := false
-
 	l := len(dAtA)
 	iNdEx := 0
 	for iNdEx < l {
@@ -7419,9 +7382,6 @@ func (m *WriteRequest) Unmarshal(dAtA []byte) error {
 		}
 		switch fieldNum {
 		case 1:
-			if m.unmarshalFromRW2 {
-				return errorUnexpectedRW1Timeseries
-			}
 			if wireType != 2 {
 				return fmt.Errorf("proto: wrong wireType = %d for field Timeseries", wireType)
 			}
@@ -7451,8 +7411,7 @@ func (m *WriteRequest) Unmarshal(dAtA []byte) error {
 				return io.ErrUnexpectedEOF
 			}
 			m.Timeseries = append(m.Timeseries, PreallocTimeseries{})
-			m.Timeseries[len(m.Timeseries)-1].skipUnmarshalingExemplars = m.skipUnmarshalingExemplars
-			if err := m.Timeseries[len(m.Timeseries)-1].Unmarshal(dAtA[iNdEx:postIndex], nil, nil, m.skipNormalizeMetadataMetricName); err != nil {
+			if err := m.Timeseries[len(m.Timeseries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
 				return err
 			}
 			iNdEx = postIndex
@@ -7476,9 +7435,6 @@ func (m *WriteRequest) Unmarshal(dAtA []byte) error {
 				}
 			}
 		case 3:
-			if m.unmarshalFromRW2 {
-				return errorUnexpectedRW1Metadata
-			}
 			if wireType != 2 {
 				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
 			}
@@ -7513,9 +7469,6 @@ func (m *WriteRequest) Unmarshal(dAtA []byte) error {
 			}
 			iNdEx = postIndex
 		case 4:
-			if !m.unmarshalFromRW2 {
-				return errorUnexpectedRW2Symbols
-			}
 			if wireType != 2 {
 				return fmt.Errorf("proto: wrong wireType = %d for field SymbolsRW2", wireType)
 			}
@@ -7545,16 +7498,9 @@ func (m *WriteRequest) Unmarshal(dAtA []byte) error {
 			if postIndex > l {
 				return io.ErrUnexpectedEOF
 			}
-			if !seenFirstSymbol && intStringLen > 0 {
-				return errorInvalidFirstSymbol
-			}
-			seenFirstSymbol = true
-			m.rw2symbols.append(yoloString(dAtA[iNdEx:postIndex]))
+			m.SymbolsRW2 = append(m.SymbolsRW2, string(dAtA[iNdEx:postIndex]))
 			iNdEx = postIndex
 		case 5:
-			if !m.unmarshalFromRW2 {
-				return errorUnexpectedRW2Timeseries
-			}
 			if wireType != 2 {
 				return fmt.Errorf("proto: wrong wireType = %d for field TimeseriesRW2", wireType)
 			}
@@ -7583,12 +7529,8 @@ func (m *WriteRequest) Unmarshal(dAtA []byte) error {
 			if postIndex > l {
 				return io.ErrUnexpectedEOF
 			}
-			m.Timeseries = append(m.Timeseries, PreallocTimeseries{})
-			m.Timeseries[len(m.Timeseries)-1].skipUnmarshalingExemplars = m.skipUnmarshalingExemplars
-			if metadata == nil {
-				metadata = metadataSetFromSettings(m.skipDeduplicateMetadata)
-			}
-			if err := m.Timeseries[len(m.Timeseries)-1].Unmarshal(dAtA[iNdEx:postIndex], &m.rw2symbols, metadata, m.skipNormalizeMetadataMetricName); err != nil {
+			m.TimeseriesRW2 = append(m.TimeseriesRW2, TimeSeriesRW2{})
+			if err := m.TimeseriesRW2[len(m.TimeseriesRW2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
 				return err
 			}
 			iNdEx = postIndex
@@ -7651,12 +7593,6 @@ func (m *WriteRequest) Unmarshal(dAtA []byte) error {
 	if iNdEx > l {
 		return io.ErrUnexpectedEOF
 	}
-
-	if m.unmarshalFromRW2 {
-		m.Metadata = metadata.slice()
-		m.rw2symbols.releasePages()
-	}
-
 	return nil
 }
 func (m *WriteResponse) Unmarshal(dAtA []byte) error {
@@ -7924,11 +7860,9 @@ func (m *TimeSeries) Unmarshal(dAtA []byte) error {
 			if postIndex > l {
 				return io.ErrUnexpectedEOF
 			}
-			if !m.SkipUnmarshalingExemplars {
-				m.Exemplars = append(m.Exemplars, Exemplar{})
-				if err := m.Exemplars[len(m.Exemplars)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
-					return err
-				}
+			m.Exemplars = append(m.Exemplars, Exemplar{})
+			if err := m.Exemplars[len(m.Exemplars)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
+				return err
 			}
 			iNdEx = postIndex
 		case 4:
@@ -11237,10 +11171,6 @@ func (m *WriteRequestRW2) Unmarshal(dAtA []byte) error {
 	return nil
 }
 func (m *TimeSeriesRW2) Unmarshal(dAtA []byte) error {
-	return errorInternalRW2
-}
-func (m *TimeSeries) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadata metadataSet, skipNormalizeMetricName bool) error {
-	var metricName string
 	l := len(dAtA)
 	iNdEx := 0
 	for iNdEx < l {
@@ -11271,7 +11201,22 @@ func (m *TimeSeries) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadat
 		switch fieldNum {
 		case 1:
 			if wireType == 0 {
-				return errorOddNumberOfLabelRefs
+				var v uint32
+				for shift := uint(0); ; shift += 7 {
+					if shift >= 64 {
+						return ErrIntOverflowMimir
+					}
+					if iNdEx >= l {
+						return io.ErrUnexpectedEOF
+					}
+					b := dAtA[iNdEx]
+					iNdEx++
+					v |= uint32(b&0x7F) << shift
+					if b < 0x80 {
+						break
+					}
+				}
+				m.LabelsRefs = append(m.LabelsRefs, v)
 			} else if wireType == 2 {
 				var packedLen int
 				for shift := uint(0); ; shift += 7 {
@@ -11306,14 +11251,9 @@ func (m *TimeSeries) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadat
 					}
 				}
 				elementCount = count
-				if elementCount%2 != 0 {
-					return errorOddNumberOfLabelRefs
+				if elementCount != 0 && len(m.LabelsRefs) == 0 {
+					m.LabelsRefs = make([]uint32, 0, elementCount)
 				}
-				if elementCount != 0 && len(m.Labels) == 0 {
-					m.Labels = make([]LabelAdapter, 0, elementCount/2)
-				}
-				idx := 0
-				metricNameLabel := false
 				for iNdEx < postIndex {
 					var v uint32
 					for shift := uint(0); ; shift += 7 {
@@ -11330,27 +11270,7 @@ func (m *TimeSeries) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadat
 							break
 						}
 					}
-					if idx%2 == 0 {
-						labelName, err := symbols.get(v)
-						if err != nil {
-							return errorInvalidLabelRef
-						}
-						m.Labels = append(m.Labels, LabelAdapter{Name: labelName})
-						if labelName == "__name__" {
-							metricNameLabel = true
-						}
-					} else {
-						labelValue, err := symbols.get(v)
-						if err != nil {
-							return errorInvalidLabelRef
-						}
-						m.Labels[len(m.Labels)-1].Value = labelValue
-						if metricNameLabel {
-							metricName = labelValue
-							metricNameLabel = false
-						}
-					}
-					idx++
+					m.LabelsRefs = append(m.LabelsRefs, v)
 				}
 			} else {
 				return fmt.Errorf("proto: wrong wireType = %d for field LabelsRefs", wireType)
@@ -11452,11 +11372,9 @@ func (m *TimeSeries) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadat
 			if postIndex > l {
 				return io.ErrUnexpectedEOF
 			}
-			if !m.SkipUnmarshalingExemplars {
-				m.Exemplars = append(m.Exemplars, Exemplar{})
-				if err := m.Exemplars[len(m.Exemplars)-1].UnmarshalRW2(dAtA[iNdEx:postIndex], symbols); err != nil {
-					return err
-				}
+			m.Exemplars = append(m.Exemplars, ExemplarRW2{})
+			if err := m.Exemplars[len(m.Exemplars)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
+				return err
 			}
 			iNdEx = postIndex
 		case 5:
@@ -11488,7 +11406,7 @@ func (m *TimeSeries) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadat
 			if postIndex > l {
 				return io.ErrUnexpectedEOF
 			}
-			if err := MetricMetadataUnmarshalRW2(dAtA[iNdEx:postIndex], symbols, metadata, metricName, skipNormalizeMetricName); err != nil {
+			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
 				return err
 			}
 			iNdEx = postIndex
@@ -11533,10 +11451,6 @@ func (m *TimeSeries) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadat
 	return nil
 }
 func (m *ExemplarRW2) Unmarshal(dAtA []byte) error {
-	return errorInternalRW2
-}
-
-func (m *Exemplar) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols) error {
 	l := len(dAtA)
 	iNdEx := 0
 	for iNdEx < l {
@@ -11567,7 +11481,22 @@ func (m *Exemplar) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols) error {
 		switch fieldNum {
 		case 1:
 			if wireType == 0 {
-				return errorOddNumberOfExemplarLabelRefs
+				var v uint32
+				for shift := uint(0); ; shift += 7 {
+					if shift >= 64 {
+						return ErrIntOverflowMimir
+					}
+					if iNdEx >= l {
+						return io.ErrUnexpectedEOF
+					}
+					b := dAtA[iNdEx]
+					iNdEx++
+					v |= uint32(b&0x7F) << shift
+					if b < 0x80 {
+						break
+					}
+				}
+				m.LabelsRefs = append(m.LabelsRefs, v)
 			} else if wireType == 2 {
 				var packedLen int
 				for shift := uint(0); ; shift += 7 {
@@ -11602,13 +11531,9 @@ func (m *Exemplar) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols) error {
 					}
 				}
 				elementCount = count
-				if elementCount%2 != 0 {
-					return errorOddNumberOfExemplarLabelRefs
+				if elementCount != 0 && len(m.LabelsRefs) == 0 {
+					m.LabelsRefs = make([]uint32, 0, elementCount)
 				}
-				if elementCount != 0 && len(m.Labels) == 0 {
-					m.Labels = make([]LabelAdapter, 0, elementCount/2)
-				}
-				idx := 0
 				for iNdEx < postIndex {
 					var v uint32
 					for shift := uint(0); ; shift += 7 {
@@ -11625,20 +11550,7 @@ func (m *Exemplar) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols) error {
 							break
 						}
 					}
-					if idx%2 == 0 {
-						labelName, err := symbols.get(v)
-						if err != nil {
-							return errorInvalidExemplarLabelRef
-						}
-						m.Labels = append(m.Labels, LabelAdapter{Name: labelName})
-					} else {
-						labelValue, err := symbols.get(v)
-						if err != nil {
-							return errorInvalidExemplarLabelRef
-						}
-						m.Labels[len(m.Labels)-1].Value = labelValue
-					}
-					idx++
+					m.LabelsRefs = append(m.LabelsRefs, v)
 				}
 			} else {
 				return fmt.Errorf("proto: wrong wireType = %d for field LabelsRefs", wireType)
@@ -11658,7 +11570,7 @@ func (m *Exemplar) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols) error {
 			if wireType != 0 {
 				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
 			}
-			m.TimestampMs = 0
+			m.Timestamp = 0
 			for shift := uint(0); ; shift += 7 {
 				if shift >= 64 {
 					return ErrIntOverflowMimir
@@ -11668,7 +11580,7 @@ func (m *Exemplar) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols) error {
 				}
 				b := dAtA[iNdEx]
 				iNdEx++
-				m.TimestampMs |= int64(b&0x7F) << shift
+				m.Timestamp |= int64(b&0x7F) << shift
 				if b < 0x80 {
 					break
 				}
@@ -11695,16 +11607,6 @@ func (m *Exemplar) UnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols) error {
 	return nil
 }
 func (m *MetadataRW2) Unmarshal(dAtA []byte) error {
-	return errorInternalRW2
-}
-func MetricMetadataUnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadata metadataSet, metricName string, skipNormalizeMetricName bool) error {
-	var (
-		err error
-		help string
-		metricType MetadataRW2_MetricType
-		normalizedMetricName string
-		unit string
-	)
 	l := len(dAtA)
 	iNdEx := 0
 	for iNdEx < l {
@@ -11737,7 +11639,7 @@ func MetricMetadataUnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadata
 			if wireType != 0 {
 				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
 			}
-			metricType = 0
+			m.Type = 0
 			for shift := uint(0); ; shift += 7 {
 				if shift >= 64 {
 					return ErrIntOverflowMimir
@@ -11747,7 +11649,7 @@ func MetricMetadataUnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadata
 				}
 				b := dAtA[iNdEx]
 				iNdEx++
-				metricType |= MetadataRW2_MetricType(b&0x7F) << shift
+				m.Type |= MetadataRW2_MetricType(b&0x7F) << shift
 				if b < 0x80 {
 					break
 				}
@@ -11756,7 +11658,7 @@ func MetricMetadataUnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadata
 			if wireType != 0 {
 				return fmt.Errorf("proto: wrong wireType = %d for field HelpRef", wireType)
 			}
-			helpRef := uint32(0)
+			m.HelpRef = 0
 			for shift := uint(0); ; shift += 7 {
 				if shift >= 64 {
 					return ErrIntOverflowMimir
@@ -11766,20 +11668,16 @@ func MetricMetadataUnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadata
 				}
 				b := dAtA[iNdEx]
 				iNdEx++
-				helpRef |= uint32(b&0x7F) << shift
+				m.HelpRef |= uint32(b&0x7F) << shift
 				if b < 0x80 {
 					break
 				}
 			}
-			help, err = symbols.get(helpRef)
-			if err != nil {
-				return errorInvalidHelpRef
-			}
 		case 4:
 			if wireType != 0 {
 				return fmt.Errorf("proto: wrong wireType = %d for field UnitRef", wireType)
 			}
-			unitRef := uint32(0)
+			m.UnitRef = 0
 			for shift := uint(0); ; shift += 7 {
 				if shift >= 64 {
 					return ErrIntOverflowMimir
@@ -11789,15 +11687,11 @@ func MetricMetadataUnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadata
 				}
 				b := dAtA[iNdEx]
 				iNdEx++
-				unitRef |= uint32(b&0x7F) << shift
+				m.UnitRef |= uint32(b&0x7F) << shift
 				if b < 0x80 {
 					break
 				}
 			}
-			unit, err = symbols.get(unitRef)
-			if err != nil {
-				return errorInvalidUnitRef
-			}
 		default:
 			iNdEx = preIndex
 			skippy, err := skipMimir(dAtA[iNdEx:])
@@ -11817,23 +11711,6 @@ func MetricMetadataUnmarshalRW2(dAtA []byte, symbols *rw2PagedSymbols, metadata
 	if iNdEx > l {
 		return io.ErrUnexpectedEOF
 	}
-	if skipNormalizeMetricName {
-		normalizedMetricName = metricName
-	} else {
-		normalizedMetricName, _ = normalizeMetricName(metricName, metricType)
-	}
-	if len(normalizedMetricName) == 0 {
-		return nil
-	}
-	if len(unit) > 0 || len(help) > 0 || metricType != 0 {
-		metadata.add(normalizedMetricName, MetricMetadata{
-			MetricFamilyName: normalizedMetricName,
-			Help:             help,
-			Unit:             unit,
-			Type:             MetricMetadata_MetricType(metricType),
-		})
-	}
-
 	return nil
 }
 func skipMimir(dAtA []byte) (n int, err error) {
