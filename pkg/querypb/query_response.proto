// SPDX-License-Identifier: AGPL-3.0-only
// Provenance-includes-location: https://github.com/prometheus/prometheus/blob/main/prompb/types.proto
// Provenance-includes-license: Apache-2.0
// Provenance-includes-copyright: Prometheus Team

syntax = "proto3";

package querypb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

message QueryResponse {
  // These values correspond to the possible status values defined in https://github.com/prometheus/prometheus/blob/main/web/api/v1/api.go.
  enum Status {
    option (gogoproto.goproto_enum_prefix) = true;
    ERROR = 0;
    SUCCESS = 1;
  }

  // These values correspond to the possible error type values defined in https://github.com/prometheus/prometheus/blob/main/web/api/v1/api.go.
  enum ErrorType {
    option (gogoproto.goproto_enum_prefix) = true;
    NONE = 0;
    TIMEOUT = 1;
    CANCELED = 2;
    EXECUTION = 3;
    BAD_DATA = 4;
    INTERNAL = 5;
    UNAVAILABLE = 6;
    NOT_FOUND = 7;
  }

  Status status = 1;
  ErrorType error_type = 2;
  string error = 3;

  oneof data {
    StringData string = 4;
    VectorData vector = 5;
    ScalarData scalar = 6;
    MatrixData matrix = 7;
  }
}

message StringData {
  string value = 1;
}

message VectorData {
  repeated VectorSample samples = 1 [(gogoproto.nullable) = false];
  repeated VectorHistogram histograms = 2 [(gogoproto.nullable) = false];
}

message VectorSample {
  // Why not use a map<...> here? We want to preserve the order of the labels, as labels.Labels expects them to be sorted.
  repeated string metric = 1;

  double value = 2;
  int64 timestamp_milliseconds = 3;
}

message VectorHistogram {
  // Why not use a map<...> here? We want to preserve the order of the labels, as labels.Labels expects them to be sorted.
  repeated string metric = 1;

  Histogram histogram = 2 [(gogoproto.nullable) = false];
}

message ScalarData {
  double value = 1;
  int64 timestamp_milliseconds = 2;
}

message MatrixData {
  repeated MatrixSeries series = 1 [(gogoproto.nullable) = false];
}

message MatrixSeries {
  // Why not use a map<...> here? We want to preserve the order of the labels.
  repeated string metric = 1;

  repeated MatrixSample samples = 2 [(gogoproto.nullable) = false];
  repeated Histogram histograms = 3 [(gogoproto.nullable) = false];
}

message MatrixSample {
  double value = 1;
  int64 timestamp_milliseconds = 2;
}

// This is based on https://github.com/prometheus/prometheus/blob/main/prompb/types.proto
message Histogram {
  enum ResetHint {
    option (gogoproto.goproto_enum_prefix) = true;
    UNKNOWN = 0; // Need to test for a counter reset explicitly.
    YES     = 1; // This is the 1st histogram after a counter reset.
    NO      = 2; // There was no counter reset between this and the previous Histogram.
    GAUGE   = 3; // This is a gauge histogram where counter resets don't happen.
  }

  oneof count { // Count of observations in the histogram.
    uint64 count_int   = 1;
    double count_float = 2;
  }
  double sum = 3; // Sum of observations in the histogram.
  // The schema defines the bucket schema. Currently, valid numbers
  // are -4 <= n <= 8. They are all for base-2 bucket schemas, where 1
  // is a bucket boundary in each case, and then each power of two is
  // divided into 2^n logarithmic buckets. Or in other words, each
  // bucket boundary is the previous boundary times 2^(2^-n). In the
  // future, more bucket schemas may be added using numbers < -4 or >
  // 8.
  sint32 schema             = 4;
  double zero_threshold     = 5; // Breadth of the zero bucket.
  oneof zero_count { // Count in zero bucket.
    uint64 zero_count_int     = 6;
    double zero_count_float   = 7;
  }

  // Negative Buckets.
  repeated BucketSpan negative_spans =  8;
  // Use either "negative_deltas" or "negative_counts", the former for
  // regular histograms with integer counts, the latter for float
  // histograms.
  repeated sint64 negative_deltas    =  9; // Count delta of each bucket compared to previous one (or to zero for 1st bucket).
  repeated double negative_counts    = 10; // Absolute count of each bucket.

  // Positive Buckets.
  repeated BucketSpan positive_spans = 11;
  // Use either "positive_deltas" or "positive_counts", the former for
  // regular histograms with integer counts, the latter for float
  // histograms.
  repeated sint64 positive_deltas    = 12; // Count delta of each bucket compared to previous one (or to zero for 1st bucket).
  repeated double positive_counts    = 13; // Absolute count of each bucket.

  ResetHint reset_hint               = 14;
  // timestamp is in ms format
  int64 timestamp = 15;
}

message BucketSpan {
  sint32 offset = 1;
  uint32 length = 2;
}
