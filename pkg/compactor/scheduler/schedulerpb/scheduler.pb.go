// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scheduler.proto

package schedulerpb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JobType int32

const (
	COMPACTION JobType = 0
	PLANNING   JobType = 1
)

var JobType_name = map[int32]string{
	0: "COMPACTION",
	1: "PLANNING",
}

var JobType_value = map[string]int32{
	"COMPACTION": 0,
	"PLANNING":   1,
}

func (JobType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{0}
}

type UpdateType int32

const (
	IN_PROGRESS UpdateType = 0
	COMPLETE    UpdateType = 1
	REASSIGN    UpdateType = 2
	ABANDON     UpdateType = 3
)

var UpdateType_name = map[int32]string{
	0: "IN_PROGRESS",
	1: "COMPLETE",
	2: "REASSIGN",
	3: "ABANDON",
}

var UpdateType_value = map[string]int32{
	"IN_PROGRESS": 0,
	"COMPLETE":    1,
	"REASSIGN":    2,
	"ABANDON":     3,
}

func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{1}
}

type JobKey struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Epoch int64  `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *JobKey) Reset()      { *m = JobKey{} }
func (*JobKey) ProtoMessage() {}
func (*JobKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{0}
}
func (m *JobKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobKey.Merge(m, src)
}
func (m *JobKey) XXX_Size() int {
	return m.Size()
}
func (m *JobKey) XXX_DiscardUnknown() {
	xxx_messageInfo_JobKey.DiscardUnknown(m)
}

var xxx_messageInfo_JobKey proto.InternalMessageInfo

func (m *JobKey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobKey) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type JobSpec struct {
	Tenant  string         `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Job     *CompactionJob `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	JobType JobType        `protobuf:"varint,3,opt,name=job_type,json=jobType,proto3,enum=schedulerpb.JobType" json:"job_type,omitempty"`
}

func (m *JobSpec) Reset()      { *m = JobSpec{} }
func (*JobSpec) ProtoMessage() {}
func (*JobSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{1}
}
func (m *JobSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSpec.Merge(m, src)
}
func (m *JobSpec) XXX_Size() int {
	return m.Size()
}
func (m *JobSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSpec.DiscardUnknown(m)
}

var xxx_messageInfo_JobSpec proto.InternalMessageInfo

func (m *JobSpec) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *JobSpec) GetJob() *CompactionJob {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *JobSpec) GetJobType() JobType {
	if m != nil {
		return m.JobType
	}
	return COMPACTION
}

type CompactionJob struct {
	BlockIds [][]byte `protobuf:"bytes,2,rep,name=blockIds,proto3" json:"blockIds,omitempty"`
	Split    bool     `protobuf:"varint,3,opt,name=split,proto3" json:"split,omitempty"`
}

func (m *CompactionJob) Reset()      { *m = CompactionJob{} }
func (*CompactionJob) ProtoMessage() {}
func (*CompactionJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{2}
}
func (m *CompactionJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactionJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactionJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactionJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactionJob.Merge(m, src)
}
func (m *CompactionJob) XXX_Size() int {
	return m.Size()
}
func (m *CompactionJob) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactionJob.DiscardUnknown(m)
}

var xxx_messageInfo_CompactionJob proto.InternalMessageInfo

func (m *CompactionJob) GetBlockIds() [][]byte {
	if m != nil {
		return m.BlockIds
	}
	return nil
}

func (m *CompactionJob) GetSplit() bool {
	if m != nil {
		return m.Split
	}
	return false
}

type LeaseJobRequest struct {
	WorkerId string `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
}

func (m *LeaseJobRequest) Reset()      { *m = LeaseJobRequest{} }
func (*LeaseJobRequest) ProtoMessage() {}
func (*LeaseJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{3}
}
func (m *LeaseJobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaseJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaseJobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaseJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseJobRequest.Merge(m, src)
}
func (m *LeaseJobRequest) XXX_Size() int {
	return m.Size()
}
func (m *LeaseJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseJobRequest proto.InternalMessageInfo

func (m *LeaseJobRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

type LeaseJobResponse struct {
	Key  *JobKey  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Spec *JobSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *LeaseJobResponse) Reset()      { *m = LeaseJobResponse{} }
func (*LeaseJobResponse) ProtoMessage() {}
func (*LeaseJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{4}
}
func (m *LeaseJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaseJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaseJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaseJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseJobResponse.Merge(m, src)
}
func (m *LeaseJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *LeaseJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseJobResponse proto.InternalMessageInfo

func (m *LeaseJobResponse) GetKey() *JobKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LeaseJobResponse) GetSpec() *JobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type PlannedCompactionJob struct {
	Id  string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Job *CompactionJob `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (m *PlannedCompactionJob) Reset()      { *m = PlannedCompactionJob{} }
func (*PlannedCompactionJob) ProtoMessage() {}
func (*PlannedCompactionJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{5}
}
func (m *PlannedCompactionJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlannedCompactionJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlannedCompactionJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlannedCompactionJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlannedCompactionJob.Merge(m, src)
}
func (m *PlannedCompactionJob) XXX_Size() int {
	return m.Size()
}
func (m *PlannedCompactionJob) XXX_DiscardUnknown() {
	xxx_messageInfo_PlannedCompactionJob.DiscardUnknown(m)
}

var xxx_messageInfo_PlannedCompactionJob proto.InternalMessageInfo

func (m *PlannedCompactionJob) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlannedCompactionJob) GetJob() *CompactionJob {
	if m != nil {
		return m.Job
	}
	return nil
}

type PlannedJobsRequest struct {
	Key  *JobKey                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Jobs []*PlannedCompactionJob `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (m *PlannedJobsRequest) Reset()      { *m = PlannedJobsRequest{} }
func (*PlannedJobsRequest) ProtoMessage() {}
func (*PlannedJobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{6}
}
func (m *PlannedJobsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlannedJobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlannedJobsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlannedJobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlannedJobsRequest.Merge(m, src)
}
func (m *PlannedJobsRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlannedJobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlannedJobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlannedJobsRequest proto.InternalMessageInfo

func (m *PlannedJobsRequest) GetKey() *JobKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PlannedJobsRequest) GetJobs() []*PlannedCompactionJob {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type PlannedJobsResponse struct {
}

func (m *PlannedJobsResponse) Reset()      { *m = PlannedJobsResponse{} }
func (*PlannedJobsResponse) ProtoMessage() {}
func (*PlannedJobsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{7}
}
func (m *PlannedJobsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlannedJobsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlannedJobsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlannedJobsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlannedJobsResponse.Merge(m, src)
}
func (m *PlannedJobsResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlannedJobsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlannedJobsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlannedJobsResponse proto.InternalMessageInfo

type UpdatePlanJobRequest struct {
	Key    *JobKey    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Update UpdateType `protobuf:"varint,3,opt,name=update,proto3,enum=schedulerpb.UpdateType" json:"update,omitempty"`
}

func (m *UpdatePlanJobRequest) Reset()      { *m = UpdatePlanJobRequest{} }
func (*UpdatePlanJobRequest) ProtoMessage() {}
func (*UpdatePlanJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{8}
}
func (m *UpdatePlanJobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePlanJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePlanJobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePlanJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePlanJobRequest.Merge(m, src)
}
func (m *UpdatePlanJobRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePlanJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePlanJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePlanJobRequest proto.InternalMessageInfo

func (m *UpdatePlanJobRequest) GetKey() *JobKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *UpdatePlanJobRequest) GetUpdate() UpdateType {
	if m != nil {
		return m.Update
	}
	return IN_PROGRESS
}

type UpdateCompactionJobRequest struct {
	Key    *JobKey    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Tenant string     `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Update UpdateType `protobuf:"varint,3,opt,name=update,proto3,enum=schedulerpb.UpdateType" json:"update,omitempty"`
}

func (m *UpdateCompactionJobRequest) Reset()      { *m = UpdateCompactionJobRequest{} }
func (*UpdateCompactionJobRequest) ProtoMessage() {}
func (*UpdateCompactionJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{9}
}
func (m *UpdateCompactionJobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCompactionJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCompactionJobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCompactionJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCompactionJobRequest.Merge(m, src)
}
func (m *UpdateCompactionJobRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCompactionJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCompactionJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCompactionJobRequest proto.InternalMessageInfo

func (m *UpdateCompactionJobRequest) GetKey() *JobKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *UpdateCompactionJobRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *UpdateCompactionJobRequest) GetUpdate() UpdateType {
	if m != nil {
		return m.Update
	}
	return IN_PROGRESS
}

type UpdateJobResponse struct {
}

func (m *UpdateJobResponse) Reset()      { *m = UpdateJobResponse{} }
func (*UpdateJobResponse) ProtoMessage() {}
func (*UpdateJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{10}
}
func (m *UpdateJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateJobResponse.Merge(m, src)
}
func (m *UpdateJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateJobResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("schedulerpb.JobType", JobType_name, JobType_value)
	proto.RegisterEnum("schedulerpb.UpdateType", UpdateType_name, UpdateType_value)
	proto.RegisterType((*JobKey)(nil), "schedulerpb.JobKey")
	proto.RegisterType((*JobSpec)(nil), "schedulerpb.JobSpec")
	proto.RegisterType((*CompactionJob)(nil), "schedulerpb.CompactionJob")
	proto.RegisterType((*LeaseJobRequest)(nil), "schedulerpb.LeaseJobRequest")
	proto.RegisterType((*LeaseJobResponse)(nil), "schedulerpb.LeaseJobResponse")
	proto.RegisterType((*PlannedCompactionJob)(nil), "schedulerpb.PlannedCompactionJob")
	proto.RegisterType((*PlannedJobsRequest)(nil), "schedulerpb.PlannedJobsRequest")
	proto.RegisterType((*PlannedJobsResponse)(nil), "schedulerpb.PlannedJobsResponse")
	proto.RegisterType((*UpdatePlanJobRequest)(nil), "schedulerpb.UpdatePlanJobRequest")
	proto.RegisterType((*UpdateCompactionJobRequest)(nil), "schedulerpb.UpdateCompactionJobRequest")
	proto.RegisterType((*UpdateJobResponse)(nil), "schedulerpb.UpdateJobResponse")
}

func init() { proto.RegisterFile("scheduler.proto", fileDescriptor_2b3fc28395a6d9c5) }

var fileDescriptor_2b3fc28395a6d9c5 = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xf5, 0x38, 0xfd, 0xd2, 0xf4, 0xba, 0x3f, 0xf9, 0x26, 0x01, 0x22, 0x03, 0x43, 0x6a, 0x09,
	0x35, 0xaa, 0x50, 0x2a, 0x05, 0x78, 0x80, 0xb4, 0x84, 0xc8, 0x69, 0x71, 0xa2, 0x71, 0xd8, 0x52,
	0xc5, 0xf6, 0xa8, 0x4d, 0x1a, 0x3c, 0xc6, 0x76, 0x85, 0xb2, 0xeb, 0x03, 0xb0, 0xe0, 0x31, 0x78,
	0x14, 0x96, 0x5d, 0x76, 0x49, 0x9d, 0x0d, 0xcb, 0x3e, 0x02, 0xf2, 0x4f, 0x5b, 0xbb, 0xb8, 0xa2,
	0xd9, 0xf9, 0xde, 0x39, 0xf7, 0xf8, 0xdc, 0xe3, 0x33, 0x86, 0x0d, 0xcf, 0x3c, 0x66, 0xd6, 0xe9,
	0x94, 0xb9, 0x4d, 0xc7, 0xe5, 0x3e, 0xc7, 0xd2, 0x4d, 0xc3, 0x31, 0xe4, 0xea, 0x11, 0x3f, 0xe2,
	0x51, 0x7f, 0x27, 0x7c, 0x8a, 0x21, 0x4a, 0x13, 0x8a, 0x3d, 0x6e, 0xec, 0xb3, 0x19, 0x5e, 0x07,
	0x71, 0x6c, 0xd5, 0x50, 0x1d, 0x35, 0x56, 0xa8, 0x38, 0xb6, 0x70, 0x15, 0xfe, 0x63, 0x0e, 0x37,
	0x8f, 0x6b, 0x62, 0x1d, 0x35, 0x0a, 0x34, 0x2e, 0x94, 0x33, 0x04, 0xcb, 0x3d, 0x6e, 0xe8, 0x0e,
	0x33, 0xf1, 0x63, 0x28, 0xfa, 0xcc, 0x1e, 0xd9, 0x7e, 0x32, 0x95, 0x54, 0xf8, 0x15, 0x14, 0x26,
	0xdc, 0x88, 0xe6, 0xa4, 0x96, 0xdc, 0x4c, 0x89, 0x68, 0xee, 0xf1, 0xcf, 0xce, 0xc8, 0xf4, 0xc7,
	0xdc, 0xee, 0x71, 0x83, 0x86, 0x30, 0xbc, 0x03, 0xa5, 0x09, 0x37, 0x0e, 0xfd, 0x99, 0xc3, 0x6a,
	0x85, 0x3a, 0x6a, 0xac, 0xb7, 0xaa, 0x99, 0x91, 0x1e, 0x37, 0x86, 0x33, 0x87, 0xd1, 0xe5, 0x49,
	0xfc, 0xa0, 0xb4, 0x61, 0x2d, 0x43, 0x83, 0x65, 0x28, 0x19, 0x53, 0x6e, 0x9e, 0xa8, 0x96, 0x57,
	0x13, 0xeb, 0x85, 0xc6, 0x2a, 0xbd, 0xa9, 0xc3, 0x2d, 0x3c, 0x67, 0x3a, 0xf6, 0x23, 0xea, 0x12,
	0x8d, 0x0b, 0xa5, 0x09, 0x1b, 0x07, 0x6c, 0xe4, 0xb1, 0x50, 0x04, 0xfb, 0x72, 0xca, 0x3c, 0x1f,
	0x3f, 0x85, 0x95, 0xaf, 0xdc, 0x3d, 0x61, 0xee, 0xe1, 0x8d, 0x0b, 0xa5, 0xb8, 0xa1, 0x5a, 0x8a,
	0x09, 0xe5, 0x5b, 0xbc, 0xe7, 0x70, 0xdb, 0x63, 0xf8, 0x25, 0x14, 0x4e, 0xd8, 0x2c, 0x82, 0x4a,
	0xad, 0xca, 0x5d, 0xc9, 0xfb, 0x6c, 0x46, 0xc3, 0x73, 0xdc, 0x80, 0x25, 0xcf, 0x61, 0x66, 0xe2,
	0xc6, 0x5f, 0xab, 0x85, 0x46, 0xd2, 0x08, 0xa1, 0x0c, 0xa1, 0x3a, 0x98, 0x8e, 0x6c, 0x9b, 0x59,
	0xd9, 0xf5, 0xee, 0x7e, 0x98, 0x85, 0xec, 0x55, 0x5c, 0xc0, 0x09, 0x6b, 0x8f, 0x1b, 0xde, 0xf5,
	0xb6, 0x0f, 0x14, 0xff, 0x16, 0x96, 0x26, 0xdc, 0x88, 0x5d, 0x95, 0x5a, 0x9b, 0x19, 0x5c, 0x9e,
	0x56, 0x1a, 0xc1, 0x95, 0x47, 0x50, 0xc9, 0xbc, 0x33, 0x76, 0x4c, 0xb1, 0xa1, 0xfa, 0xd1, 0xb1,
	0x46, 0x3e, 0x0b, 0x0f, 0x53, 0xd6, 0x3f, 0x50, 0xcc, 0x0e, 0x14, 0x4f, 0xa3, 0xf1, 0x24, 0x26,
	0x4f, 0x32, 0xc8, 0x98, 0x39, 0x4a, 0x4a, 0x02, 0x53, 0xbe, 0x21, 0x90, 0xe3, 0x76, 0x56, 0xe4,
	0x62, 0xaf, 0xbd, 0x4d, 0xb9, 0x98, 0x49, 0xf9, 0xc2, 0x72, 0x2a, 0xf0, 0x7f, 0xdc, 0x4d, 0xa5,
	0x68, 0x7b, 0x2b, 0xba, 0x4e, 0x21, 0x0e, 0xaf, 0x03, 0xec, 0xf5, 0x3f, 0x0c, 0xda, 0x7b, 0x43,
	0xb5, 0xaf, 0x95, 0x05, 0xbc, 0x0a, 0xa5, 0xc1, 0x41, 0x5b, 0xd3, 0x54, 0xad, 0x5b, 0x46, 0xdb,
	0xef, 0x01, 0x6e, 0x39, 0xf1, 0x06, 0x48, 0xaa, 0x76, 0x38, 0xa0, 0xfd, 0x2e, 0xed, 0xe8, 0x7a,
	0x0c, 0x0e, 0x87, 0x0f, 0x3a, 0xc3, 0x4e, 0x19, 0x85, 0x15, 0xed, 0xb4, 0x75, 0x5d, 0xed, 0x6a,
	0x65, 0x11, 0x4b, 0xb0, 0xdc, 0xde, 0x6d, 0x6b, 0xef, 0xfa, 0x5a, 0xb9, 0xd0, 0x9a, 0x8b, 0x80,
	0x13, 0x3b, 0xb8, 0xab, 0x5f, 0x2b, 0xc6, 0x5d, 0x28, 0x5d, 0x27, 0x1c, 0x3f, 0xcb, 0x6c, 0x72,
	0xe7, 0xa2, 0xc8, 0xcf, 0xef, 0x39, 0x4d, 0xae, 0xc5, 0x00, 0xa4, 0xd4, 0xb7, 0xc7, 0x2f, 0xf2,
	0x32, 0x93, 0x4a, 0xa2, 0x5c, 0xbf, 0x1f, 0x90, 0x30, 0x52, 0x58, 0xcb, 0xc4, 0x06, 0x6f, 0xe6,
	0x38, 0x9d, 0x8d, 0x94, 0x4c, 0x72, 0x20, 0x69, 0x95, 0x9f, 0xa0, 0x92, 0x93, 0x0c, 0xbc, 0x95,
	0x33, 0x96, 0x97, 0x9d, 0x7f, 0xf1, 0xef, 0xbe, 0x39, 0xbf, 0x24, 0xc2, 0xc5, 0x25, 0x11, 0xae,
	0x2e, 0x09, 0x3a, 0x0b, 0x08, 0xfa, 0x11, 0x10, 0xf4, 0x33, 0x20, 0xe8, 0x3c, 0x20, 0xe8, 0x57,
	0x40, 0xd0, 0xef, 0x80, 0x08, 0x57, 0x01, 0x41, 0xdf, 0xe7, 0x44, 0x38, 0x9f, 0x13, 0xe1, 0x62,
	0x4e, 0x04, 0xa3, 0x18, 0xfd, 0x93, 0x5f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x57, 0xdc,
	0x5f, 0xc9, 0x05, 0x00, 0x00,
}

func (x JobType) String() string {
	s, ok := JobType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UpdateType) String() string {
	s, ok := UpdateType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *JobKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JobKey)
	if !ok {
		that2, ok := that.(JobKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	return true
}
func (this *JobSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JobSpec)
	if !ok {
		that2, ok := that.(JobSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if !this.Job.Equal(that1.Job) {
		return false
	}
	if this.JobType != that1.JobType {
		return false
	}
	return true
}
func (this *CompactionJob) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompactionJob)
	if !ok {
		that2, ok := that.(CompactionJob)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BlockIds) != len(that1.BlockIds) {
		return false
	}
	for i := range this.BlockIds {
		if !bytes.Equal(this.BlockIds[i], that1.BlockIds[i]) {
			return false
		}
	}
	if this.Split != that1.Split {
		return false
	}
	return true
}
func (this *LeaseJobRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeaseJobRequest)
	if !ok {
		that2, ok := that.(LeaseJobRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkerId != that1.WorkerId {
		return false
	}
	return true
}
func (this *LeaseJobResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeaseJobResponse)
	if !ok {
		that2, ok := that.(LeaseJobResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *PlannedCompactionJob) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlannedCompactionJob)
	if !ok {
		that2, ok := that.(PlannedCompactionJob)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Job.Equal(that1.Job) {
		return false
	}
	return true
}
func (this *PlannedJobsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlannedJobsRequest)
	if !ok {
		that2, ok := that.(PlannedJobsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if len(this.Jobs) != len(that1.Jobs) {
		return false
	}
	for i := range this.Jobs {
		if !this.Jobs[i].Equal(that1.Jobs[i]) {
			return false
		}
	}
	return true
}
func (this *PlannedJobsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlannedJobsResponse)
	if !ok {
		that2, ok := that.(PlannedJobsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdatePlanJobRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdatePlanJobRequest)
	if !ok {
		that2, ok := that.(UpdatePlanJobRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if this.Update != that1.Update {
		return false
	}
	return true
}
func (this *UpdateCompactionJobRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateCompactionJobRequest)
	if !ok {
		that2, ok := that.(UpdateCompactionJobRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Update != that1.Update {
		return false
	}
	return true
}
func (this *UpdateJobResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateJobResponse)
	if !ok {
		that2, ok := that.(UpdateJobResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *JobKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schedulerpb.JobKey{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JobSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schedulerpb.JobSpec{")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	if this.Job != nil {
		s = append(s, "Job: "+fmt.Sprintf("%#v", this.Job)+",\n")
	}
	s = append(s, "JobType: "+fmt.Sprintf("%#v", this.JobType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompactionJob) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schedulerpb.CompactionJob{")
	s = append(s, "BlockIds: "+fmt.Sprintf("%#v", this.BlockIds)+",\n")
	s = append(s, "Split: "+fmt.Sprintf("%#v", this.Split)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeaseJobRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schedulerpb.LeaseJobRequest{")
	s = append(s, "WorkerId: "+fmt.Sprintf("%#v", this.WorkerId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeaseJobResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schedulerpb.LeaseJobResponse{")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlannedCompactionJob) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schedulerpb.PlannedCompactionJob{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Job != nil {
		s = append(s, "Job: "+fmt.Sprintf("%#v", this.Job)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlannedJobsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schedulerpb.PlannedJobsRequest{")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	if this.Jobs != nil {
		s = append(s, "Jobs: "+fmt.Sprintf("%#v", this.Jobs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlannedJobsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&schedulerpb.PlannedJobsResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatePlanJobRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schedulerpb.UpdatePlanJobRequest{")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateCompactionJobRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schedulerpb.UpdateCompactionJobRequest{")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateJobResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&schedulerpb.UpdateJobResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringScheduler(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CompactorSchedulerClient is the client API for CompactorScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompactorSchedulerClient interface {
	LeaseJob(ctx context.Context, in *LeaseJobRequest, opts ...grpc.CallOption) (*LeaseJobResponse, error)
	PlannedJobs(ctx context.Context, in *PlannedJobsRequest, opts ...grpc.CallOption) (*PlannedJobsResponse, error)
	UpdatePlanJob(ctx context.Context, in *UpdatePlanJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error)
	UpdateCompactionJob(ctx context.Context, in *UpdateCompactionJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error)
}

type compactorSchedulerClient struct {
	cc *grpc.ClientConn
}

func NewCompactorSchedulerClient(cc *grpc.ClientConn) CompactorSchedulerClient {
	return &compactorSchedulerClient{cc}
}

func (c *compactorSchedulerClient) LeaseJob(ctx context.Context, in *LeaseJobRequest, opts ...grpc.CallOption) (*LeaseJobResponse, error) {
	out := new(LeaseJobResponse)
	err := c.cc.Invoke(ctx, "/schedulerpb.CompactorScheduler/LeaseJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compactorSchedulerClient) PlannedJobs(ctx context.Context, in *PlannedJobsRequest, opts ...grpc.CallOption) (*PlannedJobsResponse, error) {
	out := new(PlannedJobsResponse)
	err := c.cc.Invoke(ctx, "/schedulerpb.CompactorScheduler/PlannedJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compactorSchedulerClient) UpdatePlanJob(ctx context.Context, in *UpdatePlanJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error) {
	out := new(UpdateJobResponse)
	err := c.cc.Invoke(ctx, "/schedulerpb.CompactorScheduler/UpdatePlanJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compactorSchedulerClient) UpdateCompactionJob(ctx context.Context, in *UpdateCompactionJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error) {
	out := new(UpdateJobResponse)
	err := c.cc.Invoke(ctx, "/schedulerpb.CompactorScheduler/UpdateCompactionJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompactorSchedulerServer is the server API for CompactorScheduler service.
type CompactorSchedulerServer interface {
	LeaseJob(context.Context, *LeaseJobRequest) (*LeaseJobResponse, error)
	PlannedJobs(context.Context, *PlannedJobsRequest) (*PlannedJobsResponse, error)
	UpdatePlanJob(context.Context, *UpdatePlanJobRequest) (*UpdateJobResponse, error)
	UpdateCompactionJob(context.Context, *UpdateCompactionJobRequest) (*UpdateJobResponse, error)
}

// UnimplementedCompactorSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedCompactorSchedulerServer struct {
}

func (*UnimplementedCompactorSchedulerServer) LeaseJob(ctx context.Context, req *LeaseJobRequest) (*LeaseJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseJob not implemented")
}
func (*UnimplementedCompactorSchedulerServer) PlannedJobs(ctx context.Context, req *PlannedJobsRequest) (*PlannedJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlannedJobs not implemented")
}
func (*UnimplementedCompactorSchedulerServer) UpdatePlanJob(ctx context.Context, req *UpdatePlanJobRequest) (*UpdateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlanJob not implemented")
}
func (*UnimplementedCompactorSchedulerServer) UpdateCompactionJob(ctx context.Context, req *UpdateCompactionJobRequest) (*UpdateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompactionJob not implemented")
}

func RegisterCompactorSchedulerServer(s *grpc.Server, srv CompactorSchedulerServer) {
	s.RegisterService(&_CompactorScheduler_serviceDesc, srv)
}

func _CompactorScheduler_LeaseJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompactorSchedulerServer).LeaseJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedulerpb.CompactorScheduler/LeaseJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompactorSchedulerServer).LeaseJob(ctx, req.(*LeaseJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompactorScheduler_PlannedJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlannedJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompactorSchedulerServer).PlannedJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedulerpb.CompactorScheduler/PlannedJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompactorSchedulerServer).PlannedJobs(ctx, req.(*PlannedJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompactorScheduler_UpdatePlanJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompactorSchedulerServer).UpdatePlanJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedulerpb.CompactorScheduler/UpdatePlanJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompactorSchedulerServer).UpdatePlanJob(ctx, req.(*UpdatePlanJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompactorScheduler_UpdateCompactionJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompactionJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompactorSchedulerServer).UpdateCompactionJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedulerpb.CompactorScheduler/UpdateCompactionJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompactorSchedulerServer).UpdateCompactionJob(ctx, req.(*UpdateCompactionJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompactorScheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "schedulerpb.CompactorScheduler",
	HandlerType: (*CompactorSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LeaseJob",
			Handler:    _CompactorScheduler_LeaseJob_Handler,
		},
		{
			MethodName: "PlannedJobs",
			Handler:    _CompactorScheduler_PlannedJobs_Handler,
		},
		{
			MethodName: "UpdatePlanJob",
			Handler:    _CompactorScheduler_UpdatePlanJob_Handler,
		},
		{
			MethodName: "UpdateCompactionJob",
			Handler:    _CompactorScheduler_UpdateCompactionJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler.proto",
}

func (m *JobKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintScheduler(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintScheduler(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JobType != 0 {
		i = encodeVarintScheduler(dAtA, i, uint64(m.JobType))
		i--
		dAtA[i] = 0x18
	}
	if m.Job != nil {
		{
			size, err := m.Job.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheduler(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintScheduler(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompactionJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactionJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactionJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Split {
		i--
		if m.Split {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.BlockIds) > 0 {
		for iNdEx := len(m.BlockIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlockIds[iNdEx])
			copy(dAtA[i:], m.BlockIds[iNdEx])
			i = encodeVarintScheduler(dAtA, i, uint64(len(m.BlockIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *LeaseJobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaseJobRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaseJobRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerId) > 0 {
		i -= len(m.WorkerId)
		copy(dAtA[i:], m.WorkerId)
		i = encodeVarintScheduler(dAtA, i, uint64(len(m.WorkerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LeaseJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaseJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaseJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheduler(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheduler(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlannedCompactionJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlannedCompactionJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlannedCompactionJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Job != nil {
		{
			size, err := m.Job.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheduler(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintScheduler(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlannedJobsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlannedJobsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlannedJobsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Jobs) > 0 {
		for iNdEx := len(m.Jobs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Jobs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintScheduler(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheduler(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlannedJobsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlannedJobsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlannedJobsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdatePlanJobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePlanJobRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePlanJobRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Update != 0 {
		i = encodeVarintScheduler(dAtA, i, uint64(m.Update))
		i--
		dAtA[i] = 0x18
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheduler(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCompactionJobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCompactionJobRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCompactionJobRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Update != 0 {
		i = encodeVarintScheduler(dAtA, i, uint64(m.Update))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintScheduler(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheduler(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintScheduler(dAtA []byte, offset int, v uint64) int {
	offset -= sovScheduler(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JobKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovScheduler(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovScheduler(uint64(m.Epoch))
	}
	return n
}

func (m *JobSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovScheduler(uint64(l))
	}
	if m.Job != nil {
		l = m.Job.Size()
		n += 1 + l + sovScheduler(uint64(l))
	}
	if m.JobType != 0 {
		n += 1 + sovScheduler(uint64(m.JobType))
	}
	return n
}

func (m *CompactionJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockIds) > 0 {
		for _, b := range m.BlockIds {
			l = len(b)
			n += 1 + l + sovScheduler(uint64(l))
		}
	}
	if m.Split {
		n += 2
	}
	return n
}

func (m *LeaseJobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkerId)
	if l > 0 {
		n += 1 + l + sovScheduler(uint64(l))
	}
	return n
}

func (m *LeaseJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovScheduler(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovScheduler(uint64(l))
	}
	return n
}

func (m *PlannedCompactionJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovScheduler(uint64(l))
	}
	if m.Job != nil {
		l = m.Job.Size()
		n += 1 + l + sovScheduler(uint64(l))
	}
	return n
}

func (m *PlannedJobsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovScheduler(uint64(l))
	}
	if len(m.Jobs) > 0 {
		for _, e := range m.Jobs {
			l = e.Size()
			n += 1 + l + sovScheduler(uint64(l))
		}
	}
	return n
}

func (m *PlannedJobsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdatePlanJobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovScheduler(uint64(l))
	}
	if m.Update != 0 {
		n += 1 + sovScheduler(uint64(m.Update))
	}
	return n
}

func (m *UpdateCompactionJobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovScheduler(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovScheduler(uint64(l))
	}
	if m.Update != 0 {
		n += 1 + sovScheduler(uint64(m.Update))
	}
	return n
}

func (m *UpdateJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovScheduler(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScheduler(x uint64) (n int) {
	return sovScheduler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *JobKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobKey{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobSpec{`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`Job:` + strings.Replace(this.Job.String(), "CompactionJob", "CompactionJob", 1) + `,`,
		`JobType:` + fmt.Sprintf("%v", this.JobType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompactionJob) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompactionJob{`,
		`BlockIds:` + fmt.Sprintf("%v", this.BlockIds) + `,`,
		`Split:` + fmt.Sprintf("%v", this.Split) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaseJobRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaseJobRequest{`,
		`WorkerId:` + fmt.Sprintf("%v", this.WorkerId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaseJobResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaseJobResponse{`,
		`Key:` + strings.Replace(this.Key.String(), "JobKey", "JobKey", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "JobSpec", "JobSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlannedCompactionJob) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlannedCompactionJob{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Job:` + strings.Replace(this.Job.String(), "CompactionJob", "CompactionJob", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlannedJobsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForJobs := "[]*PlannedCompactionJob{"
	for _, f := range this.Jobs {
		repeatedStringForJobs += strings.Replace(f.String(), "PlannedCompactionJob", "PlannedCompactionJob", 1) + ","
	}
	repeatedStringForJobs += "}"
	s := strings.Join([]string{`&PlannedJobsRequest{`,
		`Key:` + strings.Replace(this.Key.String(), "JobKey", "JobKey", 1) + `,`,
		`Jobs:` + repeatedStringForJobs + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlannedJobsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlannedJobsResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePlanJobRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePlanJobRequest{`,
		`Key:` + strings.Replace(this.Key.String(), "JobKey", "JobKey", 1) + `,`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateCompactionJobRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateCompactionJobRequest{`,
		`Key:` + strings.Replace(this.Key.String(), "JobKey", "JobKey", 1) + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateJobResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateJobResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringScheduler(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *JobKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Job == nil {
				m.Job = &CompactionJob{}
			}
			if err := m.Job.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobType", wireType)
			}
			m.JobType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobType |= JobType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactionJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactionJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactionJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockIds = append(m.BlockIds, make([]byte, postIndex-iNdEx))
			copy(m.BlockIds[len(m.BlockIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Split", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Split = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaseJobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaseJobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaseJobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaseJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaseJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaseJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &JobKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &JobSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlannedCompactionJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlannedCompactionJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlannedCompactionJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Job == nil {
				m.Job = &CompactionJob{}
			}
			if err := m.Job.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlannedJobsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlannedJobsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlannedJobsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &JobKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jobs = append(m.Jobs, &PlannedCompactionJob{})
			if err := m.Jobs[len(m.Jobs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlannedJobsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlannedJobsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlannedJobsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePlanJobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePlanJobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePlanJobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &JobKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			m.Update = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Update |= UpdateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCompactionJobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCompactionJobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCompactionJobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &JobKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			m.Update = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Update |= UpdateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScheduler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScheduler
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScheduler
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScheduler
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScheduler        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScheduler          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScheduler = fmt.Errorf("proto: unexpected end of group")
)
