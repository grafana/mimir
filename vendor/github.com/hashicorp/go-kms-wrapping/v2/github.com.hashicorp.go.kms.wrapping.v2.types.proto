syntax = "proto3";

option go_package = "github.com/hashicorp/go-kms-wrapping/v2;wrapping";

package github.com.hashicorp.go.kms.wrapping.v2.types;

import "google/protobuf/struct.proto";

// WrapperConfig is the result of a call to SetConfig on a wrapper, returning
// relevant information about the wrapper and its updated configuration
message WrapperConfig {
	map<string, string> metadata = 10;
}

// EnvelopeInfo contains the information necessary to perfom encryption or
// decryption in an envelope fashion
message EnvelopeInfo {
	// Ciphertext is the ciphertext from the envelope
	bytes ciphertext = 1;

	// Key is the key used in the envelope
	bytes key = 2;

	// IV is the initialization value used during encryption in the envelope
	bytes iv = 3;
}

// BlobInfo contains information about the encrypted value along with
// information about the key used to encrypt it
message BlobInfo {
	// Ciphertext is the encrypted bytes
	bytes ciphertext = 1;

	// IV is the initialization value used during encryption
	bytes iv = 2;

	// HMAC is the bytes of the HMAC, if any
	bytes hmac = 3;

	// Wrapped can be used by the client to indicate whether Ciphertext actually
	// contains wrapped data or not. This can be useful if you want to reuse the
	// same struct to pass data along before and after wrapping. Deprecated in
	// favor of plaintext.
	bool wrapped = 4 [deprecated = true];

	// Plaintext can be used to allow the same struct to be used to pass data
	// along before and after (un)wrapping.
	bytes plaintext = 7;

	// KeyInfo contains information about the key that was used to create this value
	KeyInfo key_info = 5;

	// ValuePath can be used by the client to store information about where the
	// value came from. Deprecated in favor of client_data.
	string value_path = 6 [deprecated = true];

	// ClientData can be used by the client to store extra information, for
	// instance, the location/provenance of where an encrypted value came from
	// (useful for associating AAD to the encrypted value).
	google.protobuf.Struct client_data = 8;
}

// KeyInfo contains information regarding which Wrapper key was used to
// encrypt the entry
message KeyInfo {
	// Mechanism is the method used by the wrapper to encrypt and sign the
	// data as defined by the wrapper.
	uint64 mechanism = 1;
	uint64 hmac_mechanism = 2;

	// This is an opaque ID used by the wrapper to identify the specific key to
	// use as defined by the wrapper. This could be a version, key label, or
	// something else.
	string key_id = 3;
	string hmac_key_id = 4;

	// These value are used when generating our own data encryption keys
	// and encrypting them using the wrapper
	bytes wrapped_key = 5;

	// Mechanism specific flags
	uint64 flags = 6;
}

// Options holds options common to all wrappers
message Options {
	// The key ID being specified
	string with_key_id = 10;

	// The AAD bytes, if any
	bytes with_aad = 20;

	bytes with_iv = 12;

	// Wrapper-specific configuration to pass along
	map<string, string> with_config_map = 30;
}
