// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: ring/partition_ring_desc.proto

package ring

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartitionState int32

const (
	PartitionState_PartitionUnknown PartitionState = 0
	// Pending partition is a partition that is about to be switched to InstanceState_ACTIVE. This state is used
	// to let owners to attach to the partition and get ready to handle the partition.
	//
	// When a partition is in this state, it must not be used for writing or reading.
	PartitionState_PartitionPending PartitionState = 1
	// Active partition in read-write mode.
	PartitionState_PartitionActive PartitionState = 2
	// Inactive partition in read-only mode. This partition will be deleted after a grace period,
	// unless its state changes to Active again.
	PartitionState_PartitionInactive PartitionState = 3
	// Deleted partition. This state is not visible to ring clients: it's only used to propagate
	// via memberlist the information that a partition has been deleted.
	PartitionState_PartitionDeleted PartitionState = 4
)

// Enum value maps for PartitionState.
var (
	PartitionState_name = map[int32]string{
		0: "PartitionUnknown",
		1: "PartitionPending",
		2: "PartitionActive",
		3: "PartitionInactive",
		4: "PartitionDeleted",
	}
	PartitionState_value = map[string]int32{
		"PartitionUnknown":  0,
		"PartitionPending":  1,
		"PartitionActive":   2,
		"PartitionInactive": 3,
		"PartitionDeleted":  4,
	}
)

func (x PartitionState) Enum() *PartitionState {
	p := new(PartitionState)
	*p = x
	return p
}

func (x PartitionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionState) Descriptor() protoreflect.EnumDescriptor {
	return file_ring_partition_ring_desc_proto_enumTypes[0].Descriptor()
}

func (PartitionState) Type() protoreflect.EnumType {
	return &file_ring_partition_ring_desc_proto_enumTypes[0]
}

func (x PartitionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitionState.Descriptor instead.
func (PartitionState) EnumDescriptor() ([]byte, []int) {
	return file_ring_partition_ring_desc_proto_rawDescGZIP(), []int{0}
}

type OwnerState int32

const (
	OwnerState_OwnerUnknown OwnerState = 0
	// Active owner.
	OwnerState_OwnerActive OwnerState = 1
	// Deleted owner. This state is not visible to ring clients: it's only used to propagate
	// via memberlist the information that a owner has been deleted. Owners in this state
	// are removed before client can see them.
	OwnerState_OwnerDeleted OwnerState = 2
)

// Enum value maps for OwnerState.
var (
	OwnerState_name = map[int32]string{
		0: "OwnerUnknown",
		1: "OwnerActive",
		2: "OwnerDeleted",
	}
	OwnerState_value = map[string]int32{
		"OwnerUnknown": 0,
		"OwnerActive":  1,
		"OwnerDeleted": 2,
	}
)

func (x OwnerState) Enum() *OwnerState {
	p := new(OwnerState)
	*p = x
	return p
}

func (x OwnerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OwnerState) Descriptor() protoreflect.EnumDescriptor {
	return file_ring_partition_ring_desc_proto_enumTypes[1].Descriptor()
}

func (OwnerState) Type() protoreflect.EnumType {
	return &file_ring_partition_ring_desc_proto_enumTypes[1]
}

func (x OwnerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OwnerState.Descriptor instead.
func (OwnerState) EnumDescriptor() ([]byte, []int) {
	return file_ring_partition_ring_desc_proto_rawDescGZIP(), []int{1}
}

// PartitionRingDesc holds the state of the partitions ring.
type PartitionRingDesc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mapping between partition ID and partition info.
	Partitions map[int32]*PartitionDesc `protobuf:"bytes,1,rep,name=partitions,proto3" json:"partitions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Mapping between instance ID and partition ownership info.
	Owners        map[string]*OwnerDesc `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionRingDesc) Reset() {
	*x = PartitionRingDesc{}
	mi := &file_ring_partition_ring_desc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionRingDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRingDesc) ProtoMessage() {}

func (x *PartitionRingDesc) ProtoReflect() protoreflect.Message {
	mi := &file_ring_partition_ring_desc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRingDesc.ProtoReflect.Descriptor instead.
func (*PartitionRingDesc) Descriptor() ([]byte, []int) {
	return file_ring_partition_ring_desc_proto_rawDescGZIP(), []int{0}
}

func (x *PartitionRingDesc) GetPartitions() map[int32]*PartitionDesc {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *PartitionRingDesc) GetOwners() map[string]*OwnerDesc {
	if x != nil {
		return x.Owners
	}
	return nil
}

// PartitionDesc holds the state of a single partition.
type PartitionDesc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The partition ID. This value is the same as the key in the partitions map in PartitionRingDesc.
	Id int32 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	// Unique tokens, generated with deterministic token generator. Tokens MUST be immutable:
	// if tokens get changed, the change will not be propagated via memberlist.
	Tokens []uint32 `protobuf:"varint,1,rep,packed,name=tokens,proto3" json:"tokens,omitempty"`
	// The state of the partition.
	State PartitionState `protobuf:"varint,2,opt,name=state,proto3,enum=ring.PartitionState" json:"state,omitempty"`
	// Unix timestamp (with seconds precision) of when has the state changed last time for this partition.
	StateTimestamp int64 `protobuf:"varint,3,opt,name=stateTimestamp,proto3" json:"stateTimestamp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PartitionDesc) Reset() {
	*x = PartitionDesc{}
	mi := &file_ring_partition_ring_desc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionDesc) ProtoMessage() {}

func (x *PartitionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_ring_partition_ring_desc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionDesc.ProtoReflect.Descriptor instead.
func (*PartitionDesc) Descriptor() ([]byte, []int) {
	return file_ring_partition_ring_desc_proto_rawDescGZIP(), []int{1}
}

func (x *PartitionDesc) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PartitionDesc) GetTokens() []uint32 {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *PartitionDesc) GetState() PartitionState {
	if x != nil {
		return x.State
	}
	return PartitionState_PartitionUnknown
}

func (x *PartitionDesc) GetStateTimestamp() int64 {
	if x != nil {
		return x.StateTimestamp
	}
	return 0
}

// OwnerDesc holds the information of a partition owner.
type OwnerDesc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Partition that belongs to this owner. A owner can own only 1 partition, but 1 partition can be
	// owned by multiple owners.
	OwnedPartition int32 `protobuf:"varint,1,opt,name=ownedPartition,proto3" json:"ownedPartition,omitempty"`
	// The owner state. This field is used to propagate deletions via memberlist.
	State OwnerState `protobuf:"varint,2,opt,name=state,proto3,enum=ring.OwnerState" json:"state,omitempty"`
	// Unix timestamp (with seconds precision) of when the data for the owner has been updated the last time.
	// This timestamp is used to resolve conflicts when merging updates via memberlist (the most recent
	// update wins).
	UpdatedTimestamp int64 `protobuf:"varint,3,opt,name=updatedTimestamp,proto3" json:"updatedTimestamp,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OwnerDesc) Reset() {
	*x = OwnerDesc{}
	mi := &file_ring_partition_ring_desc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnerDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerDesc) ProtoMessage() {}

func (x *OwnerDesc) ProtoReflect() protoreflect.Message {
	mi := &file_ring_partition_ring_desc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerDesc.ProtoReflect.Descriptor instead.
func (*OwnerDesc) Descriptor() ([]byte, []int) {
	return file_ring_partition_ring_desc_proto_rawDescGZIP(), []int{2}
}

func (x *OwnerDesc) GetOwnedPartition() int32 {
	if x != nil {
		return x.OwnedPartition
	}
	return 0
}

func (x *OwnerDesc) GetState() OwnerState {
	if x != nil {
		return x.State
	}
	return OwnerState_OwnerUnknown
}

func (x *OwnerDesc) GetUpdatedTimestamp() int64 {
	if x != nil {
		return x.UpdatedTimestamp
	}
	return 0
}

var File_ring_partition_ring_desc_proto protoreflect.FileDescriptor

var file_ring_partition_ring_desc_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xb9, 0x02, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x12, 0x47, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x2e, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x1a, 0x52, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x87, 0x01, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x26,
	0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0x7e, 0x0a, 0x0e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x41, 0x0a, 0x0a, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x02, 0x42, 0x24, 0x5a,
	0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66,
	0x61, 0x6e, 0x61, 0x2f, 0x64, 0x73, 0x6b, 0x69, 0x74, 0x2f, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x72,
	0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ring_partition_ring_desc_proto_rawDescOnce sync.Once
	file_ring_partition_ring_desc_proto_rawDescData = file_ring_partition_ring_desc_proto_rawDesc
)

func file_ring_partition_ring_desc_proto_rawDescGZIP() []byte {
	file_ring_partition_ring_desc_proto_rawDescOnce.Do(func() {
		file_ring_partition_ring_desc_proto_rawDescData = protoimpl.X.CompressGZIP(file_ring_partition_ring_desc_proto_rawDescData)
	})
	return file_ring_partition_ring_desc_proto_rawDescData
}

var file_ring_partition_ring_desc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ring_partition_ring_desc_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_ring_partition_ring_desc_proto_goTypes = []any{
	(PartitionState)(0),       // 0: ring.PartitionState
	(OwnerState)(0),           // 1: ring.OwnerState
	(*PartitionRingDesc)(nil), // 2: ring.PartitionRingDesc
	(*PartitionDesc)(nil),     // 3: ring.PartitionDesc
	(*OwnerDesc)(nil),         // 4: ring.OwnerDesc
	nil,                       // 5: ring.PartitionRingDesc.PartitionsEntry
	nil,                       // 6: ring.PartitionRingDesc.OwnersEntry
}
var file_ring_partition_ring_desc_proto_depIdxs = []int32{
	5, // 0: ring.PartitionRingDesc.partitions:type_name -> ring.PartitionRingDesc.PartitionsEntry
	6, // 1: ring.PartitionRingDesc.owners:type_name -> ring.PartitionRingDesc.OwnersEntry
	0, // 2: ring.PartitionDesc.state:type_name -> ring.PartitionState
	1, // 3: ring.OwnerDesc.state:type_name -> ring.OwnerState
	3, // 4: ring.PartitionRingDesc.PartitionsEntry.value:type_name -> ring.PartitionDesc
	4, // 5: ring.PartitionRingDesc.OwnersEntry.value:type_name -> ring.OwnerDesc
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_ring_partition_ring_desc_proto_init() }
func file_ring_partition_ring_desc_proto_init() {
	if File_ring_partition_ring_desc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ring_partition_ring_desc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ring_partition_ring_desc_proto_goTypes,
		DependencyIndexes: file_ring_partition_ring_desc_proto_depIdxs,
		EnumInfos:         file_ring_partition_ring_desc_proto_enumTypes,
		MessageInfos:      file_ring_partition_ring_desc_proto_msgTypes,
	}.Build()
	File_ring_partition_ring_desc_proto = out.File
	file_ring_partition_ring_desc_proto_rawDesc = nil
	file_ring_partition_ring_desc_proto_goTypes = nil
	file_ring_partition_ring_desc_proto_depIdxs = nil
}
