#!/usr/bin/env bash

set -euf -o pipefail

function show_help {
  cat <<EOF
Open a pull request that updates versioned Mimir documentation on the Grafana website.
It is assumed that the documentation being released is the "latest" and the website
will be updated to reflect that.

Usage:
  $0 <website repository directory> <version>

Examples:
  $0 ~/ext/grafana/website 1.12.0
EOF
}

if [[ $# -ne 2 ]]; then
  show_help
  exit 1
fi

readonly WEBSITE_DIR="$1"
readonly VERSION="$2"

readonly DRY_RUN="${DRY_RUN:-0}"

readonly MIMIR_DIR="${MIMIR_DIR:-$(git rev-parse --show-toplevel)}"

readonly WEBSITE_BRANCH="${WEBSITE_BRANCH:-mimir-release-${VERSION}}"
readonly WEBSITE_REMOTE="${WEBSITE_REMOTE:-origin}"

function maybe_clone {
  local dir="$1"
  local repo="$2"
  if [[ ! -d "${dir}" ]]; then
    git clone "${repo}" "${dir}"
  fi
}

maybe_clone "${MIMIR_DIR}" git@github.com:grafana/mimir.git
maybe_clone "${WEBSITE_DIR}" git@github.com:grafana/website.git

function cleanup {
  cd "${WEBSITE_DIR}" && git checkout -
  cd "${MIMIR_DIR}" && git checkout -
}

trap "cleanup" INT TERM EXIT

cd "${MIMIR_DIR}"
git fetch --tags
git checkout "${VERSION}" || (echo "Release tag '${VERSION}' does not exist locally. Refusing to continue." && exit 1)

cd "${WEBSITE_DIR}"
# Create a new branch for the changes.
git fetch origin
git checkout -B "${WEBSITE_BRANCH}" "${WEBSITE_REMOTE}"/master
# Move unreleased documentation aside to allow the `docs-release.sh` script
# to update aliases and perform any future changes that it does.
mv content/docs/mimir/next content/docs/mimir/next.main
# Consider the to-be-released documentation as the "next" documentation.
cp -r "${MIMIR_DIR}/docs/sources" -T content/docs/mimir/next
# Copy that "next" documentation to "latest" and update aliases.
./scripts/docs-release.sh mimir latest next
# Copy that "latest" documentation to a version directory and update aliases.
./scripts/docs-release.sh mimir "${VERSION}" latest
# Restore the "next" documentation.
rm -r content/docs/mimir/next && mv content/docs/mimir/next.main content/docs/mimir/next
# Update the documentation index frontmatter to use the release.
sed -i -e "s/^version_latest: .*$/version_latest: ${VERSION}/" content/docs/mimir/_index.md

# Add, commit, and optionally push all changes.
git add -- content/docs/mimir
git commit -m "Update Mimir documentation to reflect ${VERSION} release"
if [[ "${DRY_RUN}" -eq 0 ]]; then
  git push "${WEBSITE_REMOTE}" HEAD:"${WEBSITE_BRANCH}"
fi
