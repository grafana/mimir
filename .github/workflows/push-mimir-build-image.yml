name: Build and Push mimir-build-image

# configure trigger by pull request or manually
on:
  pull_request:
    paths:
      - mimir-build-image/Dockerfile
  workflow_dispatch:
    inputs:
      force_push:
        description: 'Force push image to Docker Hub even the tag exist'
        type: choice
        required: true
        options:
          - true
          - false
        default: false

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare Variables
        id: prepare
        run: |
          echo "path=mimir-build-image/Dockerfile" >> $GITHUB_OUTPUT
          echo "image=grafana/mimir-build-image" >> $GITHUB_OUTPUT

      - name: Compute Image Tag
        id: compute_hash
        run: |
          current_hash=$(sha256sum ${{ steps.prepare.outputs.path }} | awk '{print $1}')
          echo "the file path is ${{ steps.prepare.outputs.path }}"
          echo "tag=$current_hash" >> $GITHUB_OUTPUT

      - name: Check Docker Image
        id: check_image
        run: |
          echo "Checking if image exists"
          response=$(curl --silent --head -lL https://hub.docker.com/v2/repositories/${{ steps.prepare.outputs.image }}/tags/${{ steps.compute_hash.outputs.tag }})
          if [[ ! ($response == *"200 OK"*) ]]; then
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Docker Image
        if: steps.check_image.outputs.exists == 'false' || ${{ github.event.inputs.force_push }} == 'true'
        run: |
          make push-multiarch-build-image IMAGE_TAG=${{ steps.compute_hash.outputs.tag }}